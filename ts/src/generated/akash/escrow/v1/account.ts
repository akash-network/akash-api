// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/escrow/v1/account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { messageTypeRegistry } from "../../../typeRegistry";
import { AccountID } from "./accountid";

/** Account stores state for an escrow account */
export interface Account {
  $type: "akash.escrow.v1.Account";
  /** unique identifier for this escrow account */
  id: AccountID | undefined;
  /** bech32 encoded account address of the owner of this escrow account */
  owner: string;
  /** current state of this escrow account */
  state: Account_State;
  /** unspent coins received from the owner's wallet */
  balance: DecCoin | undefined;
  /** total coins spent by this account */
  transferred: DecCoin | undefined;
  /** block height at which this account was last settled */
  settledAt: Long;
  /**
   * bech32 encoded account address of the depositor.
   * If depositor is same as the owner, then any incoming coins are added to the Balance.
   * If depositor isn't same as the owner, then any incoming coins are added to the Funds.
   */
  depositor: string;
  /**
   * Funds are unspent coins received from the (non-Owner) Depositor's wallet.
   * If there are any funds, they should be spent before spending the Balance.
   */
  funds: DecCoin | undefined;
}

/** State stores state for an escrow account */
export enum Account_State {
  /** invalid - AccountStateInvalid is an invalid state */
  invalid = 0,
  /** open - AccountOpen is the state when an account is open */
  open = 1,
  /** closed - AccountClosed is the state when an account is closed */
  closed = 2,
  /** overdrawn - AccountOverdrawn is the state when an account is overdrawn */
  overdrawn = 3,
  UNRECOGNIZED = -1,
}

export function account_StateFromJSON(object: any): Account_State {
  switch (object) {
    case 0:
    case "invalid":
      return Account_State.invalid;
    case 1:
    case "open":
      return Account_State.open;
    case 2:
    case "closed":
      return Account_State.closed;
    case 3:
    case "overdrawn":
      return Account_State.overdrawn;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Account_State.UNRECOGNIZED;
  }
}

export function account_StateToJSON(object: Account_State): string {
  switch (object) {
    case Account_State.invalid:
      return "invalid";
    case Account_State.open:
      return "open";
    case Account_State.closed:
      return "closed";
    case Account_State.overdrawn:
      return "overdrawn";
    case Account_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseAccount(): Account {
  return {
    $type: "akash.escrow.v1.Account",
    id: undefined,
    owner: "",
    state: 0,
    balance: undefined,
    transferred: undefined,
    settledAt: Long.ZERO,
    depositor: "",
    funds: undefined,
  };
}

export const Account: MessageFns<Account, "akash.escrow.v1.Account"> = {
  $type: "akash.escrow.v1.Account" as const,

  encode(
    message: Account,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== undefined) {
      AccountID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.balance !== undefined) {
      DecCoin.encode(message.balance, writer.uint32(34).fork()).join();
    }
    if (message.transferred !== undefined) {
      DecCoin.encode(message.transferred, writer.uint32(42).fork()).join();
    }
    if (!message.settledAt.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.settledAt.toString());
    }
    if (message.depositor !== "") {
      writer.uint32(58).string(message.depositor);
    }
    if (message.funds !== undefined) {
      DecCoin.encode(message.funds, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = AccountID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.balance = DecCoin.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.transferred = DecCoin.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.settledAt = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.depositor = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.funds = DecCoin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      $type: Account.$type,
      id: isSet(object.id) ? AccountID.fromJSON(object.id) : undefined,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      state: isSet(object.state) ? account_StateFromJSON(object.state) : 0,
      balance: isSet(object.balance)
        ? DecCoin.fromJSON(object.balance)
        : undefined,
      transferred: isSet(object.transferred)
        ? DecCoin.fromJSON(object.transferred)
        : undefined,
      settledAt: isSet(object.settledAt)
        ? Long.fromValue(object.settledAt)
        : Long.ZERO,
      depositor: isSet(object.depositor)
        ? globalThis.String(object.depositor)
        : "",
      funds: isSet(object.funds) ? DecCoin.fromJSON(object.funds) : undefined,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = AccountID.toJSON(message.id);
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.state !== 0) {
      obj.state = account_StateToJSON(message.state);
    }
    if (message.balance !== undefined) {
      obj.balance = DecCoin.toJSON(message.balance);
    }
    if (message.transferred !== undefined) {
      obj.transferred = DecCoin.toJSON(message.transferred);
    }
    if (!message.settledAt.equals(Long.ZERO)) {
      obj.settledAt = (message.settledAt || Long.ZERO).toString();
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if (message.funds !== undefined) {
      obj.funds = DecCoin.toJSON(message.funds);
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id =
      object.id !== undefined && object.id !== null
        ? AccountID.fromPartial(object.id)
        : undefined;
    message.owner = object.owner ?? "";
    message.state = object.state ?? 0;
    message.balance =
      object.balance !== undefined && object.balance !== null
        ? DecCoin.fromPartial(object.balance)
        : undefined;
    message.transferred =
      object.transferred !== undefined && object.transferred !== null
        ? DecCoin.fromPartial(object.transferred)
        : undefined;
    message.settledAt =
      object.settledAt !== undefined && object.settledAt !== null
        ? Long.fromValue(object.settledAt)
        : Long.ZERO;
    message.depositor = object.depositor ?? "";
    message.funds =
      object.funds !== undefined && object.funds !== null
        ? DecCoin.fromPartial(object.funds)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(Account.$type, Account);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
