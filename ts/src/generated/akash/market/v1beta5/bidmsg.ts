// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/market/v1beta5/bidmsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { messageTypeRegistry } from "../../../typeRegistry";
import { BidID } from "../v1/bid";
import { OrderID } from "../v1/order";
import { ResourceOffer } from "./resourcesoffer";

/** MsgCreateBid defines an SDK message for creating Bid */
export interface MsgCreateBid {
  $type: "akash.market.v1beta5.MsgCreateBid";
  orderId: OrderID | undefined;
  provider: string;
  price: DecCoin | undefined;
  deposit: Coin | undefined;
  resourcesOffer: ResourceOffer[];
}

/** MsgCreateBidResponse defines the Msg/CreateBid response type. */
export interface MsgCreateBidResponse {
  $type: "akash.market.v1beta5.MsgCreateBidResponse";
}

/** MsgCloseBid defines an SDK message for closing bid */
export interface MsgCloseBid {
  $type: "akash.market.v1beta5.MsgCloseBid";
  id: BidID | undefined;
}

/** MsgCloseBidResponse defines the Msg/CloseBid response type. */
export interface MsgCloseBidResponse {
  $type: "akash.market.v1beta5.MsgCloseBidResponse";
}

function createBaseMsgCreateBid(): MsgCreateBid {
  return {
    $type: "akash.market.v1beta5.MsgCreateBid",
    orderId: undefined,
    provider: "",
    price: undefined,
    deposit: undefined,
    resourcesOffer: [],
  };
}

export const MsgCreateBid: MessageFns<
  MsgCreateBid,
  "akash.market.v1beta5.MsgCreateBid"
> = {
  $type: "akash.market.v1beta5.MsgCreateBid" as const,

  encode(
    message: MsgCreateBid,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.orderId !== undefined) {
      OrderID.encode(message.orderId, writer.uint32(10).fork()).join();
    }
    if (message.provider !== "") {
      writer.uint32(18).string(message.provider);
    }
    if (message.price !== undefined) {
      DecCoin.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (message.deposit !== undefined) {
      Coin.encode(message.deposit, writer.uint32(34).fork()).join();
    }
    for (const v of message.resourcesOffer) {
      ResourceOffer.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateBid {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orderId = OrderID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.provider = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price = DecCoin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deposit = Coin.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.resourcesOffer.push(
            ResourceOffer.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateBid {
    return {
      $type: MsgCreateBid.$type,
      orderId: isSet(object.orderId)
        ? OrderID.fromJSON(object.orderId)
        : undefined,
      provider: isSet(object.provider)
        ? globalThis.String(object.provider)
        : "",
      price: isSet(object.price) ? DecCoin.fromJSON(object.price) : undefined,
      deposit: isSet(object.deposit)
        ? Coin.fromJSON(object.deposit)
        : undefined,
      resourcesOffer: globalThis.Array.isArray(object?.resourcesOffer)
        ? object.resourcesOffer.map((e: any) => ResourceOffer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgCreateBid): unknown {
    const obj: any = {};
    if (message.orderId !== undefined) {
      obj.orderId = OrderID.toJSON(message.orderId);
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.price !== undefined) {
      obj.price = DecCoin.toJSON(message.price);
    }
    if (message.deposit !== undefined) {
      obj.deposit = Coin.toJSON(message.deposit);
    }
    if (message.resourcesOffer?.length) {
      obj.resourcesOffer = message.resourcesOffer.map((e) =>
        ResourceOffer.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateBid>): MsgCreateBid {
    return MsgCreateBid.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateBid>): MsgCreateBid {
    const message = createBaseMsgCreateBid();
    message.orderId =
      object.orderId !== undefined && object.orderId !== null
        ? OrderID.fromPartial(object.orderId)
        : undefined;
    message.provider = object.provider ?? "";
    message.price =
      object.price !== undefined && object.price !== null
        ? DecCoin.fromPartial(object.price)
        : undefined;
    message.deposit =
      object.deposit !== undefined && object.deposit !== null
        ? Coin.fromPartial(object.deposit)
        : undefined;
    message.resourcesOffer =
      object.resourcesOffer?.map((e) => ResourceOffer.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(MsgCreateBid.$type, MsgCreateBid);

function createBaseMsgCreateBidResponse(): MsgCreateBidResponse {
  return { $type: "akash.market.v1beta5.MsgCreateBidResponse" };
}

export const MsgCreateBidResponse: MessageFns<
  MsgCreateBidResponse,
  "akash.market.v1beta5.MsgCreateBidResponse"
> = {
  $type: "akash.market.v1beta5.MsgCreateBidResponse" as const,

  encode(
    _: MsgCreateBidResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCreateBidResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateBidResponse {
    return { $type: MsgCreateBidResponse.$type };
  },

  toJSON(_: MsgCreateBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreateBidResponse>): MsgCreateBidResponse {
    return MsgCreateBidResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreateBidResponse>): MsgCreateBidResponse {
    const message = createBaseMsgCreateBidResponse();
    return message;
  },
};

messageTypeRegistry.set(MsgCreateBidResponse.$type, MsgCreateBidResponse);

function createBaseMsgCloseBid(): MsgCloseBid {
  return { $type: "akash.market.v1beta5.MsgCloseBid", id: undefined };
}

export const MsgCloseBid: MessageFns<
  MsgCloseBid,
  "akash.market.v1beta5.MsgCloseBid"
> = {
  $type: "akash.market.v1beta5.MsgCloseBid" as const,

  encode(
    message: MsgCloseBid,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseBid {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseBid {
    return {
      $type: MsgCloseBid.$type,
      id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: MsgCloseBid): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCloseBid>): MsgCloseBid {
    return MsgCloseBid.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCloseBid>): MsgCloseBid {
    const message = createBaseMsgCloseBid();
    message.id =
      object.id !== undefined && object.id !== null
        ? BidID.fromPartial(object.id)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MsgCloseBid.$type, MsgCloseBid);

function createBaseMsgCloseBidResponse(): MsgCloseBidResponse {
  return { $type: "akash.market.v1beta5.MsgCloseBidResponse" };
}

export const MsgCloseBidResponse: MessageFns<
  MsgCloseBidResponse,
  "akash.market.v1beta5.MsgCloseBidResponse"
> = {
  $type: "akash.market.v1beta5.MsgCloseBidResponse" as const,

  encode(
    _: MsgCloseBidResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCloseBidResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseBidResponse {
    return { $type: MsgCloseBidResponse.$type };
  },

  toJSON(_: MsgCloseBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCloseBidResponse>): MsgCloseBidResponse {
    return MsgCloseBidResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCloseBidResponse>): MsgCloseBidResponse {
    const message = createBaseMsgCloseBidResponse();
    return message;
  },
};

messageTypeRegistry.set(MsgCloseBidResponse.$type, MsgCloseBidResponse);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
