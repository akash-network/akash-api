syntax = "proto3";
package akash.deployment.v1beta4;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";

import "akash/deployment/v1/deployment.proto";
import "akash/deployment/v1beta4/groupspec.proto";

option go_package = "pkg.akt.dev/go/node/deployment/v1beta4";

// MsgCreateDeployment defines an SDK message for creating deployment.
message MsgCreateDeployment {
  option (gogoproto.equal)      = false;
  option (cosmos.msg.v1.signer) = "id.owner";

  // ID is the unique identifier of the deployment.
  akash.deployment.v1.DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];

  // GroupSpec is a list of group specifications for the deployment.
  // This field is required and must be a list of GroupSpec.
  repeated GroupSpec groups = 2 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "GroupSpecs",
    (gogoproto.jsontag)      = "groups",
    (gogoproto.moretags)     = "yaml:\"groups\""
  ];

  // Hash of the deployment.
  bytes hash = 3 [
    (gogoproto.jsontag)  = "hash",
    (gogoproto.moretags) = "yaml:\"hash\""
  ];

  // Deposit specifies the amount of coins to include in the deployment's first deposit.
  cosmos.base.v1beta1.Coin deposit = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"deposit\""
  ];

  // Depositor is the account address of the user who will deposit funds to the deployment.
  // This value can be different than the owner of the deployment if there is authorized spend grants applied.
  // It is a string representing a valid account address.
  //
  // Example:
  //   "akash1..."
  string depositor = 5 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.jsontag)   = "depositor",
    (gogoproto.moretags)  = "yaml:\"depositor\""
  ];
}

// MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type.
message MsgCreateDeploymentResponse {}

// MsgUpdateDeployment defines an SDK message for updating deployment.
message MsgUpdateDeployment {
  option (gogoproto.equal)      = false;
  option (cosmos.msg.v1.signer) = "id.owner";

  // ID is the unique identifier of the deployment.
  akash.deployment.v1.DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];

  // Hash of the deployment.
  bytes hash = 3 [
    (gogoproto.jsontag)  = "hash",
    (gogoproto.moretags) = "yaml:\"hash\""
  ];
}

// MsgUpdateDeploymentResponse defines the Msg/UpdateDeployment response type.
message MsgUpdateDeploymentResponse {}

// MsgCloseDeployment defines an SDK message for closing deployment
message MsgCloseDeployment {
  option (gogoproto.equal)      = false;
  option (cosmos.msg.v1.signer) = "id.owner";

  // ID is the unique identifier of the deployment.
  akash.deployment.v1.DeploymentID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];
}

// MsgCloseDeploymentResponse defines the Msg/CloseDeployment response type.
message MsgCloseDeploymentResponse {}
