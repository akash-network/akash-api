// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/provider/v1beta4/msg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { messageTypeRegistry } from "../../../typeRegistry";
import { Attribute } from "../../base/attributes/v1/attribute";
import { Info } from "./provider";

/** MsgCreateProvider defines an SDK message for creating a provider */
export interface MsgCreateProvider {
  $type: "akash.provider.v1beta4.MsgCreateProvider";
  owner: string;
  hostUri: string;
  attributes: Attribute[];
  info: Info | undefined;
}

/** MsgCreateProviderResponse defines the Msg/CreateProvider response type. */
export interface MsgCreateProviderResponse {
  $type: "akash.provider.v1beta4.MsgCreateProviderResponse";
}

/** MsgUpdateProvider defines an SDK message for updating a provider */
export interface MsgUpdateProvider {
  $type: "akash.provider.v1beta4.MsgUpdateProvider";
  owner: string;
  hostUri: string;
  attributes: Attribute[];
  info: Info | undefined;
}

/** MsgUpdateProviderResponse defines the Msg/UpdateProvider response type. */
export interface MsgUpdateProviderResponse {
  $type: "akash.provider.v1beta4.MsgUpdateProviderResponse";
}

/** MsgDeleteProvider defines an SDK message for deleting a provider */
export interface MsgDeleteProvider {
  $type: "akash.provider.v1beta4.MsgDeleteProvider";
  owner: string;
}

/** MsgDeleteProviderResponse defines the Msg/DeleteProvider response type. */
export interface MsgDeleteProviderResponse {
  $type: "akash.provider.v1beta4.MsgDeleteProviderResponse";
}

function createBaseMsgCreateProvider(): MsgCreateProvider {
  return {
    $type: "akash.provider.v1beta4.MsgCreateProvider",
    owner: "",
    hostUri: "",
    attributes: [],
    info: undefined,
  };
}

export const MsgCreateProvider: MessageFns<
  MsgCreateProvider,
  "akash.provider.v1beta4.MsgCreateProvider"
> = {
  $type: "akash.provider.v1beta4.MsgCreateProvider" as const,

  encode(
    message: MsgCreateProvider,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.hostUri !== "") {
      writer.uint32(18).string(message.hostUri);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      Info.encode(message.info, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProvider {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = Info.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProvider {
    return {
      $type: MsgCreateProvider.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      info: isSet(object.info) ? Info.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: MsgCreateProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.info !== undefined) {
      obj.info = Info.toJSON(message.info);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateProvider>): MsgCreateProvider {
    return MsgCreateProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateProvider>): MsgCreateProvider {
    const message = createBaseMsgCreateProvider();
    message.owner = object.owner ?? "";
    message.hostUri = object.hostUri ?? "";
    message.attributes =
      object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.info =
      object.info !== undefined && object.info !== null
        ? Info.fromPartial(object.info)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MsgCreateProvider.$type, MsgCreateProvider);

function createBaseMsgCreateProviderResponse(): MsgCreateProviderResponse {
  return { $type: "akash.provider.v1beta4.MsgCreateProviderResponse" };
}

export const MsgCreateProviderResponse: MessageFns<
  MsgCreateProviderResponse,
  "akash.provider.v1beta4.MsgCreateProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgCreateProviderResponse" as const,

  encode(
    _: MsgCreateProviderResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCreateProviderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProviderResponse {
    return { $type: MsgCreateProviderResponse.$type };
  },

  toJSON(_: MsgCreateProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<MsgCreateProviderResponse>,
  ): MsgCreateProviderResponse {
    return MsgCreateProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<MsgCreateProviderResponse>,
  ): MsgCreateProviderResponse {
    const message = createBaseMsgCreateProviderResponse();
    return message;
  },
};

messageTypeRegistry.set(
  MsgCreateProviderResponse.$type,
  MsgCreateProviderResponse,
);

function createBaseMsgUpdateProvider(): MsgUpdateProvider {
  return {
    $type: "akash.provider.v1beta4.MsgUpdateProvider",
    owner: "",
    hostUri: "",
    attributes: [],
    info: undefined,
  };
}

export const MsgUpdateProvider: MessageFns<
  MsgUpdateProvider,
  "akash.provider.v1beta4.MsgUpdateProvider"
> = {
  $type: "akash.provider.v1beta4.MsgUpdateProvider" as const,

  encode(
    message: MsgUpdateProvider,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.hostUri !== "") {
      writer.uint32(18).string(message.hostUri);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      Info.encode(message.info, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProvider {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.info = Info.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateProvider {
    return {
      $type: MsgUpdateProvider.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      info: isSet(object.info) ? Info.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: MsgUpdateProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.info !== undefined) {
      obj.info = Info.toJSON(message.info);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateProvider>): MsgUpdateProvider {
    return MsgUpdateProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateProvider>): MsgUpdateProvider {
    const message = createBaseMsgUpdateProvider();
    message.owner = object.owner ?? "";
    message.hostUri = object.hostUri ?? "";
    message.attributes =
      object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.info =
      object.info !== undefined && object.info !== null
        ? Info.fromPartial(object.info)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MsgUpdateProvider.$type, MsgUpdateProvider);

function createBaseMsgUpdateProviderResponse(): MsgUpdateProviderResponse {
  return { $type: "akash.provider.v1beta4.MsgUpdateProviderResponse" };
}

export const MsgUpdateProviderResponse: MessageFns<
  MsgUpdateProviderResponse,
  "akash.provider.v1beta4.MsgUpdateProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgUpdateProviderResponse" as const,

  encode(
    _: MsgUpdateProviderResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgUpdateProviderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateProviderResponse {
    return { $type: MsgUpdateProviderResponse.$type };
  },

  toJSON(_: MsgUpdateProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<MsgUpdateProviderResponse>,
  ): MsgUpdateProviderResponse {
    return MsgUpdateProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<MsgUpdateProviderResponse>,
  ): MsgUpdateProviderResponse {
    const message = createBaseMsgUpdateProviderResponse();
    return message;
  },
};

messageTypeRegistry.set(
  MsgUpdateProviderResponse.$type,
  MsgUpdateProviderResponse,
);

function createBaseMsgDeleteProvider(): MsgDeleteProvider {
  return { $type: "akash.provider.v1beta4.MsgDeleteProvider", owner: "" };
}

export const MsgDeleteProvider: MessageFns<
  MsgDeleteProvider,
  "akash.provider.v1beta4.MsgDeleteProvider"
> = {
  $type: "akash.provider.v1beta4.MsgDeleteProvider" as const,

  encode(
    message: MsgDeleteProvider,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProvider {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteProvider {
    return {
      $type: MsgDeleteProvider.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: MsgDeleteProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteProvider>): MsgDeleteProvider {
    return MsgDeleteProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeleteProvider>): MsgDeleteProvider {
    const message = createBaseMsgDeleteProvider();
    message.owner = object.owner ?? "";
    return message;
  },
};

messageTypeRegistry.set(MsgDeleteProvider.$type, MsgDeleteProvider);

function createBaseMsgDeleteProviderResponse(): MsgDeleteProviderResponse {
  return { $type: "akash.provider.v1beta4.MsgDeleteProviderResponse" };
}

export const MsgDeleteProviderResponse: MessageFns<
  MsgDeleteProviderResponse,
  "akash.provider.v1beta4.MsgDeleteProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgDeleteProviderResponse" as const,

  encode(
    _: MsgDeleteProviderResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgDeleteProviderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteProviderResponse {
    return { $type: MsgDeleteProviderResponse.$type };
  },

  toJSON(_: MsgDeleteProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<MsgDeleteProviderResponse>,
  ): MsgDeleteProviderResponse {
    return MsgDeleteProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<MsgDeleteProviderResponse>,
  ): MsgDeleteProviderResponse {
    const message = createBaseMsgDeleteProviderResponse();
    return message;
  },
};

messageTypeRegistry.set(
  MsgDeleteProviderResponse.$type,
  MsgDeleteProviderResponse,
);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
