syntax = "proto3";
package akash.provider.lease.v1;

import "akash/manifest/v2beta2/group.proto";
import "akash/market/v1beta4/lease.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/akash-network/akash-api/go/provider/lease/v1";

// LeaseServiceStatus
message LeaseServiceStatus {
  int32 available = 1;
  int32 total = 2;
  repeated string uris = 3;
  int64 observed_generation = 4;
  int32 replicas = 5;
  int32 updated_replicas = 6;
  int32 ready_replicas = 7;
  int32 available_replicas = 8;
}

// LeaseIPStatus
message LeaseIPStatus {
  uint32 port = 1 [
    (gogoproto.jsontag)  = "port",
    (gogoproto.moretags) = "yaml:\"port\""
  ];
  uint32 external_port = 2 [
    (gogoproto.jsontag)  = "external_port",
    (gogoproto.moretags) = "yaml:\"external_port\""
  ];
  string protocol = 3 [
    (gogoproto.jsontag)  = "protocol",
    (gogoproto.moretags) = "yaml:\"protocol\""
  ];
  string ip = 4 [
    (gogoproto.jsontag)  = "ip",
    (gogoproto.moretags) = "yaml:\"ip\""
  ];
}

// ForwarderPortStatus
message ForwarderPortStatus {
  string host = 1 [
    (gogoproto.jsontag)  = "host",
    (gogoproto.moretags) = "yaml:\"host\""
  ];
  uint32 port = 2 [
    (gogoproto.jsontag)  = "port",
    (gogoproto.moretags) = "yaml:\"port\""
  ];
  uint32 external_port = 3 [
    (gogoproto.jsontag)  = "external_port",
    (gogoproto.moretags) = "yaml:\"external_port\""
  ];
  string proto = 4 [
    (gogoproto.jsontag)  = "proto",
    (gogoproto.moretags) = "yaml:\"proto\""
  ];
  string name = 5 [
    (gogoproto.jsontag)  = "name",
    (gogoproto.moretags) = "yaml:\"name\""
  ];
}

// ServiceStatus
message ServiceStatus {
  string name = 1 [
    (gogoproto.jsontag)  = "name",
    (gogoproto.moretags) = "yaml:\"name\""
  ];
  LeaseServiceStatus status = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "status",
    (gogoproto.moretags) = "yaml:\"status\""
  ];
  repeated ForwarderPortStatus ports = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "ports",
    (gogoproto.moretags) = "yaml:\"ports\""
  ];
  repeated LeaseIPStatus ips = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "ip",
    (gogoproto.moretags) = "yaml:\"ip\""
  ];
}

// SendManifestRequest is request type for the SendManifest Providers RPC method
message SendManifestRequest {
  akash.market.v1beta4.LeaseID lease_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "LeaseID",
    (gogoproto.moretags) = "yaml:\"LeaseID\""
  ];

  repeated akash.manifest.v2beta2.Group manifest = 2 [
    (gogoproto.castrepeated) = "github.com/akash-network/akash-api/go/manifest/v2beta2.Manifest",
    (gogoproto.nullable)     = false,
    (gogoproto.customname)   = "Manifest",
    (gogoproto.jsontag)      = "manifest",
    (gogoproto.moretags)     = "yaml:\"manifest\""
  ];
}

// SendManifestResponse is response type for the SendManifest Providers RPC method
message SendManifestResponse {}

// ServiceLogsRequest
message ServiceLogsRequest {
  akash.market.v1beta4.LeaseID lease_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "LeaseID",
    (gogoproto.moretags) = "yaml:\"LeaseID\""
  ];
  repeated string services = 2 [
    (gogoproto.jsontag)  = "services",
    (gogoproto.moretags) = "yaml:\"services\""
  ];
}

// ServiceLogs
message ServiceLogs {
  string name = 1 [
    (gogoproto.jsontag)  = "name",
    (gogoproto.moretags) = "yaml:\"name\""
  ];
  bytes logs = 2 [
    (gogoproto.jsontag)  = "logs",
    (gogoproto.moretags) = "yaml:\"logs\""
  ];
}

// ServiceLogsResponse
message ServiceLogsResponse {
  repeated ServiceLogs services = 1 [
    (gogoproto.jsontag)  = "LeaseID",
    (gogoproto.moretags) = "yaml:\"LeaseID\""
  ];
}

// ShellRequest
message ShellRequest {
  akash.market.v1beta4.LeaseID lease_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "LeaseID",
    (gogoproto.moretags) = "yaml:\"LeaseID\""
  ];
}

// ServiceStatusRequest
message ServiceStatusRequest {
  akash.market.v1beta4.LeaseID lease_id = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "LeaseID",
    (gogoproto.moretags) = "yaml:\"LeaseID\""
  ];

  repeated string services = 2 [
    (gogoproto.jsontag)  = "services",
    (gogoproto.moretags) = "yaml:\"services\""
  ];
}

// ServiceStatusResponse
message ServiceStatusResponse {
  repeated ServiceStatus services = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "services",
    (gogoproto.moretags) = "yaml:\"services\""
  ];
}

// LeaseRPC defines the RPC server for lease control
service LeaseRPC {
  // SendManifest sends manifest to the provider
  rpc SendManifest(SendManifestRequest) returns (SendManifestResponse);

  // ServiceStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc ServiceStatus(ServiceStatusRequest) returns (ServiceStatusResponse);

  // StreamServiceStatus
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc StreamServiceStatus(ServiceStatusRequest) returns (stream ServiceStatusResponse);

  // ServiceLogs
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc ServiceLogs(ServiceLogsRequest) returns (ServiceLogsResponse);

  // StreamServiceLogs
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc StreamServiceLogs(ServiceLogsRequest) returns (stream ServiceLogsResponse);
}
