// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/auth/v1beta1/auth.proto (package cosmos.auth.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_amino_amino } from "../../../amino/amino_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/auth/v1beta1/auth.proto.
 */
export const file_cosmos_auth_v1beta1_auth: GenFile = /*@__PURE__*/
  fileDesc("Ch5jb3Ntb3MvYXV0aC92MWJldGExL2F1dGgucHJvdG8SE2Nvc21vcy5hdXRoLnYxYmV0YTEi9wEKC0Jhc2VBY2NvdW50EikKB2FkZHJlc3MYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJOCgdwdWJfa2V5GAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIn6t4fFHB1YmxpY19rZXksb21pdGVtcHR5ouewKgpwdWJsaWNfa2V5EhYKDmFjY291bnRfbnVtYmVyGAMgASgEEhAKCHNlcXVlbmNlGAQgASgEOkOIoB8A6KAfAMq0LRxjb3Ntb3MuYXV0aC52MWJldGExLkFjY291bnRJiuewKhZjb3Ntb3Mtc2RrL0Jhc2VBY2NvdW50IrkBCg1Nb2R1bGVBY2NvdW50EjwKDGJhc2VfYWNjb3VudBgBIAEoCzIgLmNvc21vcy5hdXRoLnYxYmV0YTEuQmFzZUFjY291bnRCBNDeHwESDAoEbmFtZRgCIAEoCRITCgtwZXJtaXNzaW9ucxgDIAMoCTpHiKAfAMq0LSJjb3Ntb3MuYXV0aC52MWJldGExLk1vZHVsZUFjY291bnRJiuewKhhjb3Ntb3Mtc2RrL01vZHVsZUFjY291bnQiQAoQTW9kdWxlQ3JlZGVudGlhbBITCgttb2R1bGVfbmFtZRgBIAEoCRIXCg9kZXJpdmF0aW9uX2tleXMYAiADKAwi9wEKBlBhcmFtcxIbChNtYXhfbWVtb19jaGFyYWN0ZXJzGAEgASgEEhQKDHR4X3NpZ19saW1pdBgCIAEoBBIdChV0eF9zaXplX2Nvc3RfcGVyX2J5dGUYAyABKAQSOQoXc2lnX3ZlcmlmeV9jb3N0X2VkMjU1MTkYBCABKARCGOLeHxRTaWdWZXJpZnlDb3N0RUQyNTUxORI9ChlzaWdfdmVyaWZ5X2Nvc3Rfc2VjcDI1NmsxGAUgASgEQhri3h8WU2lnVmVyaWZ5Q29zdFNlY3AyNTZrMToh6KAfAYrnsCoYY29zbW9zLXNkay94L2F1dGgvUGFyYW1zQitaKWdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsveC9hdXRoL3R5cGVzYgZwcm90bzM", [file_amino_amino, file_cosmos_proto_cosmos, file_gogoproto_gogo, file_google_protobuf_any]);

/**
 * BaseAccount defines a base account type. It contains all the necessary fields
 * for basic account functionality. Any custom account type should extend this
 * type for additional functionality (e.g. vesting).
 *
 * @generated from message cosmos.auth.v1beta1.BaseAccount
 */
export type BaseAccount = Message<"cosmos.auth.v1beta1.BaseAccount"> & {
  /**
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * @generated from field: google.protobuf.Any pub_key = 2;
   */
  pubKey?: Any;

  /**
   * @generated from field: uint64 account_number = 3;
   */
  accountNumber: bigint;

  /**
   * @generated from field: uint64 sequence = 4;
   */
  sequence: bigint;
};

/**
 * BaseAccount defines a base account type. It contains all the necessary fields
 * for basic account functionality. Any custom account type should extend this
 * type for additional functionality (e.g. vesting).
 *
 * @generated from message cosmos.auth.v1beta1.BaseAccount
 */
export type BaseAccountJson = {
  /**
   * @generated from field: string address = 1;
   */
  address?: string;

  /**
   * @generated from field: google.protobuf.Any pub_key = 2;
   */
  pubKey?: AnyJson;

  /**
   * @generated from field: uint64 account_number = 3;
   */
  accountNumber?: string;

  /**
   * @generated from field: uint64 sequence = 4;
   */
  sequence?: string;
};

/**
 * Describes the message cosmos.auth.v1beta1.BaseAccount.
 * Use `create(BaseAccountSchema)` to create a new message.
 */
export const BaseAccountSchema: GenMessage<BaseAccount, BaseAccountJson> = /*@__PURE__*/
  messageDesc(file_cosmos_auth_v1beta1_auth, 0);

/**
 * ModuleAccount defines an account for modules that holds coins on a pool.
 *
 * @generated from message cosmos.auth.v1beta1.ModuleAccount
 */
export type ModuleAccount = Message<"cosmos.auth.v1beta1.ModuleAccount"> & {
  /**
   * @generated from field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
   */
  baseAccount?: BaseAccount;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated string permissions = 3;
   */
  permissions: string[];
};

/**
 * ModuleAccount defines an account for modules that holds coins on a pool.
 *
 * @generated from message cosmos.auth.v1beta1.ModuleAccount
 */
export type ModuleAccountJson = {
  /**
   * @generated from field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
   */
  baseAccount?: BaseAccountJson;

  /**
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * @generated from field: repeated string permissions = 3;
   */
  permissions?: string[];
};

/**
 * Describes the message cosmos.auth.v1beta1.ModuleAccount.
 * Use `create(ModuleAccountSchema)` to create a new message.
 */
export const ModuleAccountSchema: GenMessage<ModuleAccount, ModuleAccountJson> = /*@__PURE__*/
  messageDesc(file_cosmos_auth_v1beta1_auth, 1);

/**
 * ModuleCredential represents a unclaimable pubkey for base accounts controlled by modules.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.ModuleCredential
 */
export type ModuleCredential = Message<"cosmos.auth.v1beta1.ModuleCredential"> & {
  /**
   * module_name is the name of the module used for address derivation (passed into address.Module).
   *
   * @generated from field: string module_name = 1;
   */
  moduleName: string;

  /**
   * derivation_keys is for deriving a module account address (passed into address.Module)
   * adding more keys creates sub-account addresses (passed into address.Derive)
   *
   * @generated from field: repeated bytes derivation_keys = 2;
   */
  derivationKeys: Uint8Array[];
};

/**
 * ModuleCredential represents a unclaimable pubkey for base accounts controlled by modules.
 *
 * Since: cosmos-sdk 0.47
 *
 * @generated from message cosmos.auth.v1beta1.ModuleCredential
 */
export type ModuleCredentialJson = {
  /**
   * module_name is the name of the module used for address derivation (passed into address.Module).
   *
   * @generated from field: string module_name = 1;
   */
  moduleName?: string;

  /**
   * derivation_keys is for deriving a module account address (passed into address.Module)
   * adding more keys creates sub-account addresses (passed into address.Derive)
   *
   * @generated from field: repeated bytes derivation_keys = 2;
   */
  derivationKeys?: string[];
};

/**
 * Describes the message cosmos.auth.v1beta1.ModuleCredential.
 * Use `create(ModuleCredentialSchema)` to create a new message.
 */
export const ModuleCredentialSchema: GenMessage<ModuleCredential, ModuleCredentialJson> = /*@__PURE__*/
  messageDesc(file_cosmos_auth_v1beta1_auth, 2);

/**
 * Params defines the parameters for the auth module.
 *
 * @generated from message cosmos.auth.v1beta1.Params
 */
export type Params = Message<"cosmos.auth.v1beta1.Params"> & {
  /**
   * @generated from field: uint64 max_memo_characters = 1;
   */
  maxMemoCharacters: bigint;

  /**
   * @generated from field: uint64 tx_sig_limit = 2;
   */
  txSigLimit: bigint;

  /**
   * @generated from field: uint64 tx_size_cost_per_byte = 3;
   */
  txSizeCostPerByte: bigint;

  /**
   * @generated from field: uint64 sig_verify_cost_ed25519 = 4;
   */
  sigVerifyCostEd25519: bigint;

  /**
   * @generated from field: uint64 sig_verify_cost_secp256k1 = 5;
   */
  sigVerifyCostSecp256k1: bigint;
};

/**
 * Params defines the parameters for the auth module.
 *
 * @generated from message cosmos.auth.v1beta1.Params
 */
export type ParamsJson = {
  /**
   * @generated from field: uint64 max_memo_characters = 1;
   */
  maxMemoCharacters?: string;

  /**
   * @generated from field: uint64 tx_sig_limit = 2;
   */
  txSigLimit?: string;

  /**
   * @generated from field: uint64 tx_size_cost_per_byte = 3;
   */
  txSizeCostPerByte?: string;

  /**
   * @generated from field: uint64 sig_verify_cost_ed25519 = 4;
   */
  sigVerifyCostEd25519?: string;

  /**
   * @generated from field: uint64 sig_verify_cost_secp256k1 = 5;
   */
  sigVerifyCostSecp256k1?: string;
};

/**
 * Describes the message cosmos.auth.v1beta1.Params.
 * Use `create(ParamsSchema)` to create a new message.
 */
export const ParamsSchema: GenMessage<Params, ParamsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_auth_v1beta1_auth, 3);

