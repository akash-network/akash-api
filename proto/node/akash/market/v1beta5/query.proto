syntax = "proto3";
package akash.market.v1beta5;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "google/api/annotations.proto";

import "cosmos/base/query/v1beta1/pagination.proto";

import "akash/escrow/v1/account.proto";
import "akash/escrow/v1/fractional_payment.proto";

import "akash/market/v1/order.proto";
import "akash/market/v1/bid.proto";
import "akash/market/v1/lease.proto";
import "akash/market/v1/filters.proto";

import "akash/market/v1beta5/order.proto";
import "akash/market/v1beta5/bid.proto";
import "akash/market/v1beta5/filters.proto";
import "akash/market/v1beta5/params.proto";

option go_package = "pkg.akt.dev/go/node/market/v1beta5";

// Query defines the gRPC querier service for the market package.
service Query {
  // Orders queries orders with filters.
  rpc Orders(QueryOrdersRequest) returns (QueryOrdersResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/orders/list";
  }

  // Order queries order details.
  rpc Order(QueryOrderRequest) returns (QueryOrderResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/orders/info";
  }

  // Bids queries bids with filters.
  rpc Bids(QueryBidsRequest) returns (QueryBidsResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/bids/list";
  }

  // Bid queries bid details.
  rpc Bid(QueryBidRequest) returns (QueryBidResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/bids/info";
  }

  // Leases queries leases with filters.
  rpc Leases(QueryLeasesRequest) returns (QueryLeasesResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/leases/list";
  }

  // Lease queries lease details.
  rpc Lease(QueryLeaseRequest) returns (QueryLeaseResponse) {
    option (google.api.http).get = "/akash/market/v1beta5/leases/info";
  }

  // Params returns the total set of minting parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
      option (google.api.http).get = "/akash/market/v1beta5/params";
  }
}

// QueryOrdersRequest is request type for the Query/Orders RPC method.
message QueryOrdersRequest {
  // Filters holds the fields to filter orders.
  akash.market.v1beta5.OrderFilters filters = 1 [
    (gogoproto.nullable) = false
  ];

  // Pagination is used to paginate request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOrdersResponse is response type for the Query/Orders RPC method
message QueryOrdersResponse {
  // Orders is a list of market orders.
  repeated Order orders = 1 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "Orders"
  ];

  // Pagination contains the information about response pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOrderRequest is request type for the Query/Order RPC method.
message QueryOrderRequest {
  // Id is the unique identifier of the Order.
  akash.market.v1.OrderID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID"
  ];
}

// QueryOrderResponse is response type for the Query/Order RPC method.
message QueryOrderResponse {
  // Order represents a market order.
  Order order = 1 [
    (gogoproto.nullable) = false
  ];
}

// QueryBidsRequest is request type for the Query/Bids RPC method.
message QueryBidsRequest {
  // Filters holds the fields to filter bids.
  akash.market.v1beta5.BidFilters filters = 1 [
    (gogoproto.nullable) = false
  ];

  // Pagination is used to paginate request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryBidsResponse is response type for the Query/Bids RPC method
message QueryBidsResponse {
  // Bids is a list of deployment bids.
  repeated QueryBidResponse bids = 1 [
    (gogoproto.nullable) = false
  ];

  // Pagination contains the information about response pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBidRequest is request type for the Query/Bid RPC method.
message QueryBidRequest {
  // Id is the unique identifier for the Bid.
  akash.market.v1.BidID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID"
  ];
}

// QueryBidResponse is response type for the Query/Bid RPC method.
message QueryBidResponse {
  // Bid represents a deployment bid.
  Bid bid = 1 [
    (gogoproto.nullable) = false
  ];
  // EscrowAccount represents the escrow account created for the Bid.
  akash.escrow.v1.Account escrow_account = 2 [
    (gogoproto.nullable) = false
  ];
}

// QueryLeasesRequest is request type for the Query/Leases RPC method.
message QueryLeasesRequest {
  // Filters holds the fields to filter leases.
  akash.market.v1.LeaseFilters filters = 1 [
    (gogoproto.nullable) = false
  ];

  // Pagination is used to paginate request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryLeasesResponse is response type for the Query/Leases RPC method.
message QueryLeasesResponse {
  // Leases is a list of Lease.
  repeated QueryLeaseResponse leases = 1 [
    (gogoproto.nullable) = false
  ];

  // Pagination contains the information about response pagination.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLeaseRequest is request type for the Query/Lease RPC method.
message QueryLeaseRequest {
  // Id is the unique identifier of the Lease.
  akash.market.v1.LeaseID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID"
  ];
}

// QueryLeaseResponse is response type for the Query/Lease RPC method
message QueryLeaseResponse {
  // Lease holds the lease for a deployment.
  akash.market.v1.Lease lease = 1 [
    (gogoproto.nullable) = false
  ];
  // EscrowPayment holds information about the Lease's fractional payment.
  akash.escrow.v1.FractionalPayment escrow_payment = 2 [
    (gogoproto.nullable) = false
  ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
    // params defines the parameters of the module.
    Params params = 1 [
        (gogoproto.nullable)   = false,
        (amino.dont_omitempty) = true
    ];
}
