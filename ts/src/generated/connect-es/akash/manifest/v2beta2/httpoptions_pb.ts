// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file akash/manifest/v2beta2/httpoptions.proto (package akash.manifest.v2beta2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * ServiceExposeHTTPOptions
 *
 * @generated from message akash.manifest.v2beta2.ServiceExposeHTTPOptions
 */
export class ServiceExposeHTTPOptions extends Message<ServiceExposeHTTPOptions> {
  /**
   * @generated from field: uint32 max_body_size = 1;
   */
  maxBodySize = 0;

  /**
   * @generated from field: uint32 read_timeout = 2;
   */
  readTimeout = 0;

  /**
   * @generated from field: uint32 send_timeout = 3;
   */
  sendTimeout = 0;

  /**
   * @generated from field: uint32 next_tries = 4;
   */
  nextTries = 0;

  /**
   * @generated from field: uint32 next_timeout = 5;
   */
  nextTimeout = 0;

  /**
   * @generated from field: repeated string next_cases = 6;
   */
  nextCases: string[] = [];

  constructor(data?: PartialMessage<ServiceExposeHTTPOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.manifest.v2beta2.ServiceExposeHTTPOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'max_body_size',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 2,
      name: 'read_timeout',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 3,
      name: 'send_timeout',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 4,
      name: 'next_tries',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 5,
      name: 'next_timeout',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    {
      no: 6,
      name: 'next_cases',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceExposeHTTPOptions {
    return new ServiceExposeHTTPOptions().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceExposeHTTPOptions {
    return new ServiceExposeHTTPOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceExposeHTTPOptions {
    return new ServiceExposeHTTPOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a:
      | ServiceExposeHTTPOptions
      | PlainMessage<ServiceExposeHTTPOptions>
      | undefined,
    b:
      | ServiceExposeHTTPOptions
      | PlainMessage<ServiceExposeHTTPOptions>
      | undefined,
  ): boolean {
    return proto3.util.equals(ServiceExposeHTTPOptions, a, b);
  }
}
