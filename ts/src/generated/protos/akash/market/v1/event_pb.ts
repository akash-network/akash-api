// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file akash/market/v1/event.proto (package akash.market.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { DecCoin, DecCoinJson } from "../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../../cosmos/base/v1beta1/coin_pb";
import type { BidID, BidIDJson } from "./bid_pb";
import { file_akash_market_v1_bid } from "./bid_pb";
import type { OrderID, OrderIDJson } from "./order_pb";
import { file_akash_market_v1_order } from "./order_pb";
import type { LeaseID, LeaseIDJson } from "./lease_pb";
import { file_akash_market_v1_lease } from "./lease_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/market/v1/event.proto.
 */
export const file_akash_market_v1_event: GenFile = /*@__PURE__*/
  fileDesc("Chtha2FzaC9tYXJrZXQvdjEvZXZlbnQucHJvdG8SD2FrYXNoLm1hcmtldC52MSJeChFFdmVudE9yZGVyQ3JlYXRlZBJDCgJpZBgBIAEoCzIYLmFrYXNoLm1hcmtldC52MS5PcmRlcklEQh3I3h8A4t4fAklE6t4fAmlk8t4fCXlhbWw6ImlkIjoE6KAfACJdChBFdmVudE9yZGVyQ2xvc2VkEkMKAmlkGAEgASgLMhguYWthc2gubWFya2V0LnYxLk9yZGVySURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiOgTooB8AIqYBCg9FdmVudEJpZENyZWF0ZWQSQQoCaWQYASABKAsyFi5ha2FzaC5tYXJrZXQudjEuQmlkSURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiEkoKBXByaWNlGAMgASgLMhwuY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luQh3I3h8A6t4fBXByaWNl8t4fDHlhbWw6InByaWNlIjoE6KAfACJZCg5FdmVudEJpZENsb3NlZBJBCgJpZBgBIAEoCzIWLmFrYXNoLm1hcmtldC52MS5CaWRJREIdyN4fAOLeHwJJROreHwJpZPLeHwl5YW1sOiJpZCI6BOigHwAiqgEKEUV2ZW50TGVhc2VDcmVhdGVkEkMKAmlkGAEgASgLMhguYWthc2gubWFya2V0LnYxLkxlYXNlSURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiEkoKBXByaWNlGAMgASgLMhwuY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luQh3I3h8A6t4fBXByaWNl8t4fDHlhbWw6InByaWNlIjoE6KAfACJdChBFdmVudExlYXNlQ2xvc2VkEkMKAmlkGAEgASgLMhguYWthc2gubWFya2V0LnYxLkxlYXNlSURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiOgTooB8AQh9aHXBrZy5ha3QuZGV2L2dvL25vZGUvbWFya2V0L3YxYgZwcm90bzM", [file_gogoproto_gogo, file_cosmos_base_v1beta1_coin, file_akash_market_v1_bid, file_akash_market_v1_order, file_akash_market_v1_lease]);

/**
 * EventOrderCreated is triggered when an order is created.
 * It contains all the information required to identify an order.
 *
 * @generated from message akash.market.v1.EventOrderCreated
 */
export type EventOrderCreated = Message<"akash.market.v1.EventOrderCreated"> & {
  /**
   * Id is the unique identifier of the Order.
   *
   * @generated from field: akash.market.v1.OrderID id = 1;
   */
  id?: OrderID;
};

/**
 * EventOrderCreated is triggered when an order is created.
 * It contains all the information required to identify an order.
 *
 * @generated from message akash.market.v1.EventOrderCreated
 */
export type EventOrderCreatedJson = {
  /**
   * Id is the unique identifier of the Order.
   *
   * @generated from field: akash.market.v1.OrderID id = 1;
   */
  id?: OrderIDJson;
};

/**
 * Describes the message akash.market.v1.EventOrderCreated.
 * Use `create(EventOrderCreatedSchema)` to create a new message.
 */
export const EventOrderCreatedSchema: GenMessage<EventOrderCreated, EventOrderCreatedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 0);

/**
 * EventOrderClosed is triggered when an order is closed.
 * It contains all the information required to identify an order.
 *
 * @generated from message akash.market.v1.EventOrderClosed
 */
export type EventOrderClosed = Message<"akash.market.v1.EventOrderClosed"> & {
  /**
   * Id is the unique identifier of the Order.
   *
   * @generated from field: akash.market.v1.OrderID id = 1;
   */
  id?: OrderID;
};

/**
 * EventOrderClosed is triggered when an order is closed.
 * It contains all the information required to identify an order.
 *
 * @generated from message akash.market.v1.EventOrderClosed
 */
export type EventOrderClosedJson = {
  /**
   * Id is the unique identifier of the Order.
   *
   * @generated from field: akash.market.v1.OrderID id = 1;
   */
  id?: OrderIDJson;
};

/**
 * Describes the message akash.market.v1.EventOrderClosed.
 * Use `create(EventOrderClosedSchema)` to create a new message.
 */
export const EventOrderClosedSchema: GenMessage<EventOrderClosed, EventOrderClosedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 1);

/**
 * EventBidCreated is triggered when a bid is created.
 * It contains all the information required to identify a bid.
 *
 * @generated from message akash.market.v1.EventBidCreated
 */
export type EventBidCreated = Message<"akash.market.v1.EventBidCreated"> & {
  /**
   * Id is the unique identifier of the Bid.
   *
   * @generated from field: akash.market.v1.BidID id = 1;
   */
  id?: BidID;

  /**
   * Price stated on the Bid.
   *
   * @generated from field: cosmos.base.v1beta1.DecCoin price = 3;
   */
  price?: DecCoin;
};

/**
 * EventBidCreated is triggered when a bid is created.
 * It contains all the information required to identify a bid.
 *
 * @generated from message akash.market.v1.EventBidCreated
 */
export type EventBidCreatedJson = {
  /**
   * Id is the unique identifier of the Bid.
   *
   * @generated from field: akash.market.v1.BidID id = 1;
   */
  id?: BidIDJson;

  /**
   * Price stated on the Bid.
   *
   * @generated from field: cosmos.base.v1beta1.DecCoin price = 3;
   */
  price?: DecCoinJson;
};

/**
 * Describes the message akash.market.v1.EventBidCreated.
 * Use `create(EventBidCreatedSchema)` to create a new message.
 */
export const EventBidCreatedSchema: GenMessage<EventBidCreated, EventBidCreatedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 2);

/**
 * EventBidClosed is triggered when a bid is closed.
 * It contains all the information required to identify a bid.
 *
 * @generated from message akash.market.v1.EventBidClosed
 */
export type EventBidClosed = Message<"akash.market.v1.EventBidClosed"> & {
  /**
   * Id is the unique identifier of the Bid.
   *
   * @generated from field: akash.market.v1.BidID id = 1;
   */
  id?: BidID;
};

/**
 * EventBidClosed is triggered when a bid is closed.
 * It contains all the information required to identify a bid.
 *
 * @generated from message akash.market.v1.EventBidClosed
 */
export type EventBidClosedJson = {
  /**
   * Id is the unique identifier of the Bid.
   *
   * @generated from field: akash.market.v1.BidID id = 1;
   */
  id?: BidIDJson;
};

/**
 * Describes the message akash.market.v1.EventBidClosed.
 * Use `create(EventBidClosedSchema)` to create a new message.
 */
export const EventBidClosedSchema: GenMessage<EventBidClosed, EventBidClosedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 3);

/**
 * EventLeaseCreated is triggered when a lease is created.
 * It contains all the information required to identify a lease.
 *
 * @generated from message akash.market.v1.EventLeaseCreated
 */
export type EventLeaseCreated = Message<"akash.market.v1.EventLeaseCreated"> & {
  /**
   * Id is the unique identifier of the Lease.
   *
   * @generated from field: akash.market.v1.LeaseID id = 1;
   */
  id?: LeaseID;

  /**
   * Price settled for the lease.
   *
   * @generated from field: cosmos.base.v1beta1.DecCoin price = 3;
   */
  price?: DecCoin;
};

/**
 * EventLeaseCreated is triggered when a lease is created.
 * It contains all the information required to identify a lease.
 *
 * @generated from message akash.market.v1.EventLeaseCreated
 */
export type EventLeaseCreatedJson = {
  /**
   * Id is the unique identifier of the Lease.
   *
   * @generated from field: akash.market.v1.LeaseID id = 1;
   */
  id?: LeaseIDJson;

  /**
   * Price settled for the lease.
   *
   * @generated from field: cosmos.base.v1beta1.DecCoin price = 3;
   */
  price?: DecCoinJson;
};

/**
 * Describes the message akash.market.v1.EventLeaseCreated.
 * Use `create(EventLeaseCreatedSchema)` to create a new message.
 */
export const EventLeaseCreatedSchema: GenMessage<EventLeaseCreated, EventLeaseCreatedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 4);

/**
 * EventLeaseClosed is triggered when a lease is closed.
 * It contains all the information required to identify a lease.
 *
 * @generated from message akash.market.v1.EventLeaseClosed
 */
export type EventLeaseClosed = Message<"akash.market.v1.EventLeaseClosed"> & {
  /**
   * Id is the unique identifier of the Lease.
   *
   * @generated from field: akash.market.v1.LeaseID id = 1;
   */
  id?: LeaseID;
};

/**
 * EventLeaseClosed is triggered when a lease is closed.
 * It contains all the information required to identify a lease.
 *
 * @generated from message akash.market.v1.EventLeaseClosed
 */
export type EventLeaseClosedJson = {
  /**
   * Id is the unique identifier of the Lease.
   *
   * @generated from field: akash.market.v1.LeaseID id = 1;
   */
  id?: LeaseIDJson;
};

/**
 * Describes the message akash.market.v1.EventLeaseClosed.
 * Use `create(EventLeaseClosedSchema)` to create a new message.
 */
export const EventLeaseClosedSchema: GenMessage<EventLeaseClosed, EventLeaseClosedJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1_event, 5);

