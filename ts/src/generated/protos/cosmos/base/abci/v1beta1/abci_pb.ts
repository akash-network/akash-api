// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/base/abci/v1beta1/abci.proto (package cosmos.base.abci.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Event, EventJson } from "../../../../tendermint/abci/types_pb";
import { file_tendermint_abci_types } from "../../../../tendermint/abci/types_pb";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/base/abci/v1beta1/abci.proto.
 */
export const file_cosmos_base_abci_v1beta1_abci: GenFile = /*@__PURE__*/
  fileDesc("CiNjb3Ntb3MvYmFzZS9hYmNpL3YxYmV0YTEvYWJjaS5wcm90bxIYY29zbW9zLmJhc2UuYWJjaS52MWJldGExIuYCCgpUeFJlc3BvbnNlEg4KBmhlaWdodBgBIAEoAxIaCgZ0eGhhc2gYAiABKAlCCuLeHwZUeEhhc2gSEQoJY29kZXNwYWNlGAMgASgJEgwKBGNvZGUYBCABKA0SDAoEZGF0YRgFIAEoCRIPCgdyYXdfbG9nGAYgASgJEk8KBGxvZ3MYByADKAsyKC5jb3Ntb3MuYmFzZS5hYmNpLnYxYmV0YTEuQUJDSU1lc3NhZ2VMb2dCF8jeHwCq3x8PQUJDSU1lc3NhZ2VMb2dzEgwKBGluZm8YCCABKAkSEgoKZ2FzX3dhbnRlZBgJIAEoAxIQCghnYXNfdXNlZBgKIAEoAxIgCgJ0eBgLIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSEQoJdGltZXN0YW1wGAwgASgJEiwKBmV2ZW50cxgNIAMoCzIWLnRlbmRlcm1pbnQuYWJjaS5FdmVudEIEyN4fADoEiKAfACKSAQoOQUJDSU1lc3NhZ2VMb2cSIAoJbXNnX2luZGV4GAEgASgNQg3q3h8JbXNnX2luZGV4EgsKA2xvZxgCIAEoCRJLCgZldmVudHMYAyADKAsyJS5jb3Ntb3MuYmFzZS5hYmNpLnYxYmV0YTEuU3RyaW5nRXZlbnRCFMjeHwCq3x8MU3RyaW5nRXZlbnRzOgSA3CABImAKC1N0cmluZ0V2ZW50EgwKBHR5cGUYASABKAkSPQoKYXR0cmlidXRlcxgCIAMoCzIjLmNvc21vcy5iYXNlLmFiY2kudjFiZXRhMS5BdHRyaWJ1dGVCBMjeHwA6BIDcIAEiJwoJQXR0cmlidXRlEgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCSIvCgdHYXNJbmZvEhIKCmdhc193YW50ZWQYASABKAQSEAoIZ2FzX3VzZWQYAiABKAQiiAEKBlJlc3VsdBIQCgRkYXRhGAEgASgMQgIYARILCgNsb2cYAiABKAkSLAoGZXZlbnRzGAMgAygLMhYudGVuZGVybWludC5hYmNpLkV2ZW50QgTI3h8AEisKDW1zZ19yZXNwb25zZXMYBCADKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgSIoB8AIoUBChJTaW11bGF0aW9uUmVzcG9uc2USPQoIZ2FzX2luZm8YASABKAsyIS5jb3Ntb3MuYmFzZS5hYmNpLnYxYmV0YTEuR2FzSW5mb0IIyN4fANDeHwESMAoGcmVzdWx0GAIgASgLMiAuY29zbW9zLmJhc2UuYWJjaS52MWJldGExLlJlc3VsdCIxCgdNc2dEYXRhEhAKCG1zZ190eXBlGAEgASgJEgwKBGRhdGEYAiABKAw6BhgBgNwgASJzCglUeE1zZ0RhdGESMwoEZGF0YRgBIAMoCzIhLmNvc21vcy5iYXNlLmFiY2kudjFiZXRhMS5Nc2dEYXRhQgIYARIrCg1tc2dfcmVzcG9uc2VzGAIgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueToEgNwgASKmAQoPU2VhcmNoVHhzUmVzdWx0EhMKC3RvdGFsX2NvdW50GAEgASgEEg0KBWNvdW50GAIgASgEEhMKC3BhZ2VfbnVtYmVyGAMgASgEEhIKCnBhZ2VfdG90YWwYBCABKAQSDQoFbGltaXQYBSABKAQSMQoDdHhzGAYgAygLMiQuY29zbW9zLmJhc2UuYWJjaS52MWJldGExLlR4UmVzcG9uc2U6BIDcIAFCKFoiZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlc9jhHgBiBnByb3RvMw", [file_gogoproto_gogo, file_tendermint_abci_types, file_google_protobuf_any]);

/**
 * TxResponse defines a structure containing relevant tx data and metadata. The
 * tags are stringified and the log is JSON decoded.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxResponse
 */
export type TxResponse = Message<"cosmos.base.abci.v1beta1.TxResponse"> & {
  /**
   * The block height
   *
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * The transaction hash.
   *
   * @generated from field: string txhash = 2;
   */
  txhash: string;

  /**
   * Namespace for the Code
   *
   * @generated from field: string codespace = 3;
   */
  codespace: string;

  /**
   * Response code.
   *
   * @generated from field: uint32 code = 4;
   */
  code: number;

  /**
   * Result bytes, if any.
   *
   * @generated from field: string data = 5;
   */
  data: string;

  /**
   * The output of the application's logger (raw string). May be
   * non-deterministic.
   *
   * @generated from field: string raw_log = 6;
   */
  rawLog: string;

  /**
   * The output of the application's logger (typed). May be non-deterministic.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;
   */
  logs: ABCIMessageLog[];

  /**
   * Additional information. May be non-deterministic.
   *
   * @generated from field: string info = 8;
   */
  info: string;

  /**
   * Amount of gas requested for transaction.
   *
   * @generated from field: int64 gas_wanted = 9;
   */
  gasWanted: bigint;

  /**
   * Amount of gas consumed by transaction.
   *
   * @generated from field: int64 gas_used = 10;
   */
  gasUsed: bigint;

  /**
   * The request transaction bytes.
   *
   * @generated from field: google.protobuf.Any tx = 11;
   */
  tx?: Any;

  /**
   * Time of the previous block. For heights > 1, it's the weighted median of
   * the timestamps of the valid votes in the block.LastCommit. For height == 1,
   * it's genesis time.
   *
   * @generated from field: string timestamp = 12;
   */
  timestamp: string;

  /**
   * Events defines all the events emitted by processing a transaction. Note,
   * these events include those emitted by processing all the messages and those
   * emitted from the ante. Whereas Logs contains the events, with
   * additional metadata, emitted only by processing the messages.
   *
   * Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
   *
   * @generated from field: repeated tendermint.abci.Event events = 13;
   */
  events: Event[];
};

/**
 * TxResponse defines a structure containing relevant tx data and metadata. The
 * tags are stringified and the log is JSON decoded.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxResponse
 */
export type TxResponseJson = {
  /**
   * The block height
   *
   * @generated from field: int64 height = 1;
   */
  height?: string;

  /**
   * The transaction hash.
   *
   * @generated from field: string txhash = 2;
   */
  txhash?: string;

  /**
   * Namespace for the Code
   *
   * @generated from field: string codespace = 3;
   */
  codespace?: string;

  /**
   * Response code.
   *
   * @generated from field: uint32 code = 4;
   */
  code?: number;

  /**
   * Result bytes, if any.
   *
   * @generated from field: string data = 5;
   */
  data?: string;

  /**
   * The output of the application's logger (raw string). May be
   * non-deterministic.
   *
   * @generated from field: string raw_log = 6;
   */
  rawLog?: string;

  /**
   * The output of the application's logger (typed). May be non-deterministic.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7;
   */
  logs?: ABCIMessageLogJson[];

  /**
   * Additional information. May be non-deterministic.
   *
   * @generated from field: string info = 8;
   */
  info?: string;

  /**
   * Amount of gas requested for transaction.
   *
   * @generated from field: int64 gas_wanted = 9;
   */
  gasWanted?: string;

  /**
   * Amount of gas consumed by transaction.
   *
   * @generated from field: int64 gas_used = 10;
   */
  gasUsed?: string;

  /**
   * The request transaction bytes.
   *
   * @generated from field: google.protobuf.Any tx = 11;
   */
  tx?: AnyJson;

  /**
   * Time of the previous block. For heights > 1, it's the weighted median of
   * the timestamps of the valid votes in the block.LastCommit. For height == 1,
   * it's genesis time.
   *
   * @generated from field: string timestamp = 12;
   */
  timestamp?: string;

  /**
   * Events defines all the events emitted by processing a transaction. Note,
   * these events include those emitted by processing all the messages and those
   * emitted from the ante. Whereas Logs contains the events, with
   * additional metadata, emitted only by processing the messages.
   *
   * Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
   *
   * @generated from field: repeated tendermint.abci.Event events = 13;
   */
  events?: EventJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.TxResponse.
 * Use `create(TxResponseSchema)` to create a new message.
 */
export const TxResponseSchema: GenMessage<TxResponse, TxResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 0);

/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 *
 * @generated from message cosmos.base.abci.v1beta1.ABCIMessageLog
 */
export type ABCIMessageLog = Message<"cosmos.base.abci.v1beta1.ABCIMessageLog"> & {
  /**
   * @generated from field: uint32 msg_index = 1;
   */
  msgIndex: number;

  /**
   * @generated from field: string log = 2;
   */
  log: string;

  /**
   * Events contains a slice of Event objects that were emitted during some
   * execution.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.StringEvent events = 3;
   */
  events: StringEvent[];
};

/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 *
 * @generated from message cosmos.base.abci.v1beta1.ABCIMessageLog
 */
export type ABCIMessageLogJson = {
  /**
   * @generated from field: uint32 msg_index = 1;
   */
  msgIndex?: number;

  /**
   * @generated from field: string log = 2;
   */
  log?: string;

  /**
   * Events contains a slice of Event objects that were emitted during some
   * execution.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.StringEvent events = 3;
   */
  events?: StringEventJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.ABCIMessageLog.
 * Use `create(ABCIMessageLogSchema)` to create a new message.
 */
export const ABCIMessageLogSchema: GenMessage<ABCIMessageLog, ABCIMessageLogJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 1);

/**
 * StringEvent defines en Event object wrapper where all the attributes
 * contain key/value pairs that are strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.StringEvent
 */
export type StringEvent = Message<"cosmos.base.abci.v1beta1.StringEvent"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: repeated cosmos.base.abci.v1beta1.Attribute attributes = 2;
   */
  attributes: Attribute[];
};

/**
 * StringEvent defines en Event object wrapper where all the attributes
 * contain key/value pairs that are strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.StringEvent
 */
export type StringEventJson = {
  /**
   * @generated from field: string type = 1;
   */
  type?: string;

  /**
   * @generated from field: repeated cosmos.base.abci.v1beta1.Attribute attributes = 2;
   */
  attributes?: AttributeJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.StringEvent.
 * Use `create(StringEventSchema)` to create a new message.
 */
export const StringEventSchema: GenMessage<StringEvent, StringEventJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 2);

/**
 * Attribute defines an attribute wrapper where the key and value are
 * strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.Attribute
 */
export type Attribute = Message<"cosmos.base.abci.v1beta1.Attribute"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Attribute defines an attribute wrapper where the key and value are
 * strings instead of raw bytes.
 *
 * @generated from message cosmos.base.abci.v1beta1.Attribute
 */
export type AttributeJson = {
  /**
   * @generated from field: string key = 1;
   */
  key?: string;

  /**
   * @generated from field: string value = 2;
   */
  value?: string;
};

/**
 * Describes the message cosmos.base.abci.v1beta1.Attribute.
 * Use `create(AttributeSchema)` to create a new message.
 */
export const AttributeSchema: GenMessage<Attribute, AttributeJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 3);

/**
 * GasInfo defines tx execution gas context.
 *
 * @generated from message cosmos.base.abci.v1beta1.GasInfo
 */
export type GasInfo = Message<"cosmos.base.abci.v1beta1.GasInfo"> & {
  /**
   * GasWanted is the maximum units of work we allow this tx to perform.
   *
   * @generated from field: uint64 gas_wanted = 1;
   */
  gasWanted: bigint;

  /**
   * GasUsed is the amount of gas actually consumed.
   *
   * @generated from field: uint64 gas_used = 2;
   */
  gasUsed: bigint;
};

/**
 * GasInfo defines tx execution gas context.
 *
 * @generated from message cosmos.base.abci.v1beta1.GasInfo
 */
export type GasInfoJson = {
  /**
   * GasWanted is the maximum units of work we allow this tx to perform.
   *
   * @generated from field: uint64 gas_wanted = 1;
   */
  gasWanted?: string;

  /**
   * GasUsed is the amount of gas actually consumed.
   *
   * @generated from field: uint64 gas_used = 2;
   */
  gasUsed?: string;
};

/**
 * Describes the message cosmos.base.abci.v1beta1.GasInfo.
 * Use `create(GasInfoSchema)` to create a new message.
 */
export const GasInfoSchema: GenMessage<GasInfo, GasInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 4);

/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 *
 * @generated from message cosmos.base.abci.v1beta1.Result
 */
export type Result = Message<"cosmos.base.abci.v1beta1.Result"> & {
  /**
   * Data is any data returned from message or handler execution. It MUST be
   * length prefixed in order to separate data from multiple message executions.
   * Deprecated. This field is still populated, but prefer msg_response instead
   * because it also contains the Msg response typeURL.
   *
   * @generated from field: bytes data = 1 [deprecated = true];
   * @deprecated
   */
  data: Uint8Array;

  /**
   * Log contains the log information from message or handler execution.
   *
   * @generated from field: string log = 2;
   */
  log: string;

  /**
   * Events contains a slice of Event objects that were emitted during message
   * or handler execution.
   *
   * @generated from field: repeated tendermint.abci.Event events = 3;
   */
  events: Event[];

  /**
   * msg_responses contains the Msg handler responses type packed in Anys.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: repeated google.protobuf.Any msg_responses = 4;
   */
  msgResponses: Any[];
};

/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 *
 * @generated from message cosmos.base.abci.v1beta1.Result
 */
export type ResultJson = {
  /**
   * Data is any data returned from message or handler execution. It MUST be
   * length prefixed in order to separate data from multiple message executions.
   * Deprecated. This field is still populated, but prefer msg_response instead
   * because it also contains the Msg response typeURL.
   *
   * @generated from field: bytes data = 1 [deprecated = true];
   * @deprecated
   */
  data?: string;

  /**
   * Log contains the log information from message or handler execution.
   *
   * @generated from field: string log = 2;
   */
  log?: string;

  /**
   * Events contains a slice of Event objects that were emitted during message
   * or handler execution.
   *
   * @generated from field: repeated tendermint.abci.Event events = 3;
   */
  events?: EventJson[];

  /**
   * msg_responses contains the Msg handler responses type packed in Anys.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: repeated google.protobuf.Any msg_responses = 4;
   */
  msgResponses?: AnyJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.Result.
 * Use `create(ResultSchema)` to create a new message.
 */
export const ResultSchema: GenMessage<Result, ResultJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 5);

/**
 * SimulationResponse defines the response generated when a transaction is
 * successfully simulated.
 *
 * @generated from message cosmos.base.abci.v1beta1.SimulationResponse
 */
export type SimulationResponse = Message<"cosmos.base.abci.v1beta1.SimulationResponse"> & {
  /**
   * @generated from field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
   */
  gasInfo?: GasInfo;

  /**
   * @generated from field: cosmos.base.abci.v1beta1.Result result = 2;
   */
  result?: Result;
};

/**
 * SimulationResponse defines the response generated when a transaction is
 * successfully simulated.
 *
 * @generated from message cosmos.base.abci.v1beta1.SimulationResponse
 */
export type SimulationResponseJson = {
  /**
   * @generated from field: cosmos.base.abci.v1beta1.GasInfo gas_info = 1;
   */
  gasInfo?: GasInfoJson;

  /**
   * @generated from field: cosmos.base.abci.v1beta1.Result result = 2;
   */
  result?: ResultJson;
};

/**
 * Describes the message cosmos.base.abci.v1beta1.SimulationResponse.
 * Use `create(SimulationResponseSchema)` to create a new message.
 */
export const SimulationResponseSchema: GenMessage<SimulationResponse, SimulationResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 6);

/**
 * MsgData defines the data returned in a Result object during message
 * execution.
 *
 * @generated from message cosmos.base.abci.v1beta1.MsgData
 * @deprecated
 */
export type MsgData = Message<"cosmos.base.abci.v1beta1.MsgData"> & {
  /**
   * @generated from field: string msg_type = 1;
   */
  msgType: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * MsgData defines the data returned in a Result object during message
 * execution.
 *
 * @generated from message cosmos.base.abci.v1beta1.MsgData
 * @deprecated
 */
export type MsgDataJson = {
  /**
   * @generated from field: string msg_type = 1;
   */
  msgType?: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data?: string;
};

/**
 * Describes the message cosmos.base.abci.v1beta1.MsgData.
 * Use `create(MsgDataSchema)` to create a new message.
 * @deprecated
 */
export const MsgDataSchema: GenMessage<MsgData, MsgDataJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 7);

/**
 * TxMsgData defines a list of MsgData. A transaction will have a MsgData object
 * for each message.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxMsgData
 */
export type TxMsgData = Message<"cosmos.base.abci.v1beta1.TxMsgData"> & {
  /**
   * data field is deprecated and not populated.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.MsgData data = 1 [deprecated = true];
   * @deprecated
   */
  data: MsgData[];

  /**
   * msg_responses contains the Msg handler responses packed into Anys.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: repeated google.protobuf.Any msg_responses = 2;
   */
  msgResponses: Any[];
};

/**
 * TxMsgData defines a list of MsgData. A transaction will have a MsgData object
 * for each message.
 *
 * @generated from message cosmos.base.abci.v1beta1.TxMsgData
 */
export type TxMsgDataJson = {
  /**
   * data field is deprecated and not populated.
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.MsgData data = 1 [deprecated = true];
   * @deprecated
   */
  data?: MsgDataJson[];

  /**
   * msg_responses contains the Msg handler responses packed into Anys.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: repeated google.protobuf.Any msg_responses = 2;
   */
  msgResponses?: AnyJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.TxMsgData.
 * Use `create(TxMsgDataSchema)` to create a new message.
 */
export const TxMsgDataSchema: GenMessage<TxMsgData, TxMsgDataJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 8);

/**
 * SearchTxsResult defines a structure for querying txs pageable
 *
 * @generated from message cosmos.base.abci.v1beta1.SearchTxsResult
 */
export type SearchTxsResult = Message<"cosmos.base.abci.v1beta1.SearchTxsResult"> & {
  /**
   * Count of all txs
   *
   * @generated from field: uint64 total_count = 1;
   */
  totalCount: bigint;

  /**
   * Count of txs in current page
   *
   * @generated from field: uint64 count = 2;
   */
  count: bigint;

  /**
   * Index of current page, start from 1
   *
   * @generated from field: uint64 page_number = 3;
   */
  pageNumber: bigint;

  /**
   * Count of total pages
   *
   * @generated from field: uint64 page_total = 4;
   */
  pageTotal: bigint;

  /**
   * Max count txs per page
   *
   * @generated from field: uint64 limit = 5;
   */
  limit: bigint;

  /**
   * List of txs in current page
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.TxResponse txs = 6;
   */
  txs: TxResponse[];
};

/**
 * SearchTxsResult defines a structure for querying txs pageable
 *
 * @generated from message cosmos.base.abci.v1beta1.SearchTxsResult
 */
export type SearchTxsResultJson = {
  /**
   * Count of all txs
   *
   * @generated from field: uint64 total_count = 1;
   */
  totalCount?: string;

  /**
   * Count of txs in current page
   *
   * @generated from field: uint64 count = 2;
   */
  count?: string;

  /**
   * Index of current page, start from 1
   *
   * @generated from field: uint64 page_number = 3;
   */
  pageNumber?: string;

  /**
   * Count of total pages
   *
   * @generated from field: uint64 page_total = 4;
   */
  pageTotal?: string;

  /**
   * Max count txs per page
   *
   * @generated from field: uint64 limit = 5;
   */
  limit?: string;

  /**
   * List of txs in current page
   *
   * @generated from field: repeated cosmos.base.abci.v1beta1.TxResponse txs = 6;
   */
  txs?: TxResponseJson[];
};

/**
 * Describes the message cosmos.base.abci.v1beta1.SearchTxsResult.
 * Use `create(SearchTxsResultSchema)` to create a new message.
 */
export const SearchTxsResultSchema: GenMessage<SearchTxsResult, SearchTxsResultJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_abci_v1beta1_abci, 9);

