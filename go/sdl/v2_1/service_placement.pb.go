// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/sdl/v2.1/service_placement.proto

package v2_1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServicePlacement struct {
	Profile string `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile" yaml:"profile"`
	Count   uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count" yaml:"count"`
}

func (m *ServicePlacement) Reset()         { *m = ServicePlacement{} }
func (m *ServicePlacement) String() string { return proto.CompactTextString(m) }
func (*ServicePlacement) ProtoMessage()    {}
func (*ServicePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_68365a288c55f884, []int{0}
}
func (m *ServicePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePlacement.Merge(m, src)
}
func (m *ServicePlacement) XXX_Size() int {
	return m.Size()
}
func (m *ServicePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePlacement proto.InternalMessageInfo

func (m *ServicePlacement) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *ServicePlacement) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*ServicePlacement)(nil), "akash.sdl.v2_1.ServicePlacement")
}

func init() {
	proto.RegisterFile("akash/sdl/v2.1/service_placement.proto", fileDescriptor_68365a288c55f884)
}

var fileDescriptor_68365a288c55f884 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xcc, 0x4e, 0x2c,
	0xce, 0xd0, 0x2f, 0x4e, 0xc9, 0xd1, 0x2f, 0x33, 0xd2, 0x33, 0xd4, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x8d, 0x2f, 0xc8, 0x49, 0x4c, 0x4e, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x03, 0xab, 0xd3, 0x2b, 0x4e, 0xc9, 0xd1, 0x2b, 0x33, 0x8a, 0x37, 0x94,
	0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xe9, 0x83, 0x58, 0x10, 0x55, 0x4a, 0xd3, 0x18, 0xb9,
	0x04, 0x82, 0x21, 0x26, 0x04, 0xc0, 0x0c, 0x10, 0x72, 0xe2, 0x62, 0x2f, 0x28, 0xca, 0x4f, 0xcb,
	0xcc, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x74, 0xd2, 0x78, 0x74, 0x4f, 0x9e, 0x3d, 0x00,
	0x22, 0xf4, 0xea, 0x9e, 0x3c, 0x4c, 0xf6, 0xd3, 0x3d, 0x79, 0xbe, 0xca, 0xc4, 0xdc, 0x1c, 0x2b,
	0x25, 0xa8, 0x80, 0x52, 0x10, 0x4c, 0x4a, 0xc8, 0x82, 0x8b, 0x35, 0x39, 0xbf, 0x34, 0xaf, 0x44,
	0x82, 0x49, 0x81, 0x51, 0x83, 0xd7, 0x49, 0xe9, 0xd1, 0x3d, 0x79, 0x56, 0x67, 0x90, 0xc0, 0xab,
	0x7b, 0xf2, 0x10, 0x99, 0x4f, 0xf7, 0xe4, 0x79, 0x20, 0xba, 0xc1, 0x5c, 0xa5, 0x20, 0x88, 0xb0,
	0x15, 0xcb, 0x8b, 0x05, 0xf2, 0x8c, 0x4e, 0x1e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0xa5, 0x97, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xf6,
	0xa3, 0x6e, 0x5e, 0x6a, 0x49, 0x79, 0x7e, 0x51, 0x36, 0x94, 0x97, 0x58, 0x90, 0xa9, 0x9f, 0x9e,
	0x0f, 0x0d, 0xa0, 0x78, 0xc3, 0x24, 0x36, 0xb0, 0x4f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x8f, 0x22, 0x1a, 0xc1, 0x39, 0x01, 0x00, 0x00,
}

func (this *ServicePlacement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePlacement)
	if !ok {
		that2, ok := that.(ServicePlacement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profile != that1.Profile {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (m *ServicePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintServicePlacement(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Profile) > 0 {
		i -= len(m.Profile)
		copy(dAtA[i:], m.Profile)
		i = encodeVarintServicePlacement(dAtA, i, uint64(len(m.Profile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServicePlacement(dAtA []byte, offset int, v uint64) int {
	offset -= sovServicePlacement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServicePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Profile)
	if l > 0 {
		n += 1 + l + sovServicePlacement(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovServicePlacement(uint64(m.Count))
	}
	return n
}

func sovServicePlacement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServicePlacement(x uint64) (n int) {
	return sovServicePlacement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServicePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicePlacement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicePlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicePlacement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicePlacement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicePlacement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServicePlacement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicePlacement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServicePlacement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServicePlacement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServicePlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServicePlacement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServicePlacement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServicePlacement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServicePlacement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServicePlacement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServicePlacement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServicePlacement = fmt.Errorf("proto: unexpected end of group")
)
