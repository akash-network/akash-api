syntax = "proto3";
package akash.cert.v1;

import "gogoproto/gogo.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

import "akash/cert/v1/cert.proto";

option go_package = "pkg.akt.dev/go/node/cert/v1";

// MsgCreateCertificate defines an SDK message for creating certificate.
message MsgCreateCertificate {
  option (gogoproto.equal)      = false;
  option (cosmos.msg.v1.signer) = "owner";

  // Owner is the account address of the user who owns the certificate.
  // It is a string representing a valid account address.
  //
  // Example:
  //   "akash1..."
  string owner = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.jsontag)   = "owner",
    (gogoproto.moretags)  = "yaml:\"owner\""
  ];

  // Cert holds the bytes representing the certificate.
  bytes cert = 2 [
    (gogoproto.jsontag)  = "cert",
    (gogoproto.moretags) = "yaml:\"cert\""
  ];

  // PubKey holds the public key.
  bytes pubkey = 3 [
    (gogoproto.jsontag)  = "pubkey",
    (gogoproto.moretags) = "yaml:\"pubkey\""
  ];
}

// MsgCreateCertificateResponse defines the Msg/CreateCertificate response type.
message MsgCreateCertificateResponse {}

// MsgRevokeCertificate defines an SDK message for revoking certificate.
message MsgRevokeCertificate {
  option (gogoproto.equal)      = false;
  option (cosmos.msg.v1.signer) = "id.owner";

  // Id corresponds to the certificate ID which includes owner and sequence number.
  akash.cert.v1.ID id = 1 [
    (gogoproto.nullable)   = false,
    (gogoproto.customname) = "ID",
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];
}

// MsgRevokeCertificateResponse defines the Msg/RevokeCertificate response type.
message MsgRevokeCertificateResponse {}
