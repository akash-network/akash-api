// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file akash/market/v1beta5/filters.proto (package akash.market.v1beta5, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/market/v1beta5/filters.proto.
 */
export const file_akash_market_v1beta5_filters: GenFile = /*@__PURE__*/
  fileDesc("CiJha2FzaC9tYXJrZXQvdjFiZXRhNS9maWx0ZXJzLnByb3RvEhRha2FzaC5tYXJrZXQudjFiZXRhNSLWAgoKQmlkRmlsdGVycxJACgVvd25lchgBIAEoCUIx6t4fBW93bmVy8t4fDHlhbWw6Im93bmVyItK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxItCgRkc2VxGAIgASgEQh/i3h8ERFNlcereHwRkc2Vx8t4fC3lhbWw6ImRzZXEiEi0KBGdzZXEYAyABKA1CH+LeHwRHU2Vx6t4fBGdzZXHy3h8LeWFtbDoiZ3NlcSISLQoEb3NlcRgEIAEoDUIf4t4fBE9TZXHq3h8Eb3NlcfLeHwt5YW1sOiJvc2VxIhJJCghwcm92aWRlchgFIAEoCUI36t4fCHByb3ZpZGVy8t4fD3lhbWw6InByb3ZpZGVyItK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIoCgVzdGF0ZRgGIAEoCUIZ6t4fBXN0YXRl8t4fDHlhbWw6InN0YXRlIjoE6KAfACKNAgoMT3JkZXJGaWx0ZXJzEkAKBW93bmVyGAEgASgJQjHq3h8Fb3duZXLy3h8MeWFtbDoib3duZXIi0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEi0KBGRzZXEYAiABKARCH+LeHwREU2Vx6t4fBGRzZXHy3h8LeWFtbDoiZHNlcSISLQoEZ3NlcRgDIAEoDUIf4t4fBEdTZXHq3h8EZ3NlcfLeHwt5YW1sOiJnc2VxIhItCgRvc2VxGAQgASgNQh/i3h8ET1NlcereHwRvc2Vx8t4fC3lhbWw6Im9zZXEiEigKBXN0YXRlGAUgASgJQhnq3h8Fc3RhdGXy3h8MeWFtbDoic3RhdGUiOgTooB8AQiRaInBrZy5ha3QuZGV2L2dvL25vZGUvbWFya2V0L3YxYmV0YTViBnByb3RvMw", [file_gogoproto_gogo, file_cosmos_proto_cosmos]);

/**
 * BidFilters defines flags for bid list filter.
 *
 * @generated from message akash.market.v1beta5.BidFilters
 */
export type BidFilters = Message<"akash.market.v1beta5.BidFilters"> & {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq: bigint;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint32 gseq = 3;
   */
  gseq: number;

  /**
   * Oseq (order sequence) distinguishes multiple orders associated with a single deployment.
   * Oseq is incremented when a lease associated with an existing deployment is closed, and a new order is generated.
   *
   * @generated from field: uint32 oseq = 4;
   */
  oseq: number;

  /**
   * Provider is the account bech32 address of the provider making the bid.
   * It is a string representing a valid account bech32 address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string provider = 5;
   */
  provider: string;

  /**
   * State represents the state of the lease.
   *
   * @generated from field: string state = 6;
   */
  state: string;
};

/**
 * BidFilters defines flags for bid list filter.
 *
 * @generated from message akash.market.v1beta5.BidFilters
 */
export type BidFiltersJson = {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq?: string;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint32 gseq = 3;
   */
  gseq?: number;

  /**
   * Oseq (order sequence) distinguishes multiple orders associated with a single deployment.
   * Oseq is incremented when a lease associated with an existing deployment is closed, and a new order is generated.
   *
   * @generated from field: uint32 oseq = 4;
   */
  oseq?: number;

  /**
   * Provider is the account bech32 address of the provider making the bid.
   * It is a string representing a valid account bech32 address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string provider = 5;
   */
  provider?: string;

  /**
   * State represents the state of the lease.
   *
   * @generated from field: string state = 6;
   */
  state?: string;
};

/**
 * Describes the message akash.market.v1beta5.BidFilters.
 * Use `create(BidFiltersSchema)` to create a new message.
 */
export const BidFiltersSchema: GenMessage<BidFilters, BidFiltersJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1beta5_filters, 0);

/**
 * OrderFilters defines flags for order list filter
 *
 * @generated from message akash.market.v1beta5.OrderFilters
 */
export type OrderFilters = Message<"akash.market.v1beta5.OrderFilters"> & {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq: bigint;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint32 gseq = 3;
   */
  gseq: number;

  /**
   * Oseq (order sequence) distinguishes multiple orders associated with a single deployment.
   * Oseq is incremented when a lease associated with an existing deployment is closed, and a new order is generated.
   *
   * @generated from field: uint32 oseq = 4;
   */
  oseq: number;

  /**
   * State represents the state of the lease.
   *
   * @generated from field: string state = 5;
   */
  state: string;
};

/**
 * OrderFilters defines flags for order list filter
 *
 * @generated from message akash.market.v1beta5.OrderFilters
 */
export type OrderFiltersJson = {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq?: string;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint32 gseq = 3;
   */
  gseq?: number;

  /**
   * Oseq (order sequence) distinguishes multiple orders associated with a single deployment.
   * Oseq is incremented when a lease associated with an existing deployment is closed, and a new order is generated.
   *
   * @generated from field: uint32 oseq = 4;
   */
  oseq?: number;

  /**
   * State represents the state of the lease.
   *
   * @generated from field: string state = 5;
   */
  state?: string;
};

/**
 * Describes the message akash.market.v1beta5.OrderFilters.
 * Use `create(OrderFiltersSchema)` to create a new message.
 */
export const OrderFiltersSchema: GenMessage<OrderFilters, OrderFiltersJson> = /*@__PURE__*/
  messageDesc(file_akash_market_v1beta5_filters, 1);

