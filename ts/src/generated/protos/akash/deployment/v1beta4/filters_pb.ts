// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/deployment/v1beta4/filters.proto (package akash.deployment.v1beta4, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/deployment/v1beta4/filters.proto.
 */
export const file_akash_deployment_v1beta4_filters: GenFile = /*@__PURE__*/
  fileDesc("CiZha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvZmlsdGVycy5wcm90bxIYYWthc2guZGVwbG95bWVudC52MWJldGE0IrQBChFEZXBsb3ltZW50RmlsdGVycxJACgVvd25lchgBIAEoCUIx6t4fBW93bmVy8t4fDHlhbWw6Im93bmVyItK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxItCgRkc2VxGAIgASgEQh/i3h8ERFNlcereHwRkc2Vx8t4fC3lhbWw6ImRzZXEiEigKBXN0YXRlGAMgASgJQhnq3h8Fc3RhdGXy3h8MeWFtbDoic3RhdGUiOgTooB8AIt4BCgxHcm91cEZpbHRlcnMSQAoFb3duZXIYASABKAlCMereHwVvd25lcvLeHwx5YW1sOiJvd25lciLStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSLQoEZHNlcRgCIAEoBEIf4t4fBERTZXHq3h8EZHNlcfLeHwt5YW1sOiJkc2VxIhItCgRnc2VxGAMgASgEQh/i3h8ER1NlcereHwRnc2Vx8t4fC3lhbWw6ImdzZXEiEigKBXN0YXRlGAQgASgJQhnq3h8Fc3RhdGXy3h8MeWFtbDoic3RhdGUiOgTooB8AQihaJnBrZy5ha3QuZGV2L2dvL25vZGUvZGVwbG95bWVudC92MWJldGE0YgZwcm90bzM", [file_gogoproto_gogo, file_cosmos_proto_cosmos]);

/**
 * DeploymentFilters defines filters used to filter deployments.
 *
 * @generated from message akash.deployment.v1beta4.DeploymentFilters
 */
export type DeploymentFilters = Message<"akash.deployment.v1beta4.DeploymentFilters"> & {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq: bigint;

  /**
   * State defines the sate of the deployment. A deployment can be either active or inactive.
   *
   * @generated from field: string state = 3;
   */
  state: string;
};

/**
 * DeploymentFilters defines filters used to filter deployments.
 *
 * @generated from message akash.deployment.v1beta4.DeploymentFilters
 */
export type DeploymentFiltersJson = {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq?: string;

  /**
   * State defines the sate of the deployment. A deployment can be either active or inactive.
   *
   * @generated from field: string state = 3;
   */
  state?: string;
};

/**
 * Describes the message akash.deployment.v1beta4.DeploymentFilters.
 * Use `create(DeploymentFiltersSchema)` to create a new message.
 */
export const DeploymentFiltersSchema: GenMessage<DeploymentFilters, DeploymentFiltersJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_filters, 0);

/**
 * GroupFilters defines filters used to filter groups
 *
 * @generated from message akash.deployment.v1beta4.GroupFilters
 */
export type GroupFilters = Message<"akash.deployment.v1beta4.GroupFilters"> & {
  /**
   * Owner is the account address of the user who owns the group.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq: bigint;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint64 gseq = 3;
   */
  gseq: bigint;

  /**
   * State defines the sate of the deployment. A deployment can be either active or inactive.
   *
   * @generated from field: string state = 4;
   */
  state: string;
};

/**
 * GroupFilters defines filters used to filter groups
 *
 * @generated from message akash.deployment.v1beta4.GroupFilters
 */
export type GroupFiltersJson = {
  /**
   * Owner is the account address of the user who owns the group.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq?: string;

  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   *
   * @generated from field: uint64 gseq = 3;
   */
  gseq?: string;

  /**
   * State defines the sate of the deployment. A deployment can be either active or inactive.
   *
   * @generated from field: string state = 4;
   */
  state?: string;
};

/**
 * Describes the message akash.deployment.v1beta4.GroupFilters.
 * Use `create(GroupFiltersSchema)` to create a new message.
 */
export const GroupFiltersSchema: GenMessage<GroupFilters, GroupFiltersJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_filters, 1);

