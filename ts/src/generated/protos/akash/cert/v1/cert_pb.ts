// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/cert/v1/cert.proto (package akash.cert.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/cert/v1/cert.proto.
 */
export const file_akash_cert_v1_cert: GenFile = /*@__PURE__*/
  fileDesc("Chhha2FzaC9jZXJ0L3YxL2NlcnQucHJvdG8SDWFrYXNoLmNlcnQudjEifQoCSUQSQAoFb3duZXIYASABKAlCMereHwVvd25lcvLeHwx5YW1sOiJvd25lciLStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSKwoGc2VyaWFsGAIgASgJQhvq3h8Gc2VyaWFs8t4fDXlhbWw6InNlcmlhbCI6CJigHwDooB8AIqEBCgtDZXJ0aWZpY2F0ZRI+CgVzdGF0ZRgCIAEoDjIULmFrYXNoLmNlcnQudjEuU3RhdGVCGereHwVzdGF0ZfLeHwx5YW1sOiJzdGF0ZSISJQoEY2VydBgDIAEoDEIX6t4fBGNlcnTy3h8LeWFtbDoiY2VydCISKwoGcHVia2V5GAQgASgMQhvq3h8GcHVia2V58t4fDXlhbWw6InB1YmtleSIqfQoFU3RhdGUSKAoHaW52YWxpZBAAGhuKnSAXQ2VydGlmaWNhdGVTdGF0ZUludmFsaWQSHwoFdmFsaWQQARoUip0gEENlcnRpZmljYXRlVmFsaWQSIwoHcmV2b2tlZBACGhaKnSASQ2VydGlmaWNhdGVSZXZva2VkGgSIox4AQh1aG3BrZy5ha3QuZGV2L2dvL25vZGUvY2VydC92MWIGcHJvdG8z", [file_gogoproto_gogo, file_cosmos_proto_cosmos]);

/**
 * ID stores owner and sequence number.
 *
 * @generated from message akash.cert.v1.ID
 */
export type ID = Message<"akash.cert.v1.ID"> & {
  /**
   * Owner is the account address of the user who owns the certificate.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Serial is a sequence number for the certificate.
   *
   * @generated from field: string serial = 2;
   */
  serial: string;
};

/**
 * ID stores owner and sequence number.
 *
 * @generated from message akash.cert.v1.ID
 */
export type IDJson = {
  /**
   * Owner is the account address of the user who owns the certificate.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Serial is a sequence number for the certificate.
   *
   * @generated from field: string serial = 2;
   */
  serial?: string;
};

/**
 * Describes the message akash.cert.v1.ID.
 * Use `create(IDSchema)` to create a new message.
 */
export const IDSchema: GenMessage<ID, IDJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_cert, 0);

/**
 * Certificate stores state, certificate and it's public key.
 * The certificate is required for several transactions including deployment of a workload to verify the identity of the tenant and secure the deployment.
 *
 * @generated from message akash.cert.v1.Certificate
 */
export type Certificate = Message<"akash.cert.v1.Certificate"> & {
  /**
   * State is the state of the certificate.
   * CertificateValid denotes state for deployment active.
   * CertificateRevoked denotes state for deployment closed.
   *
   * @generated from field: akash.cert.v1.State state = 2;
   */
  state: State;

  /**
   * Cert holds the bytes of the certificate.
   *
   * @generated from field: bytes cert = 3;
   */
  cert: Uint8Array;

  /**
   * PubKey holds the public key of the certificate.
   *
   * @generated from field: bytes pubkey = 4;
   */
  pubkey: Uint8Array;
};

/**
 * Certificate stores state, certificate and it's public key.
 * The certificate is required for several transactions including deployment of a workload to verify the identity of the tenant and secure the deployment.
 *
 * @generated from message akash.cert.v1.Certificate
 */
export type CertificateJson = {
  /**
   * State is the state of the certificate.
   * CertificateValid denotes state for deployment active.
   * CertificateRevoked denotes state for deployment closed.
   *
   * @generated from field: akash.cert.v1.State state = 2;
   */
  state?: StateJson;

  /**
   * Cert holds the bytes of the certificate.
   *
   * @generated from field: bytes cert = 3;
   */
  cert?: string;

  /**
   * PubKey holds the public key of the certificate.
   *
   * @generated from field: bytes pubkey = 4;
   */
  pubkey?: string;
};

/**
 * Describes the message akash.cert.v1.Certificate.
 * Use `create(CertificateSchema)` to create a new message.
 */
export const CertificateSchema: GenMessage<Certificate, CertificateJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_cert, 1);

/**
 * State is an enum which refers to state of the certificate.
 *
 * @generated from enum akash.cert.v1.State
 */
export enum State {
  /**
   * Prefix should start with 0 in enum. So declaring dummy state.
   *
   * @generated from enum value: invalid = 0;
   */
  invalid = 0,

  /**
   * CertificateValid denotes state for deployment active.
   *
   * @generated from enum value: valid = 1;
   */
  valid = 1,

  /**
   * CertificateRevoked denotes state for deployment closed.
   *
   * @generated from enum value: revoked = 2;
   */
  revoked = 2,
}

/**
 * State is an enum which refers to state of the certificate.
 *
 * @generated from enum akash.cert.v1.State
 */
export type StateJson = "invalid" | "valid" | "revoked";

/**
 * Describes the enum akash.cert.v1.State.
 */
export const StateSchema: GenEnum<State, StateJson> = /*@__PURE__*/
  enumDesc(file_akash_cert_v1_cert, 0);

