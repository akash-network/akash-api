// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// TxClient is an autogenerated mock type for the TxClient type
type TxClient struct {
	mock.Mock
}

type TxClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TxClient) EXPECT() *TxClient_Expecter {
	return &TxClient_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: _a0, _a1
func (_m *TxClient) Broadcast(_a0 context.Context, _a1 ...types.Msg) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Msg) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxClient_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type TxClient_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...types.Msg
func (_e *TxClient_Expecter) Broadcast(_a0 interface{}, _a1 ...interface{}) *TxClient_Broadcast_Call {
	return &TxClient_Broadcast_Call{Call: _e.mock.On("Broadcast",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *TxClient_Broadcast_Call) Run(run func(_a0 context.Context, _a1 ...types.Msg)) *TxClient_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Msg, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Msg)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *TxClient_Broadcast_Call) Return(_a0 error) *TxClient_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxClient_Broadcast_Call) RunAndReturn(run func(context.Context, ...types.Msg) error) *TxClient_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTxClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxClient creates a new instance of TxClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxClient(t mockConstructorTestingTNewTxClient) *TxClient {
	mock := &TxClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
