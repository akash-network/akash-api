syntax = "proto3";
package akash.cert.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "go.akashd.io/sdk/node/cert/v1";

// State is an enum which refers to state of deployment
enum State {
  option (gogoproto.goproto_enum_prefix) = false;

  // Prefix should start with 0 in enum. So declaring dummy state
  invalid = 0 [
    (gogoproto.enumvalue_customname) = "CertificateStateInvalid"
  ];
  // CertificateValid denotes state for deployment active
  valid = 1 [
    (gogoproto.enumvalue_customname) = "CertificateValid"
  ];
  // CertificateRevoked denotes state for deployment closed
  revoked = 2 [
    (gogoproto.enumvalue_customname) = "CertificateRevoked"
  ];
}

// ID stores owner and sequence number
message ID {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_stringer) = false;

  string owner = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.jsontag)   = "owner",
    (gogoproto.moretags)  = "yaml:\"owner\""
  ];

  string serial = 2 [
    (gogoproto.jsontag)  = "serial",
    (gogoproto.moretags) = "yaml:\"serial\""
  ];
}

// Certificate stores state, certificate and it's public key
message Certificate {
  State state = 2 [
    (gogoproto.jsontag) = "state",
    (gogoproto.moretags) = "yaml:\"state\""
  ];

  bytes cert = 3 [
    (gogoproto.jsontag) = "cert",
    (gogoproto.moretags) = "yaml:\"cert\""
  ];

  bytes pubkey = 4 [
    (gogoproto.jsontag) = "pubkey",
    (gogoproto.moretags) = "yaml:\"pubkey\""
  ];
}
