// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file akash/provider/lease/v1/service.proto (package akash.provider.lease.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  SendManifestRequest,
  SendManifestResponse,
  ServiceLogsRequest,
  ServiceLogsResponse,
  ServiceStatusRequest,
  ServiceStatusResponse,
} from './service_pb.js';
import { MethodKind } from '@bufbuild/protobuf';

/**
 * LeaseRPC defines the RPC server for lease control
 *
 * @generated from service akash.provider.lease.v1.LeaseRPC
 */
export const LeaseRPC = {
  typeName: 'akash.provider.lease.v1.LeaseRPC',
  methods: {
    /**
     * SendManifest sends manifest to the provider
     *
     * @generated from rpc akash.provider.lease.v1.LeaseRPC.SendManifest
     */
    sendManifest: {
      name: 'SendManifest',
      I: SendManifestRequest,
      O: SendManifestResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ServiceStatus
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from rpc akash.provider.lease.v1.LeaseRPC.ServiceStatus
     */
    serviceStatus: {
      name: 'ServiceStatus',
      I: ServiceStatusRequest,
      O: ServiceStatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StreamServiceStatus
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from rpc akash.provider.lease.v1.LeaseRPC.StreamServiceStatus
     */
    streamServiceStatus: {
      name: 'StreamServiceStatus',
      I: ServiceStatusRequest,
      O: ServiceStatusResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * ServiceLogs
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from rpc akash.provider.lease.v1.LeaseRPC.ServiceLogs
     */
    serviceLogs: {
      name: 'ServiceLogs',
      I: ServiceLogsRequest,
      O: ServiceLogsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StreamServiceLogs
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from rpc akash.provider.lease.v1.LeaseRPC.StreamServiceLogs
     */
    streamServiceLogs: {
      name: 'StreamServiceLogs',
      I: ServiceLogsRequest,
      O: ServiceLogsResponse,
      kind: MethodKind.ServerStreaming,
    },
  },
} as const;
