// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	client "github.com/cosmos/cosmos-sdk/client"
	mock "github.com/stretchr/testify/mock"

	v1beta3 "pkg.akt.dev/go/node/client/v1beta3"
)

// LightClient is an autogenerated mock type for the LightClient type
type LightClient struct {
	mock.Mock
}

type LightClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LightClient) EXPECT() *LightClient_Expecter {
	return &LightClient_Expecter{mock: &_m.Mock}
}

// ClientContext provides a mock function with given fields:
func (_m *LightClient) ClientContext() client.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientContext")
	}

	var r0 client.Context
	if rf, ok := ret.Get(0).(func() client.Context); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.Context)
	}

	return r0
}

// LightClient_ClientContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientContext'
type LightClient_ClientContext_Call struct {
	*mock.Call
}

// ClientContext is a helper method to define mock.On call
func (_e *LightClient_Expecter) ClientContext() *LightClient_ClientContext_Call {
	return &LightClient_ClientContext_Call{Call: _e.mock.On("ClientContext")}
}

func (_c *LightClient_ClientContext_Call) Run(run func()) *LightClient_ClientContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LightClient_ClientContext_Call) Return(_a0 client.Context) *LightClient_ClientContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LightClient_ClientContext_Call) RunAndReturn(run func() client.Context) *LightClient_ClientContext_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function with given fields:
func (_m *LightClient) Node() v1beta3.NodeClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 v1beta3.NodeClient
	if rf, ok := ret.Get(0).(func() v1beta3.NodeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.NodeClient)
		}
	}

	return r0
}

// LightClient_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type LightClient_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *LightClient_Expecter) Node() *LightClient_Node_Call {
	return &LightClient_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *LightClient_Node_Call) Run(run func()) *LightClient_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LightClient_Node_Call) Return(_a0 v1beta3.NodeClient) *LightClient_Node_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LightClient_Node_Call) RunAndReturn(run func() v1beta3.NodeClient) *LightClient_Node_Call {
	_c.Call.Return(run)
	return _c
}

// PrintMessage provides a mock function with given fields: _a0
func (_m *LightClient) PrintMessage(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrintMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LightClient_PrintMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintMessage'
type LightClient_PrintMessage_Call struct {
	*mock.Call
}

// PrintMessage is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *LightClient_Expecter) PrintMessage(_a0 interface{}) *LightClient_PrintMessage_Call {
	return &LightClient_PrintMessage_Call{Call: _e.mock.On("PrintMessage", _a0)}
}

func (_c *LightClient_PrintMessage_Call) Run(run func(_a0 interface{})) *LightClient_PrintMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *LightClient_PrintMessage_Call) Return(_a0 error) *LightClient_PrintMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LightClient_PrintMessage_Call) RunAndReturn(run func(interface{}) error) *LightClient_PrintMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *LightClient) Query() v1beta3.QueryClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 v1beta3.QueryClient
	if rf, ok := ret.Get(0).(func() v1beta3.QueryClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.QueryClient)
		}
	}

	return r0
}

// LightClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type LightClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *LightClient_Expecter) Query() *LightClient_Query_Call {
	return &LightClient_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *LightClient_Query_Call) Run(run func()) *LightClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LightClient_Query_Call) Return(_a0 v1beta3.QueryClient) *LightClient_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LightClient_Query_Call) RunAndReturn(run func() v1beta3.QueryClient) *LightClient_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewLightClient creates a new instance of LightClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLightClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LightClient {
	mock := &LightClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
