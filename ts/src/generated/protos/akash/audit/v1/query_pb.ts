// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file akash/audit/v1/query.proto (package akash.audit.v1, syntax proto3)
/* eslint-disable */

// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../../cosmos/base/query/v1beta1/pagination_pb";
import { file_cosmos_base_query_v1beta1_pagination } from "../../../cosmos/base/query/v1beta1/pagination_pb";
import type { AuditedProvider, AuditedProviderJson } from "./audit_pb";
import { file_akash_audit_v1_audit } from "./audit_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/audit/v1/query.proto.
 */
export const file_akash_audit_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Chpha2FzaC9hdWRpdC92MS9xdWVyeS5wcm90bxIOYWthc2guYXVkaXQudjEiowEKFlF1ZXJ5UHJvdmlkZXJzUmVzcG9uc2USTAoJcHJvdmlkZXJzGAEgAygLMh8uYWthc2guYXVkaXQudjEuQXVkaXRlZFByb3ZpZGVyQhjI3h8Aqt8fEEF1ZGl0ZWRQcm92aWRlcnMSOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlIjYKFFF1ZXJ5UHJvdmlkZXJSZXF1ZXN0Eg8KB2F1ZGl0b3IYASABKAkSDQoFb3duZXIYAiABKAkiYAoiUXVlcnlBbGxQcm92aWRlcnNBdHRyaWJ1dGVzUmVxdWVzdBI6CgpwYWdpbmF0aW9uGAEgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCJrCh5RdWVyeVByb3ZpZGVyQXR0cmlidXRlc1JlcXVlc3QSDQoFb3duZXIYASABKAkSOgoKcGFnaW5hdGlvbhgCIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QiPQobUXVlcnlQcm92aWRlckF1ZGl0b3JSZXF1ZXN0Eg8KB2F1ZGl0b3IYASABKAkSDQoFb3duZXIYAiABKAkibAodUXVlcnlBdWRpdG9yQXR0cmlidXRlc1JlcXVlc3QSDwoHYXVkaXRvchgBIAEoCRI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdDKiBQoFUXVlcnkSowEKFkFsbFByb3ZpZGVyc0F0dHJpYnV0ZXMSMi5ha2FzaC5hdWRpdC52MS5RdWVyeUFsbFByb3ZpZGVyc0F0dHJpYnV0ZXNSZXF1ZXN0GiYuYWthc2guYXVkaXQudjEuUXVlcnlQcm92aWRlcnNSZXNwb25zZSItgtPkkwInEiUvYWthc2gvYXVkaXQvdjEvYXVkaXQvYXR0cmlidXRlcy9saXN0EqMBChJQcm92aWRlckF0dHJpYnV0ZXMSLi5ha2FzaC5hdWRpdC52MS5RdWVyeVByb3ZpZGVyQXR0cmlidXRlc1JlcXVlc3QaJi5ha2FzaC5hdWRpdC52MS5RdWVyeVByb3ZpZGVyc1Jlc3BvbnNlIjWC0+STAi8SLS9ha2FzaC9hdWRpdC92MS9hdWRpdC9hdHRyaWJ1dGVzL3tvd25lcn0vbGlzdBKsAQoZUHJvdmlkZXJBdWRpdG9yQXR0cmlidXRlcxIrLmFrYXNoLmF1ZGl0LnYxLlF1ZXJ5UHJvdmlkZXJBdWRpdG9yUmVxdWVzdBomLmFrYXNoLmF1ZGl0LnYxLlF1ZXJ5UHJvdmlkZXJzUmVzcG9uc2UiOoLT5JMCNBIyL2FrYXNoL2F1ZGl0L3YxL2F1ZGl0L2F0dHJpYnV0ZXMve2F1ZGl0b3J9L3tvd25lcn0SnQEKEUF1ZGl0b3JBdHRyaWJ1dGVzEi0uYWthc2guYXVkaXQudjEuUXVlcnlBdWRpdG9yQXR0cmlidXRlc1JlcXVlc3QaJi5ha2FzaC5hdWRpdC52MS5RdWVyeVByb3ZpZGVyc1Jlc3BvbnNlIjGC0+STAisSKS9ha2FzaC9wcm92aWRlci92MS9hdWRpdG9yL3thdWRpdG9yfS9saXN0Qh5aHHBrZy5ha3QuZGV2L2dvL25vZGUvYXVkaXQvdjFiBnByb3RvMw", [file_gogoproto_gogo, file_google_api_annotations, file_cosmos_base_query_v1beta1_pagination, file_akash_audit_v1_audit]);

/**
 * QueryProvidersResponse is response type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryProvidersResponse
 */
export type QueryProvidersResponse = Message<"akash.audit.v1.QueryProvidersResponse"> & {
  /**
   * Providers contains a list of audited provided account addresses.
   *
   * @generated from field: repeated akash.audit.v1.AuditedProvider providers = 1;
   */
  providers: AuditedProvider[];

  /**
   * Pagination is used to paginate results.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryProvidersResponse is response type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryProvidersResponse
 */
export type QueryProvidersResponseJson = {
  /**
   * Providers contains a list of audited provided account addresses.
   *
   * @generated from field: repeated akash.audit.v1.AuditedProvider providers = 1;
   */
  providers?: AuditedProviderJson[];

  /**
   * Pagination is used to paginate results.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message akash.audit.v1.QueryProvidersResponse.
 * Use `create(QueryProvidersResponseSchema)` to create a new message.
 */
export const QueryProvidersResponseSchema: GenMessage<QueryProvidersResponse, QueryProvidersResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 0);

/**
 * QueryProviderRequest is request type for the Query/Provider RPC method
 *
 * @generated from message akash.audit.v1.QueryProviderRequest
 */
export type QueryProviderRequest = Message<"akash.audit.v1.QueryProviderRequest"> & {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor: string;

  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 2;
   */
  owner: string;
};

/**
 * QueryProviderRequest is request type for the Query/Provider RPC method
 *
 * @generated from message akash.audit.v1.QueryProviderRequest
 */
export type QueryProviderRequestJson = {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor?: string;

  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 2;
   */
  owner?: string;
};

/**
 * Describes the message akash.audit.v1.QueryProviderRequest.
 * Use `create(QueryProviderRequestSchema)` to create a new message.
 */
export const QueryProviderRequestSchema: GenMessage<QueryProviderRequest, QueryProviderRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 1);

/**
 * QueryAllProvidersAttributesRequest is request type for the Query/All Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryAllProvidersAttributesRequest
 */
export type QueryAllProvidersAttributesRequest = Message<"akash.audit.v1.QueryAllProvidersAttributesRequest"> & {
  /**
   * Pagination is used to paginate the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;
};

/**
 * QueryAllProvidersAttributesRequest is request type for the Query/All Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryAllProvidersAttributesRequest
 */
export type QueryAllProvidersAttributesRequestJson = {
  /**
   * Pagination is used to paginate the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message akash.audit.v1.QueryAllProvidersAttributesRequest.
 * Use `create(QueryAllProvidersAttributesRequestSchema)` to create a new message.
 */
export const QueryAllProvidersAttributesRequestSchema: GenMessage<QueryAllProvidersAttributesRequest, QueryAllProvidersAttributesRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 2);

/**
 * QueryProviderAttributesRequest is request type for the Query/Provider RPC method.
 *
 * @generated from message akash.audit.v1.QueryProviderAttributesRequest
 */
export type QueryProviderAttributesRequest = Message<"akash.audit.v1.QueryProviderAttributesRequest"> & {
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryProviderAttributesRequest is request type for the Query/Provider RPC method.
 *
 * @generated from message akash.audit.v1.QueryProviderAttributesRequest
 */
export type QueryProviderAttributesRequestJson = {
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message akash.audit.v1.QueryProviderAttributesRequest.
 * Use `create(QueryProviderAttributesRequestSchema)` to create a new message.
 */
export const QueryProviderAttributesRequestSchema: GenMessage<QueryProviderAttributesRequest, QueryProviderAttributesRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 3);

/**
 * QueryProviderAuditorRequest is request type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryProviderAuditorRequest
 */
export type QueryProviderAuditorRequest = Message<"akash.audit.v1.QueryProviderAuditorRequest"> & {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor: string;

  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 2;
   */
  owner: string;
};

/**
 * QueryProviderAuditorRequest is request type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryProviderAuditorRequest
 */
export type QueryProviderAuditorRequestJson = {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor?: string;

  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 2;
   */
  owner?: string;
};

/**
 * Describes the message akash.audit.v1.QueryProviderAuditorRequest.
 * Use `create(QueryProviderAuditorRequestSchema)` to create a new message.
 */
export const QueryProviderAuditorRequestSchema: GenMessage<QueryProviderAuditorRequest, QueryProviderAuditorRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 4);

/**
 * QueryAuditorAttributesRequest is request type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryAuditorAttributesRequest
 */
export type QueryAuditorAttributesRequest = Message<"akash.audit.v1.QueryAuditorAttributesRequest"> & {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor: string;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryAuditorAttributesRequest is request type for the Query/Providers RPC method.
 *
 * @generated from message akash.audit.v1.QueryAuditorAttributesRequest
 */
export type QueryAuditorAttributesRequestJson = {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string auditor = 1;
   */
  auditor?: string;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message akash.audit.v1.QueryAuditorAttributesRequest.
 * Use `create(QueryAuditorAttributesRequestSchema)` to create a new message.
 */
export const QueryAuditorAttributesRequestSchema: GenMessage<QueryAuditorAttributesRequest, QueryAuditorAttributesRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_audit_v1_query, 5);

/**
 * Query defines the gRPC querier service for the audit package.
 *
 * @generated from service akash.audit.v1.Query
 */
export const Query: GenService<{
  /**
   * AllProvidersAttributes queries all providers.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc akash.audit.v1.Query.AllProvidersAttributes
   */
  allProvidersAttributes: {
    methodKind: "unary";
    input: typeof QueryAllProvidersAttributesRequestSchema;
    output: typeof QueryProvidersResponseSchema;
  },
  /**
   * ProviderAttributes queries all provider signed attributes.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc akash.audit.v1.Query.ProviderAttributes
   */
  providerAttributes: {
    methodKind: "unary";
    input: typeof QueryProviderAttributesRequestSchema;
    output: typeof QueryProvidersResponseSchema;
  },
  /**
   * ProviderAuditorAttributes queries provider signed attributes by specific auditor.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc akash.audit.v1.Query.ProviderAuditorAttributes
   */
  providerAuditorAttributes: {
    methodKind: "unary";
    input: typeof QueryProviderAuditorRequestSchema;
    output: typeof QueryProvidersResponseSchema;
  },
  /**
   * AuditorAttributes queries all providers signed by this auditor.
   * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
   * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
   *
   * @generated from rpc akash.audit.v1.Query.AuditorAttributes
   */
  auditorAttributes: {
    methodKind: "unary";
    input: typeof QueryAuditorAttributesRequestSchema;
    output: typeof QueryProvidersResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_akash_audit_v1_query, 0);

