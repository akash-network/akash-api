// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/base/store/v1beta1/commit_info.proto (package cosmos.base.store.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/base/store/v1beta1/commit_info.proto.
 */
export const file_cosmos_base_store_v1beta1_commit_info: GenFile = /*@__PURE__*/
  fileDesc("Citjb3Ntb3MvYmFzZS9zdG9yZS92MWJldGExL2NvbW1pdF9pbmZvLnByb3RvEhljb3Ntb3MuYmFzZS5zdG9yZS52MWJldGExIpcBCgpDb21taXRJbmZvEg8KB3ZlcnNpb24YASABKAMSPwoLc3RvcmVfaW5mb3MYAiADKAsyJC5jb3Ntb3MuYmFzZS5zdG9yZS52MWJldGExLlN0b3JlSW5mb0IEyN4fABI3Cgl0aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgjI3h8AkN8fASJXCglTdG9yZUluZm8SDAoEbmFtZRgBIAEoCRI8Cgljb21taXRfaWQYAiABKAsyIy5jb3Ntb3MuYmFzZS5zdG9yZS52MWJldGExLkNvbW1pdElEQgTI3h8AIi8KCENvbW1pdElEEg8KB3ZlcnNpb24YASABKAMSDAoEaGFzaBgCIAEoDDoEmKAfAEIqWihnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3N0b3JlL3R5cGVzYgZwcm90bzM", [file_gogoproto_gogo, file_google_protobuf_timestamp]);

/**
 * CommitInfo defines commit information used by the multi-store when committing
 * a version/height.
 *
 * @generated from message cosmos.base.store.v1beta1.CommitInfo
 */
export type CommitInfo = Message<"cosmos.base.store.v1beta1.CommitInfo"> & {
  /**
   * @generated from field: int64 version = 1;
   */
  version: bigint;

  /**
   * @generated from field: repeated cosmos.base.store.v1beta1.StoreInfo store_infos = 2;
   */
  storeInfos: StoreInfo[];

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;
};

/**
 * CommitInfo defines commit information used by the multi-store when committing
 * a version/height.
 *
 * @generated from message cosmos.base.store.v1beta1.CommitInfo
 */
export type CommitInfoJson = {
  /**
   * @generated from field: int64 version = 1;
   */
  version?: string;

  /**
   * @generated from field: repeated cosmos.base.store.v1beta1.StoreInfo store_infos = 2;
   */
  storeInfos?: StoreInfoJson[];

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: TimestampJson;
};

/**
 * Describes the message cosmos.base.store.v1beta1.CommitInfo.
 * Use `create(CommitInfoSchema)` to create a new message.
 */
export const CommitInfoSchema: GenMessage<CommitInfo, CommitInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_store_v1beta1_commit_info, 0);

/**
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 *
 * @generated from message cosmos.base.store.v1beta1.StoreInfo
 */
export type StoreInfo = Message<"cosmos.base.store.v1beta1.StoreInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: cosmos.base.store.v1beta1.CommitID commit_id = 2;
   */
  commitId?: CommitID;
};

/**
 * StoreInfo defines store-specific commit information. It contains a reference
 * between a store name and the commit ID.
 *
 * @generated from message cosmos.base.store.v1beta1.StoreInfo
 */
export type StoreInfoJson = {
  /**
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * @generated from field: cosmos.base.store.v1beta1.CommitID commit_id = 2;
   */
  commitId?: CommitIDJson;
};

/**
 * Describes the message cosmos.base.store.v1beta1.StoreInfo.
 * Use `create(StoreInfoSchema)` to create a new message.
 */
export const StoreInfoSchema: GenMessage<StoreInfo, StoreInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_store_v1beta1_commit_info, 1);

/**
 * CommitID defines the commitment information when a specific store is
 * committed.
 *
 * @generated from message cosmos.base.store.v1beta1.CommitID
 */
export type CommitID = Message<"cosmos.base.store.v1beta1.CommitID"> & {
  /**
   * @generated from field: int64 version = 1;
   */
  version: bigint;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash: Uint8Array;
};

/**
 * CommitID defines the commitment information when a specific store is
 * committed.
 *
 * @generated from message cosmos.base.store.v1beta1.CommitID
 */
export type CommitIDJson = {
  /**
   * @generated from field: int64 version = 1;
   */
  version?: string;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash?: string;
};

/**
 * Describes the message cosmos.base.store.v1beta1.CommitID.
 * Use `create(CommitIDSchema)` to create a new message.
 */
export const CommitIDSchema: GenMessage<CommitID, CommitIDJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_store_v1beta1_commit_info, 2);

