// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inflation/v1beta3/params.proto

package v1beta3

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/deployment package
type Params struct {
	// InflationDecayFactor is the number of years it takes inflation to halve.
	InflationDecayFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=inflation_decay_factor,json=inflationDecayFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation_decay_factor" yaml:"inflation_decay_factor"`
	// InitialInflation is the rate at which inflation starts at genesis.
	// It is a decimal value in the range [0.0, 100.0].
	InitialInflation github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=initial_inflation,json=initialInflation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"initial_inflation" yaml:"initial_inflation"`
	// Variance defines the fraction by which inflation can vary from ideal inflation in a block.
	// It is a decimal value in the range [0.0, 1.0].
	Variance github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=variance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"variance" yaml:"variance"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_07a125eb3d20d95e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "akash.inflation.v1beta3.Params")
}

func init() {
	proto.RegisterFile("akash/inflation/v1beta3/params.proto", fileDescriptor_07a125eb3d20d95e)
}

var fileDescriptor_07a125eb3d20d95e = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0xc7, 0x7b, 0x92, 0x10, 0xec, 0x22, 0x36, 0x44, 0x1b, 0x13, 0x7b, 0xa6, 0x31, 0xea, 0xe2,
	0x5d, 0x0c, 0x9b, 0x9b, 0x84, 0x98, 0xb0, 0x19, 0x06, 0x13, 0x5d, 0xc8, 0xd1, 0x96, 0x72, 0x81,
	0xf6, 0x23, 0xbd, 0x83, 0x84, 0xd1, 0x37, 0xf0, 0x11, 0x7c, 0x0c, 0x1f, 0x81, 0x91, 0xd1, 0x98,
	0x78, 0x31, 0x65, 0x63, 0xe4, 0x09, 0x0c, 0x07, 0xed, 0x00, 0x38, 0x30, 0xb5, 0xb9, 0xef, 0xff,
	0xfd, 0xbe, 0xdf, 0xf0, 0x37, 0x2f, 0x59, 0x8f, 0x89, 0x2e, 0xe5, 0x71, 0xa7, 0xcf, 0x24, 0x87,
	0x98, 0x8e, 0xee, 0xda, 0x81, 0x64, 0x55, 0x3a, 0x60, 0x09, 0x8b, 0x04, 0x19, 0x24, 0x20, 0xc1,
	0x3a, 0xd5, 0x29, 0x92, 0xa7, 0xc8, 0x3a, 0x75, 0x56, 0x09, 0x21, 0x04, 0x9d, 0xa1, 0xcb, 0xbf,
	0x55, 0xdc, 0xfd, 0x29, 0x98, 0xc5, 0x27, 0xbd, 0x6f, 0x7d, 0x22, 0xf3, 0x24, 0x5f, 0x6b, 0xf9,
	0x81, 0xc7, 0xc6, 0xad, 0x0e, 0xf3, 0x24, 0x24, 0x36, 0xba, 0x40, 0x37, 0x87, 0xb5, 0x37, 0x34,
	0x51, 0xd8, 0xf8, 0x56, 0xf8, 0x2a, 0xe4, 0xb2, 0x3b, 0x6c, 0x13, 0x0f, 0x22, 0xea, 0x81, 0x88,
	0x40, 0xac, 0x3f, 0xb7, 0xc2, 0xef, 0x51, 0x39, 0x1e, 0x04, 0x82, 0xd4, 0x03, 0x2f, 0x55, 0xb8,
	0xd2, 0xc8, 0x80, 0xf5, 0x25, 0xef, 0x51, 0xe3, 0xe6, 0x0a, 0xff, 0x73, 0x68, 0xa1, 0xf0, 0xf9,
	0x98, 0x45, 0xfd, 0x7b, 0x77, 0xf7, 0xdc, 0x6d, 0x56, 0xf8, 0x0e, 0xa0, 0xf5, 0x81, 0xcc, 0x63,
	0x1e, 0x73, 0xc9, 0x59, 0xbf, 0x95, 0x07, 0xec, 0x03, 0x6d, 0x2d, 0xf6, 0x96, 0x2e, 0x37, 0x56,
	0xa8, 0xdc, 0x7d, 0xae, 0xf0, 0x36, 0x7e, 0xa1, 0xb0, 0x9d, 0xb9, 0x6e, 0x8c, 0xdc, 0x66, 0x99,
	0x6f, 0x20, 0xac, 0xa1, 0x59, 0x1a, 0xb1, 0x84, 0xb3, 0xd8, 0x0b, 0xec, 0x82, 0x16, 0x7b, 0xd9,
	0x5b, 0xac, 0xf4, 0xbc, 0x26, 0xcc, 0x15, 0xce, 0x69, 0x0b, 0x85, 0x8f, 0x56, 0x1e, 0xd9, 0x8b,
	0xdb, 0xcc, 0x87, 0xb5, 0x87, 0x49, 0xea, 0xa0, 0x69, 0xea, 0xa0, 0xdf, 0xd4, 0x41, 0xef, 0x33,
	0xc7, 0x98, 0xce, 0x1c, 0xe3, 0x6b, 0xe6, 0x18, 0xaf, 0xd7, 0x21, 0x10, 0xdd, 0x15, 0x9f, 0x70,
	0xa0, 0xcb, 0x53, 0x31, 0xf8, 0xc1, 0x76, 0xbd, 0xda, 0x45, 0xdd, 0x94, 0xea, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x7b, 0x81, 0x28, 0xe6, 0x80, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Variance.Size()
		i -= size
		if _, err := m.Variance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.InitialInflation.Size()
		i -= size
		if _, err := m.InitialInflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.InflationDecayFactor.Size()
		i -= size
		if _, err := m.InflationDecayFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InflationDecayFactor.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.InitialInflation.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Variance.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationDecayFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationDecayFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialInflation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialInflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Variance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
