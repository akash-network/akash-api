// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/evidence/v1beta1/query.proto (package cosmos.evidence.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_base_query_v1beta1_pagination } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/evidence/v1beta1/query.proto.
 */
export const file_cosmos_evidence_v1beta1_query: GenFile = /*@__PURE__*/
  fileDesc("CiNjb3Ntb3MvZXZpZGVuY2UvdjFiZXRhMS9xdWVyeS5wcm90bxIXY29zbW9zLmV2aWRlbmNlLnYxYmV0YTEicwoUUXVlcnlFdmlkZW5jZVJlcXVlc3QSTQoNZXZpZGVuY2VfaGFzaBgBIAEoDEI2GAH63h8wZ2l0aHViLmNvbS9jb21ldGJmdC9jb21ldGJmdC9saWJzL2J5dGVzLkhleEJ5dGVzEgwKBGhhc2gYAiABKAkiPwoVUXVlcnlFdmlkZW5jZVJlc3BvbnNlEiYKCGV2aWRlbmNlGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSJVChdRdWVyeUFsbEV2aWRlbmNlUmVxdWVzdBI6CgpwYWdpbmF0aW9uGAEgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCJ/ChhRdWVyeUFsbEV2aWRlbmNlUmVzcG9uc2USJgoIZXZpZGVuY2UYASADKAsyFC5nb29nbGUucHJvdG9idWYuQW55EjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZTLFAgoFUXVlcnkSmwEKCEV2aWRlbmNlEi0uY29zbW9zLmV2aWRlbmNlLnYxYmV0YTEuUXVlcnlFdmlkZW5jZVJlcXVlc3QaLi5jb3Ntb3MuZXZpZGVuY2UudjFiZXRhMS5RdWVyeUV2aWRlbmNlUmVzcG9uc2UiMILT5JMCKhIoL2Nvc21vcy9ldmlkZW5jZS92MWJldGExL2V2aWRlbmNlL3toYXNofRKdAQoLQWxsRXZpZGVuY2USMC5jb3Ntb3MuZXZpZGVuY2UudjFiZXRhMS5RdWVyeUFsbEV2aWRlbmNlUmVxdWVzdBoxLmNvc21vcy5ldmlkZW5jZS52MWJldGExLlF1ZXJ5QWxsRXZpZGVuY2VSZXNwb25zZSIpgtPkkwIjEiEvY29zbW9zL2V2aWRlbmNlL3YxYmV0YTEvZXZpZGVuY2VCL1otZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L2V2aWRlbmNlL3R5cGVzYgZwcm90bzM", [file_cosmos_base_query_v1beta1_pagination, file_gogoproto_gogo, file_google_protobuf_any, file_google_api_annotations]);

/**
 * QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceRequest
 */
export type QueryEvidenceRequest = Message<"cosmos.evidence.v1beta1.QueryEvidenceRequest"> & {
  /**
   * evidence_hash defines the hash of the requested evidence.
   * Deprecated: Use hash, a HEX encoded string, instead.
   *
   * @generated from field: bytes evidence_hash = 1 [deprecated = true];
   * @deprecated
   */
  evidenceHash: Uint8Array;

  /**
   * hash defines the evidence hash of the requested evidence.
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string hash = 2;
   */
  hash: string;
};

/**
 * QueryEvidenceRequest is the request type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceRequest
 */
export type QueryEvidenceRequestJson = {
  /**
   * evidence_hash defines the hash of the requested evidence.
   * Deprecated: Use hash, a HEX encoded string, instead.
   *
   * @generated from field: bytes evidence_hash = 1 [deprecated = true];
   * @deprecated
   */
  evidenceHash?: string;

  /**
   * hash defines the evidence hash of the requested evidence.
   *
   * Since: cosmos-sdk 0.47
   *
   * @generated from field: string hash = 2;
   */
  hash?: string;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryEvidenceRequest.
 * Use `create(QueryEvidenceRequestSchema)` to create a new message.
 */
export const QueryEvidenceRequestSchema: GenMessage<QueryEvidenceRequest, QueryEvidenceRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 0);

/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceResponse
 */
export type QueryEvidenceResponse = Message<"cosmos.evidence.v1beta1.QueryEvidenceResponse"> & {
  /**
   * evidence returns the requested evidence.
   *
   * @generated from field: google.protobuf.Any evidence = 1;
   */
  evidence?: Any;
};

/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryEvidenceResponse
 */
export type QueryEvidenceResponseJson = {
  /**
   * evidence returns the requested evidence.
   *
   * @generated from field: google.protobuf.Any evidence = 1;
   */
  evidence?: AnyJson;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryEvidenceResponse.
 * Use `create(QueryEvidenceResponseSchema)` to create a new message.
 */
export const QueryEvidenceResponseSchema: GenMessage<QueryEvidenceResponse, QueryEvidenceResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 1);

/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceRequest
 */
export type QueryAllEvidenceRequest = Message<"cosmos.evidence.v1beta1.QueryAllEvidenceRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;
};

/**
 * QueryEvidenceRequest is the request type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceRequest
 */
export type QueryAllEvidenceRequestJson = {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryAllEvidenceRequest.
 * Use `create(QueryAllEvidenceRequestSchema)` to create a new message.
 */
export const QueryAllEvidenceRequestSchema: GenMessage<QueryAllEvidenceRequest, QueryAllEvidenceRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 2);

/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceResponse
 */
export type QueryAllEvidenceResponse = Message<"cosmos.evidence.v1beta1.QueryAllEvidenceResponse"> & {
  /**
   * evidence returns all evidences.
   *
   * @generated from field: repeated google.protobuf.Any evidence = 1;
   */
  evidence: Any[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
 * method.
 *
 * @generated from message cosmos.evidence.v1beta1.QueryAllEvidenceResponse
 */
export type QueryAllEvidenceResponseJson = {
  /**
   * evidence returns all evidences.
   *
   * @generated from field: repeated google.protobuf.Any evidence = 1;
   */
  evidence?: AnyJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.evidence.v1beta1.QueryAllEvidenceResponse.
 * Use `create(QueryAllEvidenceResponseSchema)` to create a new message.
 */
export const QueryAllEvidenceResponseSchema: GenMessage<QueryAllEvidenceResponse, QueryAllEvidenceResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_evidence_v1beta1_query, 3);

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service cosmos.evidence.v1beta1.Query
 */
export const Query: GenService<{
  /**
   * Evidence queries evidence based on evidence hash.
   *
   * @generated from rpc cosmos.evidence.v1beta1.Query.Evidence
   */
  evidence: {
    methodKind: "unary";
    input: typeof QueryEvidenceRequestSchema;
    output: typeof QueryEvidenceResponseSchema;
  },
  /**
   * AllEvidence queries all evidence.
   *
   * @generated from rpc cosmos.evidence.v1beta1.Query.AllEvidence
   */
  allEvidence: {
    methodKind: "unary";
    input: typeof QueryAllEvidenceRequestSchema;
    output: typeof QueryAllEvidenceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_evidence_v1beta1_query, 0);

