// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/deployment/v1beta4/query.proto (package akash.deployment.v1beta4, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_amino_amino } from "../../../amino/amino_pb.ts";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.ts";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../../cosmos/base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_base_query_v1beta1_pagination } from "../../../cosmos/base/query/v1beta1/pagination_pb.ts";
import type { DeploymentFilters, DeploymentFiltersJson } from "./filters_pb.ts";
import { file_akash_deployment_v1beta4_filters } from "./filters_pb.ts";
import type { Group, GroupJson } from "./group_pb.ts";
import { file_akash_deployment_v1beta4_group } from "./group_pb.ts";
import type { Params, ParamsJson } from "./params_pb.ts";
import { file_akash_deployment_v1beta4_params } from "./params_pb.ts";
import type { Deployment, DeploymentID, DeploymentIDJson, DeploymentJson } from "../v1/deployment_pb.ts";
import { file_akash_deployment_v1_deployment } from "../v1/deployment_pb.ts";
import type { GroupID, GroupIDJson } from "../v1/group_pb.ts";
import { file_akash_deployment_v1_group } from "../v1/group_pb.ts";
import type { Account, AccountJson } from "../../escrow/v1/account_pb.ts";
import { file_akash_escrow_v1_account } from "../../escrow/v1/account_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/deployment/v1beta4/query.proto.
 */
export const file_akash_deployment_v1beta4_query: GenFile = /*@__PURE__*/
  fileDesc("CiRha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvcXVlcnkucHJvdG8SGGFrYXNoLmRlcGxveW1lbnQudjFiZXRhNCKZAQoXUXVlcnlEZXBsb3ltZW50c1JlcXVlc3QSQgoHZmlsdGVycxgBIAEoCzIrLmFrYXNoLmRlcGxveW1lbnQudjFiZXRhNC5EZXBsb3ltZW50RmlsdGVyc0IEyN4fABI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCK8AQoYUXVlcnlEZXBsb3ltZW50c1Jlc3BvbnNlEmMKC2RlcGxveW1lbnRzGAEgAygLMjEuYWthc2guZGVwbG95bWVudC52MWJldGE0LlF1ZXJ5RGVwbG95bWVudFJlc3BvbnNlQhvI3h8Aqt8fE0RlcGxveW1lbnRSZXNwb25zZXMSOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlIlMKFlF1ZXJ5RGVwbG95bWVudFJlcXVlc3QSOQoCaWQYASABKAsyIS5ha2FzaC5kZXBsb3ltZW50LnYxLkRlcGxveW1lbnRJREIKyN4fAOLeHwJJRCKRAgoXUXVlcnlEZXBsb3ltZW50UmVzcG9uc2USXAoKZGVwbG95bWVudBgBIAEoCzIfLmFrYXNoLmRlcGxveW1lbnQudjEuRGVwbG95bWVudEInyN4fAOreHwpkZXBsb3ltZW508t4fEXlhbWw6ImRlcGxveW1lbnQiEloKBmdyb3VwcxgCIAMoCzIfLmFrYXNoLmRlcGxveW1lbnQudjFiZXRhNC5Hcm91cEIpyN4fAOreHwZncm91cHPy3h8NeWFtbDoiZ3JvdXBzIqrfHwZHcm91cHMSNgoOZXNjcm93X2FjY291bnQYAyABKAsyGC5ha2FzaC5lc2Nyb3cudjEuQWNjb3VudEIEyN4fADoE6KAfACJJChFRdWVyeUdyb3VwUmVxdWVzdBI0CgJpZBgBIAEoCzIcLmFrYXNoLmRlcGxveW1lbnQudjEuR3JvdXBJREIKyN4fAOLeHwJJRCJKChJRdWVyeUdyb3VwUmVzcG9uc2USNAoFZ3JvdXAYASABKAsyHy5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuR3JvdXBCBMjeHwAiFAoSUXVlcnlQYXJhbXNSZXF1ZXN0IlIKE1F1ZXJ5UGFyYW1zUmVzcG9uc2USOwoGcGFyYW1zGAEgASgLMiAuYWthc2guZGVwbG95bWVudC52MWJldGE0LlBhcmFtc0IJyN4fAKjnsCoBMoAFCgVRdWVyeRKoAQoLRGVwbG95bWVudHMSMS5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuUXVlcnlEZXBsb3ltZW50c1JlcXVlc3QaMi5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuUXVlcnlEZXBsb3ltZW50c1Jlc3BvbnNlIjKC0+STAiwSKi9ha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvZGVwbG95bWVudHMvbGlzdBKlAQoKRGVwbG95bWVudBIwLmFrYXNoLmRlcGxveW1lbnQudjFiZXRhNC5RdWVyeURlcGxveW1lbnRSZXF1ZXN0GjEuYWthc2guZGVwbG95bWVudC52MWJldGE0LlF1ZXJ5RGVwbG95bWVudFJlc3BvbnNlIjKC0+STAiwSKi9ha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvZGVwbG95bWVudHMvaW5mbxKRAQoFR3JvdXASKy5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuUXVlcnlHcm91cFJlcXVlc3QaLC5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuUXVlcnlHcm91cFJlc3BvbnNlIi2C0+STAicSJS9ha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvZ3JvdXBzL2luZm8SjwEKBlBhcmFtcxIsLmFrYXNoLmRlcGxveW1lbnQudjFiZXRhNC5RdWVyeVBhcmFtc1JlcXVlc3QaLS5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuUXVlcnlQYXJhbXNSZXNwb25zZSIogtPkkwIiEiAvYWthc2gvZGVwbG95bWVudC92MWJldGE0L3BhcmFtc0IoWiZwa2cuYWt0LmRldi9nby9ub2RlL2RlcGxveW1lbnQvdjFiZXRhNGIGcHJvdG8z", [file_gogoproto_gogo, file_amino_amino, file_google_api_annotations, file_cosmos_base_query_v1beta1_pagination, file_akash_deployment_v1beta4_filters, file_akash_deployment_v1beta4_group, file_akash_deployment_v1beta4_params, file_akash_deployment_v1_deployment, file_akash_deployment_v1_group, file_akash_escrow_v1_account]);

/**
 * QueryDeploymentsRequest is request type for the Query/Deployments RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentsRequest
 */
export type QueryDeploymentsRequest = Message<"akash.deployment.v1beta4.QueryDeploymentsRequest"> & {
  /**
   * Filters holds the deployment fields to filter the request.
   *
   * @generated from field: akash.deployment.v1beta4.DeploymentFilters filters = 1;
   */
  filters?: DeploymentFilters;

  /**
   * Pagination is used to paginate the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryDeploymentsRequest is request type for the Query/Deployments RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentsRequest
 */
export type QueryDeploymentsRequestJson = {
  /**
   * Filters holds the deployment fields to filter the request.
   *
   * @generated from field: akash.deployment.v1beta4.DeploymentFilters filters = 1;
   */
  filters?: DeploymentFiltersJson;

  /**
   * Pagination is used to paginate the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryDeploymentsRequest.
 * Use `create(QueryDeploymentsRequestSchema)` to create a new message.
 */
export const QueryDeploymentsRequestSchema: GenMessage<QueryDeploymentsRequest, QueryDeploymentsRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 0);

/**
 * QueryDeploymentsResponse is response type for the Query/Deployments RPC method
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentsResponse
 */
export type QueryDeploymentsResponse = Message<"akash.deployment.v1beta4.QueryDeploymentsResponse"> & {
  /**
   * Deployments is a list of Deployments.
   *
   * @generated from field: repeated akash.deployment.v1beta4.QueryDeploymentResponse deployments = 1;
   */
  deployments: QueryDeploymentResponse[];

  /**
   * Pagination contains the information about response pagination.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryDeploymentsResponse is response type for the Query/Deployments RPC method
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentsResponse
 */
export type QueryDeploymentsResponseJson = {
  /**
   * Deployments is a list of Deployments.
   *
   * @generated from field: repeated akash.deployment.v1beta4.QueryDeploymentResponse deployments = 1;
   */
  deployments?: QueryDeploymentResponseJson[];

  /**
   * Pagination contains the information about response pagination.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryDeploymentsResponse.
 * Use `create(QueryDeploymentsResponseSchema)` to create a new message.
 */
export const QueryDeploymentsResponseSchema: GenMessage<QueryDeploymentsResponse, QueryDeploymentsResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 1);

/**
 * QueryDeploymentRequest is request type for the Query/Deployment RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentRequest
 */
export type QueryDeploymentRequest = Message<"akash.deployment.v1beta4.QueryDeploymentRequest"> & {
  /**
   * Id is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentID;
};

/**
 * QueryDeploymentRequest is request type for the Query/Deployment RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentRequest
 */
export type QueryDeploymentRequestJson = {
  /**
   * Id is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentIDJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryDeploymentRequest.
 * Use `create(QueryDeploymentRequestSchema)` to create a new message.
 */
export const QueryDeploymentRequestSchema: GenMessage<QueryDeploymentRequest, QueryDeploymentRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 2);

/**
 * QueryDeploymentResponse is response type for the Query/Deployment RPC method
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentResponse
 */
export type QueryDeploymentResponse = Message<"akash.deployment.v1beta4.QueryDeploymentResponse"> & {
  /**
   * Deployment represents a deployment on the network.
   *
   * @generated from field: akash.deployment.v1.Deployment deployment = 1;
   */
  deployment?: Deployment;

  /**
   * Groups is a list of deployment groups.
   *
   * @generated from field: repeated akash.deployment.v1beta4.Group groups = 2;
   */
  groups: Group[];

  /**
   * EscrowAccount represents an escrow mechanism where funds are held.
   * This ensures that obligations of both tenants and providers involved in the
   * transaction are met without direct access to each other's accounts.
   *
   * @generated from field: akash.escrow.v1.Account escrow_account = 3;
   */
  escrowAccount?: Account;
};

/**
 * QueryDeploymentResponse is response type for the Query/Deployment RPC method
 *
 * @generated from message akash.deployment.v1beta4.QueryDeploymentResponse
 */
export type QueryDeploymentResponseJson = {
  /**
   * Deployment represents a deployment on the network.
   *
   * @generated from field: akash.deployment.v1.Deployment deployment = 1;
   */
  deployment?: DeploymentJson;

  /**
   * Groups is a list of deployment groups.
   *
   * @generated from field: repeated akash.deployment.v1beta4.Group groups = 2;
   */
  groups?: GroupJson[];

  /**
   * EscrowAccount represents an escrow mechanism where funds are held.
   * This ensures that obligations of both tenants and providers involved in the
   * transaction are met without direct access to each other's accounts.
   *
   * @generated from field: akash.escrow.v1.Account escrow_account = 3;
   */
  escrowAccount?: AccountJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryDeploymentResponse.
 * Use `create(QueryDeploymentResponseSchema)` to create a new message.
 */
export const QueryDeploymentResponseSchema: GenMessage<QueryDeploymentResponse, QueryDeploymentResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 3);

/**
 * QueryGroupRequest is request type for the Query/Group RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryGroupRequest
 */
export type QueryGroupRequest = Message<"akash.deployment.v1beta4.QueryGroupRequest"> & {
  /**
   * Id is the unique identifer of the Group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupID;
};

/**
 * QueryGroupRequest is request type for the Query/Group RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryGroupRequest
 */
export type QueryGroupRequestJson = {
  /**
   * Id is the unique identifer of the Group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupIDJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryGroupRequest.
 * Use `create(QueryGroupRequestSchema)` to create a new message.
 */
export const QueryGroupRequestSchema: GenMessage<QueryGroupRequest, QueryGroupRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 4);

/**
 * QueryGroupResponse is response type for the Query/Group RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryGroupResponse
 */
export type QueryGroupResponse = Message<"akash.deployment.v1beta4.QueryGroupResponse"> & {
  /**
   * Group holds a deployment Group.
   *
   * @generated from field: akash.deployment.v1beta4.Group group = 1;
   */
  group?: Group;
};

/**
 * QueryGroupResponse is response type for the Query/Group RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryGroupResponse
 */
export type QueryGroupResponseJson = {
  /**
   * Group holds a deployment Group.
   *
   * @generated from field: akash.deployment.v1beta4.Group group = 1;
   */
  group?: GroupJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryGroupResponse.
 * Use `create(QueryGroupResponseSchema)` to create a new message.
 */
export const QueryGroupResponseSchema: GenMessage<QueryGroupResponse, QueryGroupResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 5);

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryParamsRequest
 */
export type QueryParamsRequest = Message<"akash.deployment.v1beta4.QueryParamsRequest"> & {
};

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryParamsRequest
 */
export type QueryParamsRequestJson = {
};

/**
 * Describes the message akash.deployment.v1beta4.QueryParamsRequest.
 * Use `create(QueryParamsRequestSchema)` to create a new message.
 */
export const QueryParamsRequestSchema: GenMessage<QueryParamsRequest, QueryParamsRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 6);

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryParamsResponse
 */
export type QueryParamsResponse = Message<"akash.deployment.v1beta4.QueryParamsResponse"> & {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: akash.deployment.v1beta4.Params params = 1;
   */
  params?: Params;
};

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message akash.deployment.v1beta4.QueryParamsResponse
 */
export type QueryParamsResponseJson = {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: akash.deployment.v1beta4.Params params = 1;
   */
  params?: ParamsJson;
};

/**
 * Describes the message akash.deployment.v1beta4.QueryParamsResponse.
 * Use `create(QueryParamsResponseSchema)` to create a new message.
 */
export const QueryParamsResponseSchema: GenMessage<QueryParamsResponse, QueryParamsResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_query, 7);

/**
 * Query defines the gRPC querier service for the Deployments package.
 *
 * @generated from service akash.deployment.v1beta4.Query
 */
export const Query: GenService<{
  /**
   * Deployments queries deployments.
   *
   * @generated from rpc akash.deployment.v1beta4.Query.Deployments
   */
  deployments: {
    methodKind: "unary";
    input: typeof QueryDeploymentsRequestSchema;
    output: typeof QueryDeploymentsResponseSchema;
  },
  /**
   * Deployment queries deployment details.
   *
   * @generated from rpc akash.deployment.v1beta4.Query.Deployment
   */
  deployment: {
    methodKind: "unary";
    input: typeof QueryDeploymentRequestSchema;
    output: typeof QueryDeploymentResponseSchema;
  },
  /**
   * Group queries group details.
   *
   * @generated from rpc akash.deployment.v1beta4.Query.Group
   */
  group: {
    methodKind: "unary";
    input: typeof QueryGroupRequestSchema;
    output: typeof QueryGroupResponseSchema;
  },
  /**
   * Params returns the total set of minting parameters.
   *
   * @generated from rpc akash.deployment.v1beta4.Query.Params
   */
  params: {
    methodKind: "unary";
    input: typeof QueryParamsRequestSchema;
    output: typeof QueryParamsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_akash_deployment_v1beta4_query, 0);

