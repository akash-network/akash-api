// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/provider/operator/v1/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Operator struct {
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_73bbded1b1ef080b, []int{0}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return m.Size()
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Operator)(nil), "akash.provider.operator.v1.Operator")
}

func init() {
	proto.RegisterFile("akash/provider/operator/v1/service.proto", fileDescriptor_73bbded1b1ef080b)
}

var fileDescriptor_73bbded1b1ef080b = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xcc, 0x4e, 0x2c,
	0xce, 0xd0, 0x2f, 0x28, 0xca, 0x2f, 0xcb, 0x4c, 0x49, 0x2d, 0xd2, 0xcf, 0x2f, 0x48, 0x2d, 0x4a,
	0x2c, 0xc9, 0x2f, 0xd2, 0x2f, 0x33, 0xd4, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x02, 0xab, 0xd4, 0x83, 0xa9, 0xd4, 0x83, 0xa9, 0xd4, 0x2b,
	0x33, 0x94, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x2b, 0xd3, 0x07, 0xb1, 0x20, 0x3a, 0xa4, 0xa4,
	0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xbc, 0xa4, 0xd2, 0x34, 0xfd, 0xd4, 0xdc, 0x82,
	0x92, 0x4a, 0x88, 0xa4, 0x12, 0x17, 0x17, 0x87, 0x3f, 0xd4, 0x04, 0xa3, 0xc5, 0x8c, 0x5c, 0xdc,
	0x30, 0x4e, 0x50, 0x80, 0xb3, 0x90, 0x2b, 0x17, 0xab, 0x73, 0x46, 0x6a, 0x72, 0xb6, 0x90, 0x98,
	0x1e, 0xc4, 0x08, 0x3d, 0x98, 0x11, 0x7a, 0xae, 0x20, 0x23, 0xa4, 0x54, 0xf4, 0x70, 0x3b, 0x46,
	0x0f, 0x66, 0x92, 0x90, 0x2f, 0x17, 0x77, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x15, 0x0c, 0x33,
	0x60, 0x74, 0x0a, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xab, 0xf4,
	0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xb0, 0x59, 0xba, 0x79, 0xa9, 0x25,
	0xe5, 0xf9, 0x45, 0xd9, 0x50, 0x5e, 0x62, 0x41, 0xa6, 0x7e, 0x7a, 0x3e, 0xd6, 0x40, 0x4e, 0x62,
	0x03, 0xbb, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xcd, 0x55, 0xe6, 0x89, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OperatorRPCClient is the client API for OperatorRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OperatorRPCClient interface {
	// Check status of the operator
	Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Operator, error)
	// StreamServiceLogs
	StreamCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (OperatorRPC_StreamCheckClient, error)
}

type operatorRPCClient struct {
	cc grpc1.ClientConn
}

func NewOperatorRPCClient(cc grpc1.ClientConn) OperatorRPCClient {
	return &operatorRPCClient{cc}
}

func (c *operatorRPCClient) Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Operator, error) {
	out := new(Operator)
	err := c.cc.Invoke(ctx, "/akash.provider.operator.v1.OperatorRPC/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorRPCClient) StreamCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (OperatorRPC_StreamCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OperatorRPC_serviceDesc.Streams[0], "/akash.provider.operator.v1.OperatorRPC/StreamCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &operatorRPCStreamCheckClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OperatorRPC_StreamCheckClient interface {
	Recv() (*Operator, error)
	grpc.ClientStream
}

type operatorRPCStreamCheckClient struct {
	grpc.ClientStream
}

func (x *operatorRPCStreamCheckClient) Recv() (*Operator, error) {
	m := new(Operator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OperatorRPCServer is the server API for OperatorRPC service.
type OperatorRPCServer interface {
	// Check status of the operator
	Check(context.Context, *emptypb.Empty) (*Operator, error)
	// StreamServiceLogs
	StreamCheck(*emptypb.Empty, OperatorRPC_StreamCheckServer) error
}

// UnimplementedOperatorRPCServer can be embedded to have forward compatible implementations.
type UnimplementedOperatorRPCServer struct {
}

func (*UnimplementedOperatorRPCServer) Check(ctx context.Context, req *emptypb.Empty) (*Operator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedOperatorRPCServer) StreamCheck(req *emptypb.Empty, srv OperatorRPC_StreamCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCheck not implemented")
}

func RegisterOperatorRPCServer(s grpc1.Server, srv OperatorRPCServer) {
	s.RegisterService(&_OperatorRPC_serviceDesc, srv)
}

func _OperatorRPC_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorRPCServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.provider.operator.v1.OperatorRPC/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorRPCServer).Check(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorRPC_StreamCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorRPCServer).StreamCheck(m, &operatorRPCStreamCheckServer{stream})
}

type OperatorRPC_StreamCheckServer interface {
	Send(*Operator) error
	grpc.ServerStream
}

type operatorRPCStreamCheckServer struct {
	grpc.ServerStream
}

func (x *operatorRPCStreamCheckServer) Send(m *Operator) error {
	return x.ServerStream.SendMsg(m)
}

var _OperatorRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.provider.operator.v1.OperatorRPC",
	HandlerType: (*OperatorRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _OperatorRPC_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCheck",
			Handler:       _OperatorRPC_StreamCheck_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "akash/provider/operator/v1/service.proto",
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
