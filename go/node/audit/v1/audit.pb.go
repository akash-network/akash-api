// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/audit/v1/audit.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	pkg_akt_dev_go_node_types_attributes_v1 "pkg.akt.dev/go/node/types/attributes/v1"
	v1 "pkg.akt.dev/go/node/types/attributes/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Provider stores owner, auditor and attributes details.
type AuditedProvider struct {
	// Owner is the account bech32 address of the provider.
	// It is a string representing a valid account address.
	//
	// Example:
	//   "akash1..."
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	// Auditor is the account address of the auditor.
	// It is a string representing a valid account address.
	//
	// Example:
	//   "akash1..."
	Auditor string `protobuf:"bytes,2,opt,name=auditor,proto3" json:"auditor" yaml:"auditor"`
	// Attributes holds a list of key-value pairs of provider attributes.
	// Attributes are arbitrary values that a provider exposes.
	Attributes pkg_akt_dev_go_node_types_attributes_v1.Attributes `protobuf:"bytes,4,rep,name=attributes,proto3,castrepeated=pkg.akt.dev/go/node/types/attributes/v1.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *AuditedProvider) Reset()         { *m = AuditedProvider{} }
func (m *AuditedProvider) String() string { return proto.CompactTextString(m) }
func (*AuditedProvider) ProtoMessage()    {}
func (*AuditedProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_88024e67b7102602, []int{0}
}
func (m *AuditedProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditedProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditedProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditedProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditedProvider.Merge(m, src)
}
func (m *AuditedProvider) XXX_Size() int {
	return m.Size()
}
func (m *AuditedProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditedProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AuditedProvider proto.InternalMessageInfo

func (m *AuditedProvider) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AuditedProvider) GetAuditor() string {
	if m != nil {
		return m.Auditor
	}
	return ""
}

func (m *AuditedProvider) GetAttributes() pkg_akt_dev_go_node_types_attributes_v1.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AuditedAttributesStore stores the audited attributes of the provider.
// Audited attributes are attributes verified by the auditor.
type AuditedAttributesStore struct {
	// Attributes holds a list of key-value pairs of provider attributes.
	// Attributes are arbitrary values that a provider exposes.
	Attributes pkg_akt_dev_go_node_types_attributes_v1.Attributes `protobuf:"bytes,1,rep,name=attributes,proto3,castrepeated=pkg.akt.dev/go/node/types/attributes/v1.Attributes" json:"attributes" yaml:"attributes"`
}

func (m *AuditedAttributesStore) Reset()         { *m = AuditedAttributesStore{} }
func (m *AuditedAttributesStore) String() string { return proto.CompactTextString(m) }
func (*AuditedAttributesStore) ProtoMessage()    {}
func (*AuditedAttributesStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_88024e67b7102602, []int{1}
}
func (m *AuditedAttributesStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditedAttributesStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditedAttributesStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditedAttributesStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditedAttributesStore.Merge(m, src)
}
func (m *AuditedAttributesStore) XXX_Size() int {
	return m.Size()
}
func (m *AuditedAttributesStore) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditedAttributesStore.DiscardUnknown(m)
}

var xxx_messageInfo_AuditedAttributesStore proto.InternalMessageInfo

func (m *AuditedAttributesStore) GetAttributes() pkg_akt_dev_go_node_types_attributes_v1.Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// AttributesFilters defines attribute filters that can be used to filter deployments.
type AttributesFilters struct {
	// Auditors contains a list of account addresses.
	Auditors []string `protobuf:"bytes,1,rep,name=auditors,proto3" json:"auditors" yaml:"auditors"`
	// Owners contains a list of account addresses.
	Owners []string `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners" yaml:"owners"`
}

func (m *AttributesFilters) Reset()         { *m = AttributesFilters{} }
func (m *AttributesFilters) String() string { return proto.CompactTextString(m) }
func (*AttributesFilters) ProtoMessage()    {}
func (*AttributesFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_88024e67b7102602, []int{2}
}
func (m *AttributesFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttributesFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttributesFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttributesFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttributesFilters.Merge(m, src)
}
func (m *AttributesFilters) XXX_Size() int {
	return m.Size()
}
func (m *AttributesFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_AttributesFilters.DiscardUnknown(m)
}

var xxx_messageInfo_AttributesFilters proto.InternalMessageInfo

func (m *AttributesFilters) GetAuditors() []string {
	if m != nil {
		return m.Auditors
	}
	return nil
}

func (m *AttributesFilters) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func init() {
	proto.RegisterType((*AuditedProvider)(nil), "akash.audit.v1.AuditedProvider")
	proto.RegisterType((*AuditedAttributesStore)(nil), "akash.audit.v1.AuditedAttributesStore")
	proto.RegisterType((*AttributesFilters)(nil), "akash.audit.v1.AttributesFilters")
}

func init() { proto.RegisterFile("akash/audit/v1/audit.proto", fileDescriptor_88024e67b7102602) }

var fileDescriptor_88024e67b7102602 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x31, 0xce, 0xd3, 0x30,
	0x18, 0x8d, 0xcb, 0x4f, 0xa1, 0x06, 0x5a, 0x35, 0x42, 0x28, 0x14, 0x88, 0x2b, 0xb3, 0x74, 0xb2,
	0xd5, 0x56, 0x02, 0xa9, 0x4c, 0xcd, 0xc0, 0x8c, 0xc2, 0x86, 0xc4, 0x90, 0x2a, 0x56, 0x88, 0x5a,
	0xea, 0xca, 0x76, 0x83, 0x7a, 0x06, 0x16, 0x8e, 0x50, 0x31, 0x72, 0x0d, 0x96, 0x8e, 0x1d, 0x99,
	0x0c, 0x6a, 0x17, 0x94, 0x31, 0x27, 0x40, 0xb5, 0x93, 0xa6, 0x45, 0x1c, 0x80, 0xcd, 0xdf, 0x7b,
	0xdf, 0x7b, 0x79, 0xf6, 0xf7, 0x05, 0xf6, 0xa2, 0x79, 0x24, 0x3f, 0xd0, 0x68, 0x1d, 0xa7, 0x8a,
	0x66, 0x43, 0x7b, 0x20, 0x2b, 0xc1, 0x15, 0x77, 0xdb, 0x86, 0x23, 0x16, 0xca, 0x86, 0xbd, 0x87,
	0x09, 0x4f, 0xb8, 0xa1, 0xe8, 0xe9, 0x64, 0xbb, 0x7a, 0x03, 0xeb, 0x30, 0x8b, 0x24, 0xa3, 0x91,
	0x52, 0x22, 0x9d, 0xad, 0x15, 0x93, 0xc6, 0xab, 0xaa, 0x6c, 0x27, 0xde, 0x36, 0x60, 0x67, 0x7a,
	0x32, 0x63, 0xf1, 0x1b, 0xc1, 0xb3, 0x34, 0x66, 0xc2, 0xa5, 0xf0, 0x36, 0xff, 0xb4, 0x64, 0xc2,
	0x03, 0x7d, 0x30, 0x68, 0x05, 0x8f, 0x73, 0x8d, 0x2c, 0x50, 0x68, 0x74, 0x7f, 0x13, 0x7d, 0x5c,
	0x4c, 0xb0, 0x29, 0x71, 0x68, 0x61, 0xf7, 0x25, 0xbc, 0x63, 0x02, 0x71, 0xe1, 0x35, 0x8c, 0xe4,
	0x59, 0xae, 0x51, 0x05, 0x15, 0x1a, 0xb5, 0xad, 0xa8, 0x04, 0x70, 0x58, 0x51, 0xee, 0x57, 0x00,
	0x61, 0x9d, 0xcf, 0xbb, 0xe9, 0xdf, 0x1a, 0xdc, 0x1b, 0x3d, 0x27, 0xf6, 0x8e, 0xa7, 0xf4, 0xa4,
	0x66, 0x49, 0x36, 0x24, 0xd3, 0xaa, 0x0a, 0xde, 0xef, 0x34, 0x72, 0x72, 0x8d, 0x2e, 0xe4, 0x85,
	0x46, 0xdd, 0xf2, 0x43, 0x67, 0x0c, 0x7f, 0xfb, 0x89, 0x46, 0xab, 0x79, 0x42, 0xa2, 0xb9, 0x22,
	0x31, 0xcb, 0x68, 0xc2, 0xe9, 0x92, 0xc7, 0x8c, 0xaa, 0xcd, 0x8a, 0xc9, 0xeb, 0xb7, 0xa9, 0xdd,
	0x65, 0x78, 0x61, 0x8b, 0xbf, 0x03, 0xf8, 0xa8, 0x7c, 0xa2, 0xba, 0xe3, 0xad, 0xe2, 0x82, 0xfd,
	0x9d, 0x1f, 0xfc, 0x8f, 0xf9, 0x27, 0x37, 0xbf, 0xb7, 0xc8, 0xc1, 0x9f, 0x01, 0xec, 0xd6, 0x0d,
	0xaf, 0xd3, 0x85, 0x62, 0x42, 0xba, 0xaf, 0xe0, 0xdd, 0x72, 0x16, 0x36, 0x7d, 0x2b, 0x40, 0xb9,
	0x46, 0x67, 0xac, 0xd0, 0xa8, 0x73, 0x35, 0x3b, 0x89, 0xc3, 0x33, 0xe9, 0x8e, 0x61, 0xd3, 0xcc,
	0x5f, 0x7a, 0x0d, 0x23, 0x7d, 0x92, 0x6b, 0x54, 0x22, 0x85, 0x46, 0x0f, 0x2e, 0x36, 0x45, 0xe2,
	0xb0, 0x24, 0x6c, 0x9a, 0xe0, 0xc5, 0xee, 0xe0, 0x83, 0xfd, 0xc1, 0x07, 0xbf, 0x0e, 0x3e, 0xf8,
	0x72, 0xf4, 0x9d, 0xfd, 0xd1, 0x77, 0x7e, 0x1c, 0x7d, 0xe7, 0xdd, 0xd3, 0x7f, 0xdd, 0xb6, 0xfa,
	0x15, 0x66, 0x4d, 0xb3, 0xb5, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x25, 0xf9, 0xd5, 0x84,
	0x23, 0x03, 0x00, 0x00,
}

func (m *AuditedProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditedProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditedProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Auditor) > 0 {
		i -= len(m.Auditor)
		copy(dAtA[i:], m.Auditor)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Auditor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAudit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuditedAttributesStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditedAttributesStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuditedAttributesStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAudit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AttributesFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttributesFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttributesFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintAudit(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Auditors) > 0 {
		for iNdEx := len(m.Auditors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Auditors[iNdEx])
			copy(dAtA[i:], m.Auditors[iNdEx])
			i = encodeVarintAudit(dAtA, i, uint64(len(m.Auditors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAudit(dAtA []byte, offset int, v uint64) int {
	offset -= sovAudit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuditedProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	l = len(m.Auditor)
	if l > 0 {
		n += 1 + l + sovAudit(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AuditedAttributesStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func (m *AttributesFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auditors) > 0 {
		for _, s := range m.Auditors {
			l = len(s)
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovAudit(uint64(l))
		}
	}
	return n
}

func sovAudit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAudit(x uint64) (n int) {
	return sovAudit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuditedProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditedProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditedProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auditor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auditor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditedAttributesStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditedAttributesStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditedAttributesStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttributesFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttributesFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttributesFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auditors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auditors = append(m.Auditors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAudit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAudit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAudit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAudit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAudit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAudit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAudit = fmt.Errorf("proto: unexpected end of group")
)
