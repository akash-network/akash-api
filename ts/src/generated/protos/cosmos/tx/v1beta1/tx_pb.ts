// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/tx/v1beta1/tx.proto (package cosmos.tx.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import type { CompactBitArray, CompactBitArrayJson } from "../../crypto/multisig/v1beta1/multisig_pb.ts";
import { file_cosmos_crypto_multisig_v1beta1_multisig } from "../../crypto/multisig/v1beta1/multisig_pb.ts";
import type { Coin, CoinJson } from "../../base/v1beta1/coin_pb.ts";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb.ts";
import type { SignMode, SignModeJson } from "../signing/v1beta1/signing_pb.ts";
import { file_cosmos_tx_signing_v1beta1_signing } from "../signing/v1beta1/signing_pb.ts";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/tx/v1beta1/tx.proto.
 */
export const file_cosmos_tx_v1beta1_tx: GenFile = /*@__PURE__*/
  fileDesc("Chpjb3Ntb3MvdHgvdjFiZXRhMS90eC5wcm90bxIRY29zbW9zLnR4LnYxYmV0YTEicQoCVHgSJwoEYm9keRgBIAEoCzIZLmNvc21vcy50eC52MWJldGExLlR4Qm9keRIuCglhdXRoX2luZm8YAiABKAsyGy5jb3Ntb3MudHgudjFiZXRhMS5BdXRoSW5mbxISCgpzaWduYXR1cmVzGAMgAygMIkgKBVR4UmF3EhIKCmJvZHlfYnl0ZXMYASABKAwSFwoPYXV0aF9pbmZvX2J5dGVzGAIgASgMEhIKCnNpZ25hdHVyZXMYAyADKAwiYAoHU2lnbkRvYxISCgpib2R5X2J5dGVzGAEgASgMEhcKD2F1dGhfaW5mb19ieXRlcxgCIAEoDBIQCghjaGFpbl9pZBgDIAEoCRIWCg5hY2NvdW50X251bWJlchgEIAEoBCKxAQoQU2lnbkRvY0RpcmVjdEF1eBISCgpib2R5X2J5dGVzGAEgASgMEigKCnB1YmxpY19rZXkYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55EhAKCGNoYWluX2lkGAMgASgJEhYKDmFjY291bnRfbnVtYmVyGAQgASgEEhAKCHNlcXVlbmNlGAUgASgEEiMKA3RpcBgGIAEoCzIWLmNvc21vcy50eC52MWJldGExLlRpcCLHAQoGVHhCb2R5EiYKCG1lc3NhZ2VzGAEgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIMCgRtZW1vGAIgASgJEhYKDnRpbWVvdXRfaGVpZ2h0GAMgASgEEjAKEWV4dGVuc2lvbl9vcHRpb25zGP8HIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSPQoebm9uX2NyaXRpY2FsX2V4dGVuc2lvbl9vcHRpb25zGP8PIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkiiQEKCEF1dGhJbmZvEjMKDHNpZ25lcl9pbmZvcxgBIAMoCzIdLmNvc21vcy50eC52MWJldGExLlNpZ25lckluZm8SIwoDZmVlGAIgASgLMhYuY29zbW9zLnR4LnYxYmV0YTEuRmVlEiMKA3RpcBgDIAEoCzIWLmNvc21vcy50eC52MWJldGExLlRpcCJ4CgpTaWduZXJJbmZvEigKCnB1YmxpY19rZXkYASABKAsyFC5nb29nbGUucHJvdG9idWYuQW55Ei4KCW1vZGVfaW5mbxgCIAEoCzIbLmNvc21vcy50eC52MWJldGExLk1vZGVJbmZvEhAKCHNlcXVlbmNlGAMgASgEIrUCCghNb2RlSW5mbxI0CgZzaW5nbGUYASABKAsyIi5jb3Ntb3MudHgudjFiZXRhMS5Nb2RlSW5mby5TaW5nbGVIABIyCgVtdWx0aRgCIAEoCzIhLmNvc21vcy50eC52MWJldGExLk1vZGVJbmZvLk11bHRpSAAaOwoGU2luZ2xlEjEKBG1vZGUYASABKA4yIy5jb3Ntb3MudHguc2lnbmluZy52MWJldGExLlNpZ25Nb2RlGnsKBU11bHRpEkEKCGJpdGFycmF5GAEgASgLMi8uY29zbW9zLmNyeXB0by5tdWx0aXNpZy52MWJldGExLkNvbXBhY3RCaXRBcnJheRIvCgptb2RlX2luZm9zGAIgAygLMhsuY29zbW9zLnR4LnYxYmV0YTEuTW9kZUluZm9CBQoDc3VtIskBCgNGZWUSWwoGYW1vdW50GAEgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjDI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnMSEQoJZ2FzX2xpbWl0GAIgASgEEicKBXBheWVyGAMgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSKQoHZ3JhbnRlchgEIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nIowBCgNUaXASWwoGYW1vdW50GAEgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjDI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnMSKAoGdGlwcGVyGAIgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcisQEKDUF1eFNpZ25lckRhdGESKQoHYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEjUKCHNpZ25fZG9jGAIgASgLMiMuY29zbW9zLnR4LnYxYmV0YTEuU2lnbkRvY0RpcmVjdEF1eBIxCgRtb2RlGAMgASgOMiMuY29zbW9zLnR4LnNpZ25pbmcudjFiZXRhMS5TaWduTW9kZRILCgNzaWcYBCABKAxCJ1olZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy90eGIGcHJvdG8z", [file_gogoproto_gogo, file_cosmos_crypto_multisig_v1beta1_multisig, file_cosmos_base_v1beta1_coin, file_cosmos_tx_signing_v1beta1_signing, file_google_protobuf_any, file_cosmos_proto_cosmos]);

/**
 * Tx is the standard type used for broadcasting transactions.
 *
 * @generated from message cosmos.tx.v1beta1.Tx
 */
export type Tx = Message<"cosmos.tx.v1beta1.Tx"> & {
  /**
   * body is the processable content of the transaction
   *
   * @generated from field: cosmos.tx.v1beta1.TxBody body = 1;
   */
  body?: TxBody;

  /**
   * auth_info is the authorization related content of the transaction,
   * specifically signers, signer modes and fee
   *
   * @generated from field: cosmos.tx.v1beta1.AuthInfo auth_info = 2;
   */
  authInfo?: AuthInfo;

  /**
   * signatures is a list of signatures that matches the length and order of
   * AuthInfo's signer_infos to allow connecting signature meta information like
   * public key and signing mode by position.
   *
   * @generated from field: repeated bytes signatures = 3;
   */
  signatures: Uint8Array[];
};

/**
 * Tx is the standard type used for broadcasting transactions.
 *
 * @generated from message cosmos.tx.v1beta1.Tx
 */
export type TxJson = {
  /**
   * body is the processable content of the transaction
   *
   * @generated from field: cosmos.tx.v1beta1.TxBody body = 1;
   */
  body?: TxBodyJson;

  /**
   * auth_info is the authorization related content of the transaction,
   * specifically signers, signer modes and fee
   *
   * @generated from field: cosmos.tx.v1beta1.AuthInfo auth_info = 2;
   */
  authInfo?: AuthInfoJson;

  /**
   * signatures is a list of signatures that matches the length and order of
   * AuthInfo's signer_infos to allow connecting signature meta information like
   * public key and signing mode by position.
   *
   * @generated from field: repeated bytes signatures = 3;
   */
  signatures?: string[];
};

/**
 * Describes the message cosmos.tx.v1beta1.Tx.
 * Use `create(TxSchema)` to create a new message.
 */
export const TxSchema: GenMessage<Tx, TxJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 0);

/**
 * TxRaw is a variant of Tx that pins the signer's exact binary representation
 * of body and auth_info. This is used for signing, broadcasting and
 * verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
 * the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
 * as the transaction ID.
 *
 * @generated from message cosmos.tx.v1beta1.TxRaw
 */
export type TxRaw = Message<"cosmos.tx.v1beta1.TxRaw"> & {
  /**
   * body_bytes is a protobuf serialization of a TxBody that matches the
   * representation in SignDoc.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes: Uint8Array;

  /**
   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
   * representation in SignDoc.
   *
   * @generated from field: bytes auth_info_bytes = 2;
   */
  authInfoBytes: Uint8Array;

  /**
   * signatures is a list of signatures that matches the length and order of
   * AuthInfo's signer_infos to allow connecting signature meta information like
   * public key and signing mode by position.
   *
   * @generated from field: repeated bytes signatures = 3;
   */
  signatures: Uint8Array[];
};

/**
 * TxRaw is a variant of Tx that pins the signer's exact binary representation
 * of body and auth_info. This is used for signing, broadcasting and
 * verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
 * the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
 * as the transaction ID.
 *
 * @generated from message cosmos.tx.v1beta1.TxRaw
 */
export type TxRawJson = {
  /**
   * body_bytes is a protobuf serialization of a TxBody that matches the
   * representation in SignDoc.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes?: string;

  /**
   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
   * representation in SignDoc.
   *
   * @generated from field: bytes auth_info_bytes = 2;
   */
  authInfoBytes?: string;

  /**
   * signatures is a list of signatures that matches the length and order of
   * AuthInfo's signer_infos to allow connecting signature meta information like
   * public key and signing mode by position.
   *
   * @generated from field: repeated bytes signatures = 3;
   */
  signatures?: string[];
};

/**
 * Describes the message cosmos.tx.v1beta1.TxRaw.
 * Use `create(TxRawSchema)` to create a new message.
 */
export const TxRawSchema: GenMessage<TxRaw, TxRawJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 1);

/**
 * SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
 *
 * @generated from message cosmos.tx.v1beta1.SignDoc
 */
export type SignDoc = Message<"cosmos.tx.v1beta1.SignDoc"> & {
  /**
   * body_bytes is protobuf serialization of a TxBody that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes: Uint8Array;

  /**
   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes auth_info_bytes = 2;
   */
  authInfoBytes: Uint8Array;

  /**
   * chain_id is the unique identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker
   *
   * @generated from field: string chain_id = 3;
   */
  chainId: string;

  /**
   * account_number is the account number of the account in state
   *
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber: bigint;
};

/**
 * SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
 *
 * @generated from message cosmos.tx.v1beta1.SignDoc
 */
export type SignDocJson = {
  /**
   * body_bytes is protobuf serialization of a TxBody that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes?: string;

  /**
   * auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes auth_info_bytes = 2;
   */
  authInfoBytes?: string;

  /**
   * chain_id is the unique identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker
   *
   * @generated from field: string chain_id = 3;
   */
  chainId?: string;

  /**
   * account_number is the account number of the account in state
   *
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber?: string;
};

/**
 * Describes the message cosmos.tx.v1beta1.SignDoc.
 * Use `create(SignDocSchema)` to create a new message.
 */
export const SignDocSchema: GenMessage<SignDoc, SignDocJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 2);

/**
 * SignDocDirectAux is the type used for generating sign bytes for
 * SIGN_MODE_DIRECT_AUX.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.SignDocDirectAux
 */
export type SignDocDirectAux = Message<"cosmos.tx.v1beta1.SignDocDirectAux"> & {
  /**
   * body_bytes is protobuf serialization of a TxBody that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes: Uint8Array;

  /**
   * public_key is the public key of the signing account.
   *
   * @generated from field: google.protobuf.Any public_key = 2;
   */
  publicKey?: Any;

  /**
   * chain_id is the identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker.
   *
   * @generated from field: string chain_id = 3;
   */
  chainId: string;

  /**
   * account_number is the account number of the account in state.
   *
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber: bigint;

  /**
   * sequence is the sequence number of the signing account.
   *
   * @generated from field: uint64 sequence = 5;
   */
  sequence: bigint;

  /**
   * Tip is the optional tip used for transactions fees paid in another denom.
   * It should be left empty if the signer is not the tipper for this
   * transaction.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * @generated from field: cosmos.tx.v1beta1.Tip tip = 6;
   */
  tip?: Tip;
};

/**
 * SignDocDirectAux is the type used for generating sign bytes for
 * SIGN_MODE_DIRECT_AUX.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.SignDocDirectAux
 */
export type SignDocDirectAuxJson = {
  /**
   * body_bytes is protobuf serialization of a TxBody that matches the
   * representation in TxRaw.
   *
   * @generated from field: bytes body_bytes = 1;
   */
  bodyBytes?: string;

  /**
   * public_key is the public key of the signing account.
   *
   * @generated from field: google.protobuf.Any public_key = 2;
   */
  publicKey?: AnyJson;

  /**
   * chain_id is the identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker.
   *
   * @generated from field: string chain_id = 3;
   */
  chainId?: string;

  /**
   * account_number is the account number of the account in state.
   *
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber?: string;

  /**
   * sequence is the sequence number of the signing account.
   *
   * @generated from field: uint64 sequence = 5;
   */
  sequence?: string;

  /**
   * Tip is the optional tip used for transactions fees paid in another denom.
   * It should be left empty if the signer is not the tipper for this
   * transaction.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * @generated from field: cosmos.tx.v1beta1.Tip tip = 6;
   */
  tip?: TipJson;
};

/**
 * Describes the message cosmos.tx.v1beta1.SignDocDirectAux.
 * Use `create(SignDocDirectAuxSchema)` to create a new message.
 */
export const SignDocDirectAuxSchema: GenMessage<SignDocDirectAux, SignDocDirectAuxJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 3);

/**
 * TxBody is the body of a transaction that all signers sign over.
 *
 * @generated from message cosmos.tx.v1beta1.TxBody
 */
export type TxBody = Message<"cosmos.tx.v1beta1.TxBody"> & {
  /**
   * messages is a list of messages to be executed. The required signers of
   * those messages define the number and order of elements in AuthInfo's
   * signer_infos and Tx's signatures. Each required signer address is added to
   * the list only the first time it occurs.
   * By convention, the first required signer (usually from the first message)
   * is referred to as the primary signer and pays the fee for the whole
   * transaction.
   *
   * @generated from field: repeated google.protobuf.Any messages = 1;
   */
  messages: Any[];

  /**
   * memo is any arbitrary note/comment to be added to the transaction.
   * WARNING: in clients, any publicly exposed text should not be called memo,
   * but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
   *
   * @generated from field: string memo = 2;
   */
  memo: string;

  /**
   * timeout is the block height after which this transaction will not
   * be processed by the chain
   *
   * @generated from field: uint64 timeout_height = 3;
   */
  timeoutHeight: bigint;

  /**
   * extension_options are arbitrary options that can be added by chains
   * when the default options are not sufficient. If any of these are present
   * and can't be handled, the transaction will be rejected
   *
   * @generated from field: repeated google.protobuf.Any extension_options = 1023;
   */
  extensionOptions: Any[];

  /**
   * extension_options are arbitrary options that can be added by chains
   * when the default options are not sufficient. If any of these are present
   * and can't be handled, they will be ignored
   *
   * @generated from field: repeated google.protobuf.Any non_critical_extension_options = 2047;
   */
  nonCriticalExtensionOptions: Any[];
};

/**
 * TxBody is the body of a transaction that all signers sign over.
 *
 * @generated from message cosmos.tx.v1beta1.TxBody
 */
export type TxBodyJson = {
  /**
   * messages is a list of messages to be executed. The required signers of
   * those messages define the number and order of elements in AuthInfo's
   * signer_infos and Tx's signatures. Each required signer address is added to
   * the list only the first time it occurs.
   * By convention, the first required signer (usually from the first message)
   * is referred to as the primary signer and pays the fee for the whole
   * transaction.
   *
   * @generated from field: repeated google.protobuf.Any messages = 1;
   */
  messages?: AnyJson[];

  /**
   * memo is any arbitrary note/comment to be added to the transaction.
   * WARNING: in clients, any publicly exposed text should not be called memo,
   * but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
   *
   * @generated from field: string memo = 2;
   */
  memo?: string;

  /**
   * timeout is the block height after which this transaction will not
   * be processed by the chain
   *
   * @generated from field: uint64 timeout_height = 3;
   */
  timeoutHeight?: string;

  /**
   * extension_options are arbitrary options that can be added by chains
   * when the default options are not sufficient. If any of these are present
   * and can't be handled, the transaction will be rejected
   *
   * @generated from field: repeated google.protobuf.Any extension_options = 1023;
   */
  extensionOptions?: AnyJson[];

  /**
   * extension_options are arbitrary options that can be added by chains
   * when the default options are not sufficient. If any of these are present
   * and can't be handled, they will be ignored
   *
   * @generated from field: repeated google.protobuf.Any non_critical_extension_options = 2047;
   */
  nonCriticalExtensionOptions?: AnyJson[];
};

/**
 * Describes the message cosmos.tx.v1beta1.TxBody.
 * Use `create(TxBodySchema)` to create a new message.
 */
export const TxBodySchema: GenMessage<TxBody, TxBodyJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 4);

/**
 * AuthInfo describes the fee and signer modes that are used to sign a
 * transaction.
 *
 * @generated from message cosmos.tx.v1beta1.AuthInfo
 */
export type AuthInfo = Message<"cosmos.tx.v1beta1.AuthInfo"> & {
  /**
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   *
   * @generated from field: repeated cosmos.tx.v1beta1.SignerInfo signer_infos = 1;
   */
  signerInfos: SignerInfo[];

  /**
   * Fee is the fee and gas limit for the transaction. The first signer is the
   * primary signer and the one which pays the fee. The fee can be calculated
   * based on the cost of evaluating the body and doing signature verification
   * of the signers. This can be estimated via simulation.
   *
   * @generated from field: cosmos.tx.v1beta1.Fee fee = 2;
   */
  fee?: Fee;

  /**
   * Tip is the optional tip used for transactions fees paid in another denom.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: cosmos.tx.v1beta1.Tip tip = 3;
   */
  tip?: Tip;
};

/**
 * AuthInfo describes the fee and signer modes that are used to sign a
 * transaction.
 *
 * @generated from message cosmos.tx.v1beta1.AuthInfo
 */
export type AuthInfoJson = {
  /**
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   *
   * @generated from field: repeated cosmos.tx.v1beta1.SignerInfo signer_infos = 1;
   */
  signerInfos?: SignerInfoJson[];

  /**
   * Fee is the fee and gas limit for the transaction. The first signer is the
   * primary signer and the one which pays the fee. The fee can be calculated
   * based on the cost of evaluating the body and doing signature verification
   * of the signers. This can be estimated via simulation.
   *
   * @generated from field: cosmos.tx.v1beta1.Fee fee = 2;
   */
  fee?: FeeJson;

  /**
   * Tip is the optional tip used for transactions fees paid in another denom.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from field: cosmos.tx.v1beta1.Tip tip = 3;
   */
  tip?: TipJson;
};

/**
 * Describes the message cosmos.tx.v1beta1.AuthInfo.
 * Use `create(AuthInfoSchema)` to create a new message.
 */
export const AuthInfoSchema: GenMessage<AuthInfo, AuthInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 5);

/**
 * SignerInfo describes the public key and signing mode of a single top-level
 * signer.
 *
 * @generated from message cosmos.tx.v1beta1.SignerInfo
 */
export type SignerInfo = Message<"cosmos.tx.v1beta1.SignerInfo"> & {
  /**
   * public_key is the public key of the signer. It is optional for accounts
   * that already exist in state. If unset, the verifier can use the required \
   * signer address for this position and lookup the public key.
   *
   * @generated from field: google.protobuf.Any public_key = 1;
   */
  publicKey?: Any;

  /**
   * mode_info describes the signing mode of the signer and is a nested
   * structure to support nested multisig pubkey's
   *
   * @generated from field: cosmos.tx.v1beta1.ModeInfo mode_info = 2;
   */
  modeInfo?: ModeInfo;

  /**
   * sequence is the sequence of the account, which describes the
   * number of committed transactions signed by a given address. It is used to
   * prevent replay attacks.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence: bigint;
};

/**
 * SignerInfo describes the public key and signing mode of a single top-level
 * signer.
 *
 * @generated from message cosmos.tx.v1beta1.SignerInfo
 */
export type SignerInfoJson = {
  /**
   * public_key is the public key of the signer. It is optional for accounts
   * that already exist in state. If unset, the verifier can use the required \
   * signer address for this position and lookup the public key.
   *
   * @generated from field: google.protobuf.Any public_key = 1;
   */
  publicKey?: AnyJson;

  /**
   * mode_info describes the signing mode of the signer and is a nested
   * structure to support nested multisig pubkey's
   *
   * @generated from field: cosmos.tx.v1beta1.ModeInfo mode_info = 2;
   */
  modeInfo?: ModeInfoJson;

  /**
   * sequence is the sequence of the account, which describes the
   * number of committed transactions signed by a given address. It is used to
   * prevent replay attacks.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence?: string;
};

/**
 * Describes the message cosmos.tx.v1beta1.SignerInfo.
 * Use `create(SignerInfoSchema)` to create a new message.
 */
export const SignerInfoSchema: GenMessage<SignerInfo, SignerInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 6);

/**
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo
 */
export type ModeInfo = Message<"cosmos.tx.v1beta1.ModeInfo"> & {
  /**
   * sum is the oneof that specifies whether this represents a single or nested
   * multisig signer
   *
   * @generated from oneof cosmos.tx.v1beta1.ModeInfo.sum
   */
  sum: {
    /**
     * single represents a single signer
     *
     * @generated from field: cosmos.tx.v1beta1.ModeInfo.Single single = 1;
     */
    value: ModeInfo_Single;
    case: "single";
  } | {
    /**
     * multi represents a nested multisig signer
     *
     * @generated from field: cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;
     */
    value: ModeInfo_Multi;
    case: "multi";
  } | { case: undefined; value?: undefined };
};

/**
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo
 */
export type ModeInfoJson = {
  /**
   * single represents a single signer
   *
   * @generated from field: cosmos.tx.v1beta1.ModeInfo.Single single = 1;
   */
  single?: ModeInfo_SingleJson;

  /**
   * multi represents a nested multisig signer
   *
   * @generated from field: cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;
   */
  multi?: ModeInfo_MultiJson;
};

/**
 * Describes the message cosmos.tx.v1beta1.ModeInfo.
 * Use `create(ModeInfoSchema)` to create a new message.
 */
export const ModeInfoSchema: GenMessage<ModeInfo, ModeInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 7);

/**
 * Single is the mode info for a single signer. It is structured as a message
 * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
 * future
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Single
 */
export type ModeInfo_Single = Message<"cosmos.tx.v1beta1.ModeInfo.Single"> & {
  /**
   * mode is the signing mode of the single signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
   */
  mode: SignMode;
};

/**
 * Single is the mode info for a single signer. It is structured as a message
 * to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
 * future
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Single
 */
export type ModeInfo_SingleJson = {
  /**
   * mode is the signing mode of the single signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
   */
  mode?: SignModeJson;
};

/**
 * Describes the message cosmos.tx.v1beta1.ModeInfo.Single.
 * Use `create(ModeInfo_SingleSchema)` to create a new message.
 */
export const ModeInfo_SingleSchema: GenMessage<ModeInfo_Single, ModeInfo_SingleJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 7, 0);

/**
 * Multi is the mode info for a multisig public key
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Multi
 */
export type ModeInfo_Multi = Message<"cosmos.tx.v1beta1.ModeInfo.Multi"> & {
  /**
   * bitarray specifies which keys within the multisig are signing
   *
   * @generated from field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
   */
  bitarray?: CompactBitArray;

  /**
   * mode_infos is the corresponding modes of the signers of the multisig
   * which could include nested multisig public keys
   *
   * @generated from field: repeated cosmos.tx.v1beta1.ModeInfo mode_infos = 2;
   */
  modeInfos: ModeInfo[];
};

/**
 * Multi is the mode info for a multisig public key
 *
 * @generated from message cosmos.tx.v1beta1.ModeInfo.Multi
 */
export type ModeInfo_MultiJson = {
  /**
   * bitarray specifies which keys within the multisig are signing
   *
   * @generated from field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
   */
  bitarray?: CompactBitArrayJson;

  /**
   * mode_infos is the corresponding modes of the signers of the multisig
   * which could include nested multisig public keys
   *
   * @generated from field: repeated cosmos.tx.v1beta1.ModeInfo mode_infos = 2;
   */
  modeInfos?: ModeInfoJson[];
};

/**
 * Describes the message cosmos.tx.v1beta1.ModeInfo.Multi.
 * Use `create(ModeInfo_MultiSchema)` to create a new message.
 */
export const ModeInfo_MultiSchema: GenMessage<ModeInfo_Multi, ModeInfo_MultiJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 7, 1);

/**
 * Fee includes the amount of coins paid in fees and the maximum
 * gas to be used by the transaction. The ratio yields an effective "gasprice",
 * which must be above some miminum to be accepted into the mempool.
 *
 * @generated from message cosmos.tx.v1beta1.Fee
 */
export type Fee = Message<"cosmos.tx.v1beta1.Fee"> & {
  /**
   * amount is the amount of coins to be paid as a fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[];

  /**
   * gas_limit is the maximum gas that can be used in transaction processing
   * before an out of gas error occurs
   *
   * @generated from field: uint64 gas_limit = 2;
   */
  gasLimit: bigint;

  /**
   * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
   * the payer must be a tx signer (and thus have signed this field in AuthInfo).
   * setting this field does *not* change the ordering of required signers for the transaction.
   *
   * @generated from field: string payer = 3;
   */
  payer: string;

  /**
   * if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
   * to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
   * not support fee grants, this will fail
   *
   * @generated from field: string granter = 4;
   */
  granter: string;
};

/**
 * Fee includes the amount of coins paid in fees and the maximum
 * gas to be used by the transaction. The ratio yields an effective "gasprice",
 * which must be above some miminum to be accepted into the mempool.
 *
 * @generated from message cosmos.tx.v1beta1.Fee
 */
export type FeeJson = {
  /**
   * amount is the amount of coins to be paid as a fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: CoinJson[];

  /**
   * gas_limit is the maximum gas that can be used in transaction processing
   * before an out of gas error occurs
   *
   * @generated from field: uint64 gas_limit = 2;
   */
  gasLimit?: string;

  /**
   * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
   * the payer must be a tx signer (and thus have signed this field in AuthInfo).
   * setting this field does *not* change the ordering of required signers for the transaction.
   *
   * @generated from field: string payer = 3;
   */
  payer?: string;

  /**
   * if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
   * to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
   * not support fee grants, this will fail
   *
   * @generated from field: string granter = 4;
   */
  granter?: string;
};

/**
 * Describes the message cosmos.tx.v1beta1.Fee.
 * Use `create(FeeSchema)` to create a new message.
 */
export const FeeSchema: GenMessage<Fee, FeeJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 8);

/**
 * Tip is the tip used for meta-transactions.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.Tip
 */
export type Tip = Message<"cosmos.tx.v1beta1.Tip"> & {
  /**
   * amount is the amount of the tip
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount: Coin[];

  /**
   * tipper is the address of the account paying for the tip
   *
   * @generated from field: string tipper = 2;
   */
  tipper: string;
};

/**
 * Tip is the tip used for meta-transactions.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.Tip
 */
export type TipJson = {
  /**
   * amount is the amount of the tip
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 1;
   */
  amount?: CoinJson[];

  /**
   * tipper is the address of the account paying for the tip
   *
   * @generated from field: string tipper = 2;
   */
  tipper?: string;
};

/**
 * Describes the message cosmos.tx.v1beta1.Tip.
 * Use `create(TipSchema)` to create a new message.
 */
export const TipSchema: GenMessage<Tip, TipJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 9);

/**
 * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 * tipper) builds and sends to the fee payer (who will build and broadcast the
 * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 * by the node if sent directly as-is.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.AuxSignerData
 */
export type AuxSignerData = Message<"cosmos.tx.v1beta1.AuxSignerData"> & {
  /**
   * address is the bech32-encoded address of the auxiliary signer. If using
   * AuxSignerData across different chains, the bech32 prefix of the target
   * chain (where the final transaction is broadcasted) should be used.
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
   * signs. Note: we use the same sign doc even if we're signing with
   * LEGACY_AMINO_JSON.
   *
   * @generated from field: cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2;
   */
  signDoc?: SignDocDirectAux;

  /**
   * mode is the signing mode of the single signer.
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 3;
   */
  mode: SignMode;

  /**
   * sig is the signature of the sign doc.
   *
   * @generated from field: bytes sig = 4;
   */
  sig: Uint8Array;
};

/**
 * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 * tipper) builds and sends to the fee payer (who will build and broadcast the
 * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 * by the node if sent directly as-is.
 *
 * Since: cosmos-sdk 0.46
 *
 * @generated from message cosmos.tx.v1beta1.AuxSignerData
 */
export type AuxSignerDataJson = {
  /**
   * address is the bech32-encoded address of the auxiliary signer. If using
   * AuxSignerData across different chains, the bech32 prefix of the target
   * chain (where the final transaction is broadcasted) should be used.
   *
   * @generated from field: string address = 1;
   */
  address?: string;

  /**
   * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
   * signs. Note: we use the same sign doc even if we're signing with
   * LEGACY_AMINO_JSON.
   *
   * @generated from field: cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2;
   */
  signDoc?: SignDocDirectAuxJson;

  /**
   * mode is the signing mode of the single signer.
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 3;
   */
  mode?: SignModeJson;

  /**
   * sig is the signature of the sign doc.
   *
   * @generated from field: bytes sig = 4;
   */
  sig?: string;
};

/**
 * Describes the message cosmos.tx.v1beta1.AuxSignerData.
 * Use `create(AuxSignerDataSchema)` to create a new message.
 */
export const AuxSignerDataSchema: GenMessage<AuxSignerData, AuxSignerDataJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_v1beta1_tx, 10);

