// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/group/v1/events.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { ProposalExecutorResult, ProposalExecutorResultJson, ProposalStatus, ProposalStatusJson, TallyResult, TallyResultJson } from "./types_pb.ts";
import { file_cosmos_group_v1_types } from "./types_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/group/v1/events.proto.
 */
export const file_cosmos_group_v1_events: GenFile = /*@__PURE__*/
  fileDesc("Chxjb3Ntb3MvZ3JvdXAvdjEvZXZlbnRzLnByb3RvEg9jb3Ntb3MuZ3JvdXAudjEiJAoQRXZlbnRDcmVhdGVHcm91cBIQCghncm91cF9pZBgBIAEoBCIkChBFdmVudFVwZGF0ZUdyb3VwEhAKCGdyb3VwX2lkGAEgASgEIkMKFkV2ZW50Q3JlYXRlR3JvdXBQb2xpY3kSKQoHYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nIkMKFkV2ZW50VXBkYXRlR3JvdXBQb2xpY3kSKQoHYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nIioKE0V2ZW50U3VibWl0UHJvcG9zYWwSEwoLcHJvcG9zYWxfaWQYASABKAQiLAoVRXZlbnRXaXRoZHJhd1Byb3Bvc2FsEhMKC3Byb3Bvc2FsX2lkGAEgASgEIiAKCUV2ZW50Vm90ZRITCgtwcm9wb3NhbF9pZBgBIAEoBCJnCglFdmVudEV4ZWMSEwoLcHJvcG9zYWxfaWQYASABKAQSNwoGcmVzdWx0GAIgASgOMicuY29zbW9zLmdyb3VwLnYxLlByb3Bvc2FsRXhlY3V0b3JSZXN1bHQSDAoEbG9ncxgDIAEoCSJOCg9FdmVudExlYXZlR3JvdXASEAoIZ3JvdXBfaWQYASABKAQSKQoHYWRkcmVzcxgCIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nIo8BChNFdmVudFByb3Bvc2FsUHJ1bmVkEhMKC3Byb3Bvc2FsX2lkGAEgASgEEi8KBnN0YXR1cxgCIAEoDjIfLmNvc21vcy5ncm91cC52MS5Qcm9wb3NhbFN0YXR1cxIyCgx0YWxseV9yZXN1bHQYAyABKAsyHC5jb3Ntb3MuZ3JvdXAudjEuVGFsbHlSZXN1bHRCJlokZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L2dyb3VwYgZwcm90bzM", [file_cosmos_proto_cosmos, file_cosmos_group_v1_types]);

/**
 * EventCreateGroup is an event emitted when a group is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroup
 */
export type EventCreateGroup = Message<"cosmos.group.v1.EventCreateGroup"> & {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;
};

/**
 * EventCreateGroup is an event emitted when a group is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroup
 */
export type EventCreateGroupJson = {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;
};

/**
 * Describes the message cosmos.group.v1.EventCreateGroup.
 * Use `create(EventCreateGroupSchema)` to create a new message.
 */
export const EventCreateGroupSchema: GenMessage<EventCreateGroup, EventCreateGroupJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 0);

/**
 * EventUpdateGroup is an event emitted when a group is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroup
 */
export type EventUpdateGroup = Message<"cosmos.group.v1.EventUpdateGroup"> & {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;
};

/**
 * EventUpdateGroup is an event emitted when a group is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroup
 */
export type EventUpdateGroupJson = {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;
};

/**
 * Describes the message cosmos.group.v1.EventUpdateGroup.
 * Use `create(EventUpdateGroupSchema)` to create a new message.
 */
export const EventUpdateGroupSchema: GenMessage<EventUpdateGroup, EventUpdateGroupJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 1);

/**
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroupPolicy
 */
export type EventCreateGroupPolicy = Message<"cosmos.group.v1.EventCreateGroupPolicy"> & {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address: string;
};

/**
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 *
 * @generated from message cosmos.group.v1.EventCreateGroupPolicy
 */
export type EventCreateGroupPolicyJson = {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address?: string;
};

/**
 * Describes the message cosmos.group.v1.EventCreateGroupPolicy.
 * Use `create(EventCreateGroupPolicySchema)` to create a new message.
 */
export const EventCreateGroupPolicySchema: GenMessage<EventCreateGroupPolicy, EventCreateGroupPolicyJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 2);

/**
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroupPolicy
 */
export type EventUpdateGroupPolicy = Message<"cosmos.group.v1.EventUpdateGroupPolicy"> & {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address: string;
};

/**
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 *
 * @generated from message cosmos.group.v1.EventUpdateGroupPolicy
 */
export type EventUpdateGroupPolicyJson = {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address?: string;
};

/**
 * Describes the message cosmos.group.v1.EventUpdateGroupPolicy.
 * Use `create(EventUpdateGroupPolicySchema)` to create a new message.
 */
export const EventUpdateGroupPolicySchema: GenMessage<EventUpdateGroupPolicy, EventUpdateGroupPolicyJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 3);

/**
 * EventSubmitProposal is an event emitted when a proposal is created.
 *
 * @generated from message cosmos.group.v1.EventSubmitProposal
 */
export type EventSubmitProposal = Message<"cosmos.group.v1.EventSubmitProposal"> & {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;
};

/**
 * EventSubmitProposal is an event emitted when a proposal is created.
 *
 * @generated from message cosmos.group.v1.EventSubmitProposal
 */
export type EventSubmitProposalJson = {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;
};

/**
 * Describes the message cosmos.group.v1.EventSubmitProposal.
 * Use `create(EventSubmitProposalSchema)` to create a new message.
 */
export const EventSubmitProposalSchema: GenMessage<EventSubmitProposal, EventSubmitProposalJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 4);

/**
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 *
 * @generated from message cosmos.group.v1.EventWithdrawProposal
 */
export type EventWithdrawProposal = Message<"cosmos.group.v1.EventWithdrawProposal"> & {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;
};

/**
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 *
 * @generated from message cosmos.group.v1.EventWithdrawProposal
 */
export type EventWithdrawProposalJson = {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;
};

/**
 * Describes the message cosmos.group.v1.EventWithdrawProposal.
 * Use `create(EventWithdrawProposalSchema)` to create a new message.
 */
export const EventWithdrawProposalSchema: GenMessage<EventWithdrawProposal, EventWithdrawProposalJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 5);

/**
 * EventVote is an event emitted when a voter votes on a proposal.
 *
 * @generated from message cosmos.group.v1.EventVote
 */
export type EventVote = Message<"cosmos.group.v1.EventVote"> & {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;
};

/**
 * EventVote is an event emitted when a voter votes on a proposal.
 *
 * @generated from message cosmos.group.v1.EventVote
 */
export type EventVoteJson = {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;
};

/**
 * Describes the message cosmos.group.v1.EventVote.
 * Use `create(EventVoteSchema)` to create a new message.
 */
export const EventVoteSchema: GenMessage<EventVote, EventVoteJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 6);

/**
 * EventExec is an event emitted when a proposal is executed.
 *
 * @generated from message cosmos.group.v1.EventExec
 */
export type EventExec = Message<"cosmos.group.v1.EventExec"> & {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;

  /**
   * result is the proposal execution result.
   *
   * @generated from field: cosmos.group.v1.ProposalExecutorResult result = 2;
   */
  result: ProposalExecutorResult;

  /**
   * logs contains error logs in case the execution result is FAILURE.
   *
   * @generated from field: string logs = 3;
   */
  logs: string;
};

/**
 * EventExec is an event emitted when a proposal is executed.
 *
 * @generated from message cosmos.group.v1.EventExec
 */
export type EventExecJson = {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;

  /**
   * result is the proposal execution result.
   *
   * @generated from field: cosmos.group.v1.ProposalExecutorResult result = 2;
   */
  result?: ProposalExecutorResultJson;

  /**
   * logs contains error logs in case the execution result is FAILURE.
   *
   * @generated from field: string logs = 3;
   */
  logs?: string;
};

/**
 * Describes the message cosmos.group.v1.EventExec.
 * Use `create(EventExecSchema)` to create a new message.
 */
export const EventExecSchema: GenMessage<EventExec, EventExecJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 7);

/**
 * EventLeaveGroup is an event emitted when group member leaves the group.
 *
 * @generated from message cosmos.group.v1.EventLeaveGroup
 */
export type EventLeaveGroup = Message<"cosmos.group.v1.EventLeaveGroup"> & {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;

  /**
   * address is the account address of the group member.
   *
   * @generated from field: string address = 2;
   */
  address: string;
};

/**
 * EventLeaveGroup is an event emitted when group member leaves the group.
 *
 * @generated from message cosmos.group.v1.EventLeaveGroup
 */
export type EventLeaveGroupJson = {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;

  /**
   * address is the account address of the group member.
   *
   * @generated from field: string address = 2;
   */
  address?: string;
};

/**
 * Describes the message cosmos.group.v1.EventLeaveGroup.
 * Use `create(EventLeaveGroupSchema)` to create a new message.
 */
export const EventLeaveGroupSchema: GenMessage<EventLeaveGroup, EventLeaveGroupJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 8);

/**
 * EventProposalPruned is an event emitted when a proposal is pruned.
 *
 * @generated from message cosmos.group.v1.EventProposalPruned
 */
export type EventProposalPruned = Message<"cosmos.group.v1.EventProposalPruned"> & {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;

  /**
   * status is the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
   *
   * @generated from field: cosmos.group.v1.ProposalStatus status = 2;
   */
  status: ProposalStatus;

  /**
   * tally_result is the proposal tally result (when applicable).
   *
   * @generated from field: cosmos.group.v1.TallyResult tally_result = 3;
   */
  tallyResult?: TallyResult;
};

/**
 * EventProposalPruned is an event emitted when a proposal is pruned.
 *
 * @generated from message cosmos.group.v1.EventProposalPruned
 */
export type EventProposalPrunedJson = {
  /**
   * proposal_id is the unique ID of the proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;

  /**
   * status is the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
   *
   * @generated from field: cosmos.group.v1.ProposalStatus status = 2;
   */
  status?: ProposalStatusJson;

  /**
   * tally_result is the proposal tally result (when applicable).
   *
   * @generated from field: cosmos.group.v1.TallyResult tally_result = 3;
   */
  tallyResult?: TallyResultJson;
};

/**
 * Describes the message cosmos.group.v1.EventProposalPruned.
 * Use `create(EventProposalPrunedSchema)` to create a new message.
 */
export const EventProposalPrunedSchema: GenMessage<EventProposalPruned, EventProposalPrunedJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_events, 9);

