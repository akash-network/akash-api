// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/sdl/v2.1/expose.proto

package v2_1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Expose struct {
	Port        uint32        `protobuf:"varint,1,opt,name=port,proto3" json:"port" yaml:"port"`
	As          uint32        `protobuf:"varint,2,opt,name=as,proto3" json:"as" yaml:"as"`
	Proto       string        `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto" yaml:"proto"`
	To          ExposeToSlice `protobuf:"bytes,4,rep,name=to,proto3,castrepeated=ExposeToSlice" json:"to" yaml:"to"`
	Accept      Accept        `protobuf:"bytes,5,opt,name=accept,proto3" json:"accept" yaml:"accept"`
	HTTPOptions HTTPOptions   `protobuf:"bytes,6,opt,name=http_options,json=httpOptions,proto3" json:"http_options" yaml:"http_options"`
}

func (m *Expose) Reset()         { *m = Expose{} }
func (m *Expose) String() string { return proto.CompactTextString(m) }
func (*Expose) ProtoMessage()    {}
func (*Expose) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b85661b555590aa, []int{0}
}
func (m *Expose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expose.Merge(m, src)
}
func (m *Expose) XXX_Size() int {
	return m.Size()
}
func (m *Expose) XXX_DiscardUnknown() {
	xxx_messageInfo_Expose.DiscardUnknown(m)
}

var xxx_messageInfo_Expose proto.InternalMessageInfo

func (m *Expose) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Expose) GetAs() uint32 {
	if m != nil {
		return m.As
	}
	return 0
}

func (m *Expose) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *Expose) GetTo() ExposeToSlice {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Expose) GetAccept() Accept {
	if m != nil {
		return m.Accept
	}
	return Accept{}
}

func (m *Expose) GetHTTPOptions() HTTPOptions {
	if m != nil {
		return m.HTTPOptions
	}
	return HTTPOptions{}
}

func init() {
	proto.RegisterType((*Expose)(nil), "akash.sdl.v2_1.Expose")
}

func init() { proto.RegisterFile("akash/sdl/v2.1/expose.proto", fileDescriptor_9b85661b555590aa) }

var fileDescriptor_9b85661b555590aa = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x3d, 0x6f, 0xdb, 0x30,
	0x14, 0xb4, 0x68, 0x5b, 0x40, 0xa8, 0xb8, 0x83, 0x5a, 0x14, 0x6a, 0x02, 0xe8, 0xb9, 0x9c, 0x9c,
	0xa1, 0x14, 0xec, 0x2c, 0x45, 0xb6, 0x08, 0x28, 0x90, 0xad, 0x86, 0xea, 0xa1, 0xed, 0x62, 0x30,
	0x8e, 0x60, 0x1b, 0x71, 0xf2, 0x04, 0x93, 0x4d, 0x3f, 0x7e, 0x45, 0x7f, 0x47, 0x7f, 0x49, 0xc6,
	0x00, 0x5d, 0x3a, 0xb1, 0x85, 0xbc, 0x69, 0xd4, 0x2f, 0x28, 0x44, 0xd2, 0x80, 0x63, 0x64, 0xd3,
	0xbb, 0xbb, 0x77, 0x77, 0x7a, 0x12, 0x3d, 0x16, 0xd7, 0x42, 0x2e, 0x12, 0x79, 0xb5, 0x4a, 0xee,
	0x46, 0x7c, 0x98, 0xe4, 0xdf, 0x0a, 0x94, 0x39, 0x2f, 0xd6, 0xa8, 0x30, 0x7c, 0x66, 0x48, 0x2e,
	0xaf, 0x56, 0xfc, 0x6e, 0x34, 0x1d, 0x1e, 0xbd, 0x98, 0xe3, 0x1c, 0x0d, 0x95, 0x34, 0x4f, 0x56,
	0x75, 0xb4, 0x6f, 0x21, 0x66, 0xb3, 0xbc, 0x50, 0x8e, 0x8c, 0x9f, 0xf4, 0x9f, 0xaa, 0xed, 0xf2,
	0xeb, 0x3d, 0x7e, 0xa1, 0x54, 0x31, 0xc5, 0x42, 0x2d, 0xf1, 0x56, 0x5a, 0x09, 0xfb, 0xdd, 0xa6,
	0xfe, 0x3b, 0xb3, 0x16, 0x9e, 0xd2, 0x4e, 0x81, 0x6b, 0x15, 0x79, 0x7d, 0x6f, 0xd0, 0x4b, 0xa1,
	0xd4, 0xd0, 0x19, 0xe3, 0x5a, 0x55, 0x1a, 0x0c, 0x5e, 0x6b, 0x08, 0xbe, 0x8b, 0x9b, 0xd5, 0x19,
	0x6b, 0x26, 0x96, 0x19, 0x30, 0x3c, 0xa1, 0x44, 0xc8, 0x88, 0x98, 0x95, 0x57, 0xa5, 0x06, 0x72,
	0x2e, 0x2b, 0x0d, 0x44, 0xc8, 0x5a, 0xc3, 0x81, 0x95, 0x0b, 0xc9, 0x32, 0x22, 0x64, 0xf8, 0x96,
	0x76, 0x4d, 0x66, 0xd4, 0xee, 0x7b, 0x83, 0x83, 0x94, 0x95, 0x1a, 0xba, 0xe3, 0x06, 0xa8, 0x34,
	0x58, 0xa6, 0xd6, 0x70, 0xe8, 0x22, 0x4c, 0xb9, 0xcc, 0xc2, 0xe1, 0x47, 0x4a, 0x14, 0x46, 0x9d,
	0x7e, 0x7b, 0x10, 0x8c, 0x22, 0xfe, 0xf8, 0x6e, 0xdc, 0xb6, 0x9f, 0x60, 0xca, 0xef, 0x35, 0xb4,
	0x9a, 0x0a, 0x93, 0xc6, 0x91, 0x18, 0x3b, 0x57, 0x41, 0x21, 0xfb, 0xf5, 0x17, 0x7a, 0x5b, 0xe9,
	0x87, 0xd5, 0x72, 0x96, 0x67, 0x44, 0x61, 0xf8, 0x89, 0xfa, 0xf6, 0xa2, 0x51, 0xb7, 0xef, 0x0d,
	0x82, 0xd1, 0xcb, 0x7d, 0xf7, 0x73, 0xc3, 0xa6, 0x27, 0xce, 0xdb, 0xb7, 0x73, 0xa5, 0xc1, 0xed,
	0xd5, 0x1a, 0x7a, 0xee, 0x35, 0xcd, 0xcc, 0x32, 0x47, 0x84, 0x3f, 0xe8, 0xe1, 0xee, 0xbd, 0x23,
	0xdf, 0x04, 0x1c, 0xef, 0x07, 0x5c, 0x4c, 0x26, 0xe3, 0xf7, 0x56, 0x92, 0x9e, 0xb9, 0x94, 0x60,
	0x07, 0xac, 0x34, 0x3c, 0xf2, 0xa9, 0x35, 0x3c, 0xb7, 0x81, 0xbb, 0x28, 0xcb, 0x82, 0x66, 0xdc,
	0x1a, 0x5d, 0xdc, 0x97, 0xb1, 0xf7, 0x50, 0xc6, 0xde, 0xbf, 0x32, 0xf6, 0x7e, 0x6e, 0xe2, 0xd6,
	0xc3, 0x26, 0x6e, 0xfd, 0xd9, 0xc4, 0xad, 0xcf, 0x7c, 0xbe, 0x54, 0x8b, 0x2f, 0x97, 0x7c, 0x86,
	0x37, 0x89, 0x69, 0xf2, 0xe6, 0x36, 0x57, 0x5f, 0x71, 0x7d, 0xed, 0x26, 0x51, 0x2c, 0x93, 0x39,
	0xba, 0x5f, 0x66, 0x3a, 0xbc, 0xf4, 0xcd, 0x17, 0x38, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x7d,
	0x73, 0xd8, 0xdb, 0xcb, 0x02, 0x00, 0x00,
}

func (m *Expose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HTTPOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpose(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Accept.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpose(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.To) > 0 {
		for iNdEx := len(m.To) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.To[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExpose(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Proto) > 0 {
		i -= len(m.Proto)
		copy(dAtA[i:], m.Proto)
		i = encodeVarintExpose(dAtA, i, uint64(len(m.Proto)))
		i--
		dAtA[i] = 0x1a
	}
	if m.As != 0 {
		i = encodeVarintExpose(dAtA, i, uint64(m.As))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintExpose(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpose(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpose(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Expose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovExpose(uint64(m.Port))
	}
	if m.As != 0 {
		n += 1 + sovExpose(uint64(m.As))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovExpose(uint64(l))
	}
	if len(m.To) > 0 {
		for _, e := range m.To {
			l = e.Size()
			n += 1 + l + sovExpose(uint64(l))
		}
	}
	l = m.Accept.Size()
	n += 1 + l + sovExpose(uint64(l))
	l = m.HTTPOptions.Size()
	n += 1 + l + sovExpose(uint64(l))
	return n
}

func sovExpose(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpose(x uint64) (n int) {
	return sovExpose(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Expose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field As", wireType)
			}
			m.As = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.As |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpose
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To, ExposeTo{})
			if err := m.To[len(m.To)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accept", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Accept.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HTTPOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpose(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpose
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpose
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpose
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpose
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpose        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpose          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpose = fmt.Errorf("proto: unexpected end of group")
)
