// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/upgrade/v1beta1/upgrade.proto (package cosmos.upgrade.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, AnyJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import { file_amino_amino } from "../../../amino/amino_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/upgrade/v1beta1/upgrade.proto.
 */
export const file_cosmos_upgrade_v1beta1_upgrade: GenFile = /*@__PURE__*/
  fileDesc("CiRjb3Ntb3MvdXBncmFkZS92MWJldGExL3VwZ3JhZGUucHJvdG8SFmNvc21vcy51cGdyYWRlLnYxYmV0YTEixAEKBFBsYW4SDAoEbmFtZRgBIAEoCRI5CgR0aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIPGAHI3h8AkN8fAajnsCoBEg4KBmhlaWdodBgDIAEoAxIMCgRpbmZvGAQgASgJEjcKFXVwZ3JhZGVkX2NsaWVudF9zdGF0ZRgFIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCAhgBOhyYoB8A6KAfAYrnsCoPY29zbW9zLXNkay9QbGFuIsUBChdTb2Z0d2FyZVVwZ3JhZGVQcm9wb3NhbBINCgV0aXRsZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRI1CgRwbGFuGAMgASgLMhwuY29zbW9zLnVwZ3JhZGUudjFiZXRhMS5QbGFuQgnI3h8AqOewKgE6TxgBmKAfAOigHwHKtC0aY29zbW9zLmdvdi52MWJldGExLkNvbnRlbnSK57AqImNvc21vcy1zZGsvU29mdHdhcmVVcGdyYWRlUHJvcG9zYWwimgEKHUNhbmNlbFNvZnR3YXJlVXBncmFkZVByb3Bvc2FsEg0KBXRpdGxlGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJOlUYAZigHwDooB8ByrQtGmNvc21vcy5nb3YudjFiZXRhMS5Db250ZW50iuewKihjb3Ntb3Mtc2RrL0NhbmNlbFNvZnR3YXJlVXBncmFkZVByb3Bvc2FsIjgKDU1vZHVsZVZlcnNpb24SDAoEbmFtZRgBIAEoCRIPCgd2ZXJzaW9uGAIgASgEOgiYoB8B6KAfAUIyWixnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3gvdXBncmFkZS90eXBlc8jhHgBiBnByb3RvMw", [file_google_protobuf_any, file_gogoproto_gogo, file_google_protobuf_timestamp, file_cosmos_proto_cosmos, file_amino_amino]);

/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from message cosmos.upgrade.v1beta1.Plan
 */
export type Plan = Message<"cosmos.upgrade.v1beta1.Plan"> & {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
   * has been removed from the SDK.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Timestamp time = 2 [deprecated = true];
   * @deprecated
   */
  time?: Timestamp;

  /**
   * The height at which the upgrade must be performed.
   *
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
   * moved to the IBC module in the sub module 02-client.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Any upgraded_client_state = 5 [deprecated = true];
   * @deprecated
   */
  upgradedClientState?: Any;
};

/**
 * Plan specifies information about a planned upgrade and when it should occur.
 *
 * @generated from message cosmos.upgrade.v1beta1.Plan
 */
export type PlanJson = {
  /**
   * Sets the name for the upgrade. This name will be used by the upgraded
   * version of the software to apply any special "on-upgrade" commands during
   * the first BeginBlock method after the upgrade is applied. It is also used
   * to detect whether a software version can handle a given upgrade. If no
   * upgrade handler with this name has been set in the software, it will be
   * assumed that the software is out-of-date when the upgrade Time or Height is
   * reached and the software will exit.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
   * has been removed from the SDK.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Timestamp time = 2 [deprecated = true];
   * @deprecated
   */
  time?: TimestampJson;

  /**
   * The height at which the upgrade must be performed.
   *
   * @generated from field: int64 height = 3;
   */
  height?: string;

  /**
   * Any application specific upgrade info to be included on-chain
   * such as a git commit that validators could automatically upgrade to
   *
   * @generated from field: string info = 4;
   */
  info?: string;

  /**
   * Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
   * moved to the IBC module in the sub module 02-client.
   * If this field is not empty, an error will be thrown.
   *
   * @generated from field: google.protobuf.Any upgraded_client_state = 5 [deprecated = true];
   * @deprecated
   */
  upgradedClientState?: AnyJson;
};

/**
 * Describes the message cosmos.upgrade.v1beta1.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export const PlanSchema: GenMessage<Plan, PlanJson> = /*@__PURE__*/
  messageDesc(file_cosmos_upgrade_v1beta1_upgrade, 0);

/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgSoftwareUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 * @deprecated
 */
export type SoftwareUpgradeProposal = Message<"cosmos.upgrade.v1beta1.SoftwareUpgradeProposal"> & {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * plan of the proposal
   *
   * @generated from field: cosmos.upgrade.v1beta1.Plan plan = 3;
   */
  plan?: Plan;
};

/**
 * SoftwareUpgradeProposal is a gov Content type for initiating a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgSoftwareUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
 * @deprecated
 */
export type SoftwareUpgradeProposalJson = {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title?: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description?: string;

  /**
   * plan of the proposal
   *
   * @generated from field: cosmos.upgrade.v1beta1.Plan plan = 3;
   */
  plan?: PlanJson;
};

/**
 * Describes the message cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.
 * Use `create(SoftwareUpgradeProposalSchema)` to create a new message.
 * @deprecated
 */
export const SoftwareUpgradeProposalSchema: GenMessage<SoftwareUpgradeProposal, SoftwareUpgradeProposalJson> = /*@__PURE__*/
  messageDesc(file_cosmos_upgrade_v1beta1_upgrade, 1);

/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgCancelUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 * @deprecated
 */
export type CancelSoftwareUpgradeProposal = Message<"cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal"> & {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * CancelSoftwareUpgradeProposal is a gov Content type for cancelling a software
 * upgrade.
 * Deprecated: This legacy proposal is deprecated in favor of Msg-based gov
 * proposals, see MsgCancelUpgrade.
 *
 * @generated from message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
 * @deprecated
 */
export type CancelSoftwareUpgradeProposalJson = {
  /**
   * title of the proposal
   *
   * @generated from field: string title = 1;
   */
  title?: string;

  /**
   * description of the proposal
   *
   * @generated from field: string description = 2;
   */
  description?: string;
};

/**
 * Describes the message cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.
 * Use `create(CancelSoftwareUpgradeProposalSchema)` to create a new message.
 * @deprecated
 */
export const CancelSoftwareUpgradeProposalSchema: GenMessage<CancelSoftwareUpgradeProposal, CancelSoftwareUpgradeProposalJson> = /*@__PURE__*/
  messageDesc(file_cosmos_upgrade_v1beta1_upgrade, 2);

/**
 * ModuleVersion specifies a module and its consensus version.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.upgrade.v1beta1.ModuleVersion
 */
export type ModuleVersion = Message<"cosmos.upgrade.v1beta1.ModuleVersion"> & {
  /**
   * name of the app module
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * consensus version of the app module
   *
   * @generated from field: uint64 version = 2;
   */
  version: bigint;
};

/**
 * ModuleVersion specifies a module and its consensus version.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.upgrade.v1beta1.ModuleVersion
 */
export type ModuleVersionJson = {
  /**
   * name of the app module
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * consensus version of the app module
   *
   * @generated from field: uint64 version = 2;
   */
  version?: string;
};

/**
 * Describes the message cosmos.upgrade.v1beta1.ModuleVersion.
 * Use `create(ModuleVersionSchema)` to create a new message.
 */
export const ModuleVersionSchema: GenMessage<ModuleVersion, ModuleVersionJson> = /*@__PURE__*/
  messageDesc(file_cosmos_upgrade_v1beta1_upgrade, 3);

