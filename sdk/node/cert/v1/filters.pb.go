// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/cert/v1/filters.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CertificateFilter defines filters used to filter certificates
type CertificateFilter struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial" yaml:"serial"`
	State  State  `protobuf:"varint,3,opt,name=state,proto3,enum=akash.cert.v1.State" json:"state" yaml:"state"`
}

func (m *CertificateFilter) Reset()         { *m = CertificateFilter{} }
func (m *CertificateFilter) String() string { return proto.CompactTextString(m) }
func (*CertificateFilter) ProtoMessage()    {}
func (*CertificateFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8f3ca07a7278a9e, []int{0}
}
func (m *CertificateFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertificateFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertificateFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertificateFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateFilter.Merge(m, src)
}
func (m *CertificateFilter) XXX_Size() int {
	return m.Size()
}
func (m *CertificateFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateFilter proto.InternalMessageInfo

func (m *CertificateFilter) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CertificateFilter) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *CertificateFilter) GetState() State {
	if m != nil {
		return m.State
	}
	return CertificateStateInvalid
}

func init() {
	proto.RegisterType((*CertificateFilter)(nil), "akash.cert.v1.CertificateFilter")
}

func init() { proto.RegisterFile("akash/cert/v1/filters.proto", fileDescriptor_b8f3ca07a7278a9e) }

var fileDescriptor_b8f3ca07a7278a9e = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xcc, 0x4e, 0x2c,
	0xce, 0xd0, 0x4f, 0x4e, 0x2d, 0x2a, 0xd1, 0x2f, 0x33, 0xd4, 0x4f, 0xcb, 0xcc, 0x29, 0x49, 0x2d,
	0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x05, 0x4b, 0xea, 0x81, 0x24, 0xf5, 0xca,
	0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x32, 0xfa, 0x20, 0x16, 0x44, 0x91, 0x94, 0x64,
	0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c, 0x44, 0x02, 0xc2, 0x81, 0x4a, 0x49, 0xa0, 0x1a, 0x0e,
	0x36, 0x07, 0x2c, 0xa3, 0x74, 0x8f, 0x91, 0x4b, 0xd0, 0x39, 0xb5, 0xa8, 0x24, 0x33, 0x2d, 0x33,
	0x39, 0xb1, 0x24, 0xd5, 0x0d, 0x6c, 0xad, 0x90, 0x3b, 0x17, 0x6b, 0x7e, 0x79, 0x5e, 0x6a, 0x91,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x93, 0xe1, 0xab, 0x7b, 0xf2, 0x10, 0x81, 0x4f, 0xf7, 0xe4,
	0x79, 0x2a, 0x13, 0x73, 0x73, 0xac, 0x94, 0xc0, 0x5c, 0xa5, 0x4b, 0x5b, 0x74, 0x45, 0xa0, 0x36,
	0x39, 0xa6, 0xa4, 0x14, 0xa5, 0x16, 0x17, 0x07, 0x97, 0x14, 0x65, 0xe6, 0xa5, 0x07, 0x41, 0x94,
	0x0b, 0x19, 0x73, 0xb1, 0x15, 0xa7, 0x16, 0x65, 0x26, 0xe6, 0x48, 0x30, 0x81, 0x4d, 0x92, 0x7e,
	0x75, 0x4f, 0x1e, 0x2a, 0xf2, 0xe9, 0x9e, 0x3c, 0x2f, 0xc4, 0x28, 0x08, 0x5f, 0x29, 0x08, 0x2a,
	0x21, 0xe4, 0xca, 0xc5, 0x5a, 0x5c, 0x92, 0x58, 0x92, 0x2a, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x67,
	0x24, 0xa2, 0x87, 0xe2, 0x7b, 0xbd, 0x60, 0x90, 0x9c, 0x93, 0x24, 0xc8, 0x4d, 0x60, 0x65, 0x08,
	0x37, 0x81, 0xb9, 0x4a, 0x41, 0x10, 0x61, 0x2b, 0x96, 0x17, 0x0b, 0xe4, 0x19, 0x9c, 0xcc, 0x4f,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x36, 0x3d, 0x1f, 0x62, 0x72, 0x8a,
	0x5e, 0x66, 0xbe, 0x7e, 0x71, 0x4a, 0xb6, 0x7e, 0x5e, 0x7e, 0x4a, 0x2a, 0x2c, 0x90, 0x92, 0xd8,
	0xc0, 0x01, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xce, 0xd4, 0xbf, 0x33, 0x99, 0x01, 0x00,
	0x00,
}

func (m *CertificateFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertificateFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertificateFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintFilters(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintFilters(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilters(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CertificateFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovFilters(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovFilters(uint64(m.State))
	}
	return n
}

func sovFilters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilters(x uint64) (n int) {
	return sovFilters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertificateFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertificateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertificateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilters
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilters = fmt.Errorf("proto: unexpected end of group")
)
