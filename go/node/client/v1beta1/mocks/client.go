// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	v1beta1 "github.com/akash-network/akash-api/go/node/client/v1beta1"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Node provides a mock function with given fields:
func (_m *Client) Node() v1beta1.Node {
	ret := _m.Called()

	var r0 v1beta1.Node
	if rf, ok := ret.Get(0).(func() v1beta1.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.Node)
		}
	}

	return r0
}

// Client_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type Client_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *Client_Expecter) Node() *Client_Node_Call {
	return &Client_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *Client_Node_Call) Run(run func()) *Client_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Node_Call) Return(_a0 v1beta1.Node) *Client_Node_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Node_Call) RunAndReturn(run func() v1beta1.Node) *Client_Node_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *Client) Query() v1beta1.Query {
	ret := _m.Called()

	var r0 v1beta1.Query
	if rf, ok := ret.Get(0).(func() v1beta1.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.Query)
		}
	}

	return r0
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *Client_Expecter) Query() *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *Client_Query_Call) Run(run func()) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Query_Call) Return(_a0 v1beta1.Query) *Client_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func() v1beta1.Query) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields:
func (_m *Client) Tx() v1beta1.Tx {
	ret := _m.Called()

	var r0 v1beta1.Tx
	if rf, ok := ret.Get(0).(func() v1beta1.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.Tx)
		}
	}

	return r0
}

// Client_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type Client_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
func (_e *Client_Expecter) Tx() *Client_Tx_Call {
	return &Client_Tx_Call{Call: _e.mock.On("Tx")}
}

func (_c *Client_Tx_Call) Run(run func()) *Client_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Tx_Call) Return(_a0 v1beta1.Tx) *Client_Tx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Tx_Call) RunAndReturn(run func() v1beta1.Tx) *Client_Tx_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
