// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/deployment/v1/authz.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { messageTypeRegistry } from "../../../typeRegistry";

/**
 * DepositDeploymentAuthorization allows the grantee to deposit up to spend_limit coins from
 * the granter's account for a deployment.
 */
export interface DepositAuthorization {
  $type: "akash.deployment.v1.DepositAuthorization";
  /**
   * SpendLimit is the amount the grantee is authorized to spend from the granter's account for
   * the purpose of deployment.
   */
  spendLimit: Coin | undefined;
}

function createBaseDepositAuthorization(): DepositAuthorization {
  return {
    $type: "akash.deployment.v1.DepositAuthorization",
    spendLimit: undefined,
  };
}

export const DepositAuthorization: MessageFns<
  DepositAuthorization,
  "akash.deployment.v1.DepositAuthorization"
> = {
  $type: "akash.deployment.v1.DepositAuthorization" as const,

  encode(
    message: DepositAuthorization,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.spendLimit !== undefined) {
      Coin.encode(message.spendLimit, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DepositAuthorization {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.spendLimit = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositAuthorization {
    return {
      $type: DepositAuthorization.$type,
      spendLimit: isSet(object.spendLimit)
        ? Coin.fromJSON(object.spendLimit)
        : undefined,
    };
  },

  toJSON(message: DepositAuthorization): unknown {
    const obj: any = {};
    if (message.spendLimit !== undefined) {
      obj.spendLimit = Coin.toJSON(message.spendLimit);
    }
    return obj;
  },

  create(base?: DeepPartial<DepositAuthorization>): DepositAuthorization {
    return DepositAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DepositAuthorization>): DepositAuthorization {
    const message = createBaseDepositAuthorization();
    message.spendLimit =
      object.spendLimit !== undefined && object.spendLimit !== null
        ? Coin.fromPartial(object.spendLimit)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(DepositAuthorization.$type, DepositAuthorization);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
