// Since: cosmos-sdk 0.43

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/base/reflection/v2alpha1/reflection.proto (package cosmos.base.reflection.v2alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/base/reflection/v2alpha1/reflection.proto.
 */
export const file_cosmos_base_reflection_v2alpha1_reflection: GenFile = /*@__PURE__*/
  fileDesc("CjBjb3Ntb3MvYmFzZS9yZWZsZWN0aW9uL3YyYWxwaGExL3JlZmxlY3Rpb24ucHJvdG8SH2Nvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEisAMKDUFwcERlc2NyaXB0b3ISPwoFYXV0aG4YASABKAsyMC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkF1dGhuRGVzY3JpcHRvchI/CgVjaGFpbhgCIAEoCzIwLmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuQ2hhaW5EZXNjcmlwdG9yEj8KBWNvZGVjGAMgASgLMjAuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5Db2RlY0Rlc2NyaXB0b3ISTwoNY29uZmlndXJhdGlvbhgEIAEoCzI4LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuQ29uZmlndXJhdGlvbkRlc2NyaXB0b3ISUAoOcXVlcnlfc2VydmljZXMYBSABKAsyOC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLlF1ZXJ5U2VydmljZXNEZXNjcmlwdG9yEjkKAnR4GAYgASgLMi0uY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5UeERlc2NyaXB0b3IiXgoMVHhEZXNjcmlwdG9yEhAKCGZ1bGxuYW1lGAEgASgJEjwKBG1zZ3MYAiADKAsyLi5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLk1zZ0Rlc2NyaXB0b3IiXQoPQXV0aG5EZXNjcmlwdG9yEkoKCnNpZ25fbW9kZXMYASADKAsyNi5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLlNpZ25pbmdNb2RlRGVzY3JpcHRvciJiChVTaWduaW5nTW9kZURlc2NyaXB0b3ISDAoEbmFtZRgBIAEoCRIOCgZudW1iZXIYAiABKAUSKwojYXV0aG5faW5mb19wcm92aWRlcl9tZXRob2RfZnVsbG5hbWUYAyABKAkiHQoPQ2hhaW5EZXNjcmlwdG9yEgoKAmlkGAEgASgJIlsKD0NvZGVjRGVzY3JpcHRvchJICgppbnRlcmZhY2VzGAEgAygLMjQuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5JbnRlcmZhY2VEZXNjcmlwdG9yIvQBChNJbnRlcmZhY2VEZXNjcmlwdG9yEhAKCGZ1bGxuYW1lGAEgASgJEmoKHGludGVyZmFjZV9hY2NlcHRpbmdfbWVzc2FnZXMYAiADKAsyRC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkludGVyZmFjZUFjY2VwdGluZ01lc3NhZ2VEZXNjcmlwdG9yEl8KFmludGVyZmFjZV9pbXBsZW1lbnRlcnMYAyADKAsyPy5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkludGVyZmFjZUltcGxlbWVudGVyRGVzY3JpcHRvciJECh5JbnRlcmZhY2VJbXBsZW1lbnRlckRlc2NyaXB0b3ISEAoIZnVsbG5hbWUYASABKAkSEAoIdHlwZV91cmwYAiABKAkiVwojSW50ZXJmYWNlQWNjZXB0aW5nTWVzc2FnZURlc2NyaXB0b3ISEAoIZnVsbG5hbWUYASABKAkSHgoWZmllbGRfZGVzY3JpcHRvcl9uYW1lcxgCIAMoCSJAChdDb25maWd1cmF0aW9uRGVzY3JpcHRvchIlCh1iZWNoMzJfYWNjb3VudF9hZGRyZXNzX3ByZWZpeBgBIAEoCSIlCg1Nc2dEZXNjcmlwdG9yEhQKDG1zZ190eXBlX3VybBgBIAEoCSIbChlHZXRBdXRobkRlc2NyaXB0b3JSZXF1ZXN0Il0KGkdldEF1dGhuRGVzY3JpcHRvclJlc3BvbnNlEj8KBWF1dGhuGAEgASgLMjAuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5BdXRobkRlc2NyaXB0b3IiGwoZR2V0Q2hhaW5EZXNjcmlwdG9yUmVxdWVzdCJdChpHZXRDaGFpbkRlc2NyaXB0b3JSZXNwb25zZRI/CgVjaGFpbhgBIAEoCzIwLmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuQ2hhaW5EZXNjcmlwdG9yIhsKGUdldENvZGVjRGVzY3JpcHRvclJlcXVlc3QiXQoaR2V0Q29kZWNEZXNjcmlwdG9yUmVzcG9uc2USPwoFY29kZWMYASABKAsyMC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkNvZGVjRGVzY3JpcHRvciIjCiFHZXRDb25maWd1cmF0aW9uRGVzY3JpcHRvclJlcXVlc3QibgoiR2V0Q29uZmlndXJhdGlvbkRlc2NyaXB0b3JSZXNwb25zZRJICgZjb25maWcYASABKAsyOC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkNvbmZpZ3VyYXRpb25EZXNjcmlwdG9yIiMKIUdldFF1ZXJ5U2VydmljZXNEZXNjcmlwdG9yUmVxdWVzdCJvCiJHZXRRdWVyeVNlcnZpY2VzRGVzY3JpcHRvclJlc3BvbnNlEkkKB3F1ZXJpZXMYASABKAsyOC5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLlF1ZXJ5U2VydmljZXNEZXNjcmlwdG9yIhgKFkdldFR4RGVzY3JpcHRvclJlcXVlc3QiVAoXR2V0VHhEZXNjcmlwdG9yUmVzcG9uc2USOQoCdHgYASABKAsyLS5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLlR4RGVzY3JpcHRvciJqChdRdWVyeVNlcnZpY2VzRGVzY3JpcHRvchJPCg5xdWVyeV9zZXJ2aWNlcxgBIAMoCzI3LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuUXVlcnlTZXJ2aWNlRGVzY3JpcHRvciKGAQoWUXVlcnlTZXJ2aWNlRGVzY3JpcHRvchIQCghmdWxsbmFtZRgBIAEoCRIRCglpc19tb2R1bGUYAiABKAgSRwoHbWV0aG9kcxgDIAMoCzI2LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuUXVlcnlNZXRob2REZXNjcmlwdG9yIj4KFVF1ZXJ5TWV0aG9kRGVzY3JpcHRvchIMCgRuYW1lGAEgASgJEhcKD2Z1bGxfcXVlcnlfcGF0aBgCIAEoCTKnCgoRUmVmbGVjdGlvblNlcnZpY2USywEKEkdldEF1dGhuRGVzY3JpcHRvchI6LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuR2V0QXV0aG5EZXNjcmlwdG9yUmVxdWVzdBo7LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuR2V0QXV0aG5EZXNjcmlwdG9yUmVzcG9uc2UiPILT5JMCNhI0L2Nvc21vcy9iYXNlL3JlZmxlY3Rpb24vdjFiZXRhMS9hcHBfZGVzY3JpcHRvci9hdXRobhLLAQoSR2V0Q2hhaW5EZXNjcmlwdG9yEjouY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5HZXRDaGFpbkRlc2NyaXB0b3JSZXF1ZXN0GjsuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5HZXRDaGFpbkRlc2NyaXB0b3JSZXNwb25zZSI8gtPkkwI2EjQvY29zbW9zL2Jhc2UvcmVmbGVjdGlvbi92MWJldGExL2FwcF9kZXNjcmlwdG9yL2NoYWluEssBChJHZXRDb2RlY0Rlc2NyaXB0b3ISOi5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkdldENvZGVjRGVzY3JpcHRvclJlcXVlc3QaOy5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkdldENvZGVjRGVzY3JpcHRvclJlc3BvbnNlIjyC0+STAjYSNC9jb3Ntb3MvYmFzZS9yZWZsZWN0aW9uL3YxYmV0YTEvYXBwX2Rlc2NyaXB0b3IvY29kZWMS6wEKGkdldENvbmZpZ3VyYXRpb25EZXNjcmlwdG9yEkIuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5HZXRDb25maWd1cmF0aW9uRGVzY3JpcHRvclJlcXVlc3QaQy5jb3Ntb3MuYmFzZS5yZWZsZWN0aW9uLnYyYWxwaGExLkdldENvbmZpZ3VyYXRpb25EZXNjcmlwdG9yUmVzcG9uc2UiRILT5JMCPhI8L2Nvc21vcy9iYXNlL3JlZmxlY3Rpb24vdjFiZXRhMS9hcHBfZGVzY3JpcHRvci9jb25maWd1cmF0aW9uEuwBChpHZXRRdWVyeVNlcnZpY2VzRGVzY3JpcHRvchJCLmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuR2V0UXVlcnlTZXJ2aWNlc0Rlc2NyaXB0b3JSZXF1ZXN0GkMuY29zbW9zLmJhc2UucmVmbGVjdGlvbi52MmFscGhhMS5HZXRRdWVyeVNlcnZpY2VzRGVzY3JpcHRvclJlc3BvbnNlIkWC0+STAj8SPS9jb3Ntb3MvYmFzZS9yZWZsZWN0aW9uL3YxYmV0YTEvYXBwX2Rlc2NyaXB0b3IvcXVlcnlfc2VydmljZXMSygEKD0dldFR4RGVzY3JpcHRvchI3LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuR2V0VHhEZXNjcmlwdG9yUmVxdWVzdBo4LmNvc21vcy5iYXNlLnJlZmxlY3Rpb24udjJhbHBoYTEuR2V0VHhEZXNjcmlwdG9yUmVzcG9uc2UiRILT5JMCPhI8L2Nvc21vcy9iYXNlL3JlZmxlY3Rpb24vdjFiZXRhMS9hcHBfZGVzY3JpcHRvci90eF9kZXNjcmlwdG9yQj5aPGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvc2VydmVyL2dycGMvcmVmbGVjdGlvbi92MmFscGhhMWIGcHJvdG8z", [file_google_api_annotations]);

/**
 * AppDescriptor describes a cosmos-sdk based application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AppDescriptor
 */
export type AppDescriptor = Message<"cosmos.base.reflection.v2alpha1.AppDescriptor"> & {
  /**
   * AuthnDescriptor provides information on how to authenticate transactions on the application
   * NOTE: experimental and subject to change in future releases.
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1;
   */
  authn?: AuthnDescriptor;

  /**
   * chain provides the chain descriptor
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 2;
   */
  chain?: ChainDescriptor;

  /**
   * codec provides metadata information regarding codec related types
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 3;
   */
  codec?: CodecDescriptor;

  /**
   * configuration provides metadata information regarding the sdk.Config type
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ConfigurationDescriptor configuration = 4;
   */
  configuration?: ConfigurationDescriptor;

  /**
   * query_services provides metadata information regarding the available queriable endpoints
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.QueryServicesDescriptor query_services = 5;
   */
  queryServices?: QueryServicesDescriptor;

  /**
   * tx provides metadata information regarding how to send transactions to the given application
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.TxDescriptor tx = 6;
   */
  tx?: TxDescriptor;
};

/**
 * AppDescriptor describes a cosmos-sdk based application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AppDescriptor
 */
export type AppDescriptorJson = {
  /**
   * AuthnDescriptor provides information on how to authenticate transactions on the application
   * NOTE: experimental and subject to change in future releases.
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1;
   */
  authn?: AuthnDescriptorJson;

  /**
   * chain provides the chain descriptor
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 2;
   */
  chain?: ChainDescriptorJson;

  /**
   * codec provides metadata information regarding codec related types
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 3;
   */
  codec?: CodecDescriptorJson;

  /**
   * configuration provides metadata information regarding the sdk.Config type
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ConfigurationDescriptor configuration = 4;
   */
  configuration?: ConfigurationDescriptorJson;

  /**
   * query_services provides metadata information regarding the available queriable endpoints
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.QueryServicesDescriptor query_services = 5;
   */
  queryServices?: QueryServicesDescriptorJson;

  /**
   * tx provides metadata information regarding how to send transactions to the given application
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.TxDescriptor tx = 6;
   */
  tx?: TxDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.AppDescriptor.
 * Use `create(AppDescriptorSchema)` to create a new message.
 */
export const AppDescriptorSchema: GenMessage<AppDescriptor, AppDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 0);

/**
 * TxDescriptor describes the accepted transaction type
 *
 * @generated from message cosmos.base.reflection.v2alpha1.TxDescriptor
 */
export type TxDescriptor = Message<"cosmos.base.reflection.v2alpha1.TxDescriptor"> & {
  /**
   * fullname is the protobuf fullname of the raw transaction type (for instance the tx.Tx type)
   * it is not meant to support polymorphism of transaction types, it is supposed to be used by
   * reflection clients to understand if they can handle a specific transaction type in an application.
   *
   * @generated from field: string fullname = 1;
   */
  fullname: string;

  /**
   * msgs lists the accepted application messages (sdk.Msg)
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.MsgDescriptor msgs = 2;
   */
  msgs: MsgDescriptor[];
};

/**
 * TxDescriptor describes the accepted transaction type
 *
 * @generated from message cosmos.base.reflection.v2alpha1.TxDescriptor
 */
export type TxDescriptorJson = {
  /**
   * fullname is the protobuf fullname of the raw transaction type (for instance the tx.Tx type)
   * it is not meant to support polymorphism of transaction types, it is supposed to be used by
   * reflection clients to understand if they can handle a specific transaction type in an application.
   *
   * @generated from field: string fullname = 1;
   */
  fullname?: string;

  /**
   * msgs lists the accepted application messages (sdk.Msg)
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.MsgDescriptor msgs = 2;
   */
  msgs?: MsgDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.TxDescriptor.
 * Use `create(TxDescriptorSchema)` to create a new message.
 */
export const TxDescriptorSchema: GenMessage<TxDescriptor, TxDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 1);

/**
 * AuthnDescriptor provides information on how to sign transactions without relying
 * on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AuthnDescriptor
 */
export type AuthnDescriptor = Message<"cosmos.base.reflection.v2alpha1.AuthnDescriptor"> & {
  /**
   * sign_modes defines the supported signature algorithm
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.SigningModeDescriptor sign_modes = 1;
   */
  signModes: SigningModeDescriptor[];
};

/**
 * AuthnDescriptor provides information on how to sign transactions without relying
 * on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 *
 * @generated from message cosmos.base.reflection.v2alpha1.AuthnDescriptor
 */
export type AuthnDescriptorJson = {
  /**
   * sign_modes defines the supported signature algorithm
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.SigningModeDescriptor sign_modes = 1;
   */
  signModes?: SigningModeDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.AuthnDescriptor.
 * Use `create(AuthnDescriptorSchema)` to create a new message.
 */
export const AuthnDescriptorSchema: GenMessage<AuthnDescriptor, AuthnDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 2);

/**
 * SigningModeDescriptor provides information on a signing flow of the application
 * NOTE(fdymylja): here we could go as far as providing an entire flow on how
 * to sign a message given a SigningModeDescriptor, but it's better to think about
 * this another time
 *
 * @generated from message cosmos.base.reflection.v2alpha1.SigningModeDescriptor
 */
export type SigningModeDescriptor = Message<"cosmos.base.reflection.v2alpha1.SigningModeDescriptor"> & {
  /**
   * name defines the unique name of the signing mode
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * number is the unique int32 identifier for the sign_mode enum
   *
   * @generated from field: int32 number = 2;
   */
  number: number;

  /**
   * authn_info_provider_method_fullname defines the fullname of the method to call to get
   * the metadata required to authenticate using the provided sign_modes
   *
   * @generated from field: string authn_info_provider_method_fullname = 3;
   */
  authnInfoProviderMethodFullname: string;
};

/**
 * SigningModeDescriptor provides information on a signing flow of the application
 * NOTE(fdymylja): here we could go as far as providing an entire flow on how
 * to sign a message given a SigningModeDescriptor, but it's better to think about
 * this another time
 *
 * @generated from message cosmos.base.reflection.v2alpha1.SigningModeDescriptor
 */
export type SigningModeDescriptorJson = {
  /**
   * name defines the unique name of the signing mode
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * number is the unique int32 identifier for the sign_mode enum
   *
   * @generated from field: int32 number = 2;
   */
  number?: number;

  /**
   * authn_info_provider_method_fullname defines the fullname of the method to call to get
   * the metadata required to authenticate using the provided sign_modes
   *
   * @generated from field: string authn_info_provider_method_fullname = 3;
   */
  authnInfoProviderMethodFullname?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.SigningModeDescriptor.
 * Use `create(SigningModeDescriptorSchema)` to create a new message.
 */
export const SigningModeDescriptorSchema: GenMessage<SigningModeDescriptor, SigningModeDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 3);

/**
 * ChainDescriptor describes chain information of the application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ChainDescriptor
 */
export type ChainDescriptor = Message<"cosmos.base.reflection.v2alpha1.ChainDescriptor"> & {
  /**
   * id is the chain id
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * ChainDescriptor describes chain information of the application
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ChainDescriptor
 */
export type ChainDescriptorJson = {
  /**
   * id is the chain id
   *
   * @generated from field: string id = 1;
   */
  id?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.ChainDescriptor.
 * Use `create(ChainDescriptorSchema)` to create a new message.
 */
export const ChainDescriptorSchema: GenMessage<ChainDescriptor, ChainDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 4);

/**
 * CodecDescriptor describes the registered interfaces and provides metadata information on the types
 *
 * @generated from message cosmos.base.reflection.v2alpha1.CodecDescriptor
 */
export type CodecDescriptor = Message<"cosmos.base.reflection.v2alpha1.CodecDescriptor"> & {
  /**
   * interfaces is a list of the registerted interfaces descriptors
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceDescriptor interfaces = 1;
   */
  interfaces: InterfaceDescriptor[];
};

/**
 * CodecDescriptor describes the registered interfaces and provides metadata information on the types
 *
 * @generated from message cosmos.base.reflection.v2alpha1.CodecDescriptor
 */
export type CodecDescriptorJson = {
  /**
   * interfaces is a list of the registerted interfaces descriptors
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceDescriptor interfaces = 1;
   */
  interfaces?: InterfaceDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.CodecDescriptor.
 * Use `create(CodecDescriptorSchema)` to create a new message.
 */
export const CodecDescriptorSchema: GenMessage<CodecDescriptor, CodecDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 5);

/**
 * InterfaceDescriptor describes the implementation of an interface
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceDescriptor
 */
export type InterfaceDescriptor = Message<"cosmos.base.reflection.v2alpha1.InterfaceDescriptor"> & {
  /**
   * fullname is the name of the interface
   *
   * @generated from field: string fullname = 1;
   */
  fullname: string;

  /**
   * interface_accepting_messages contains information regarding the proto messages which contain the interface as
   * google.protobuf.Any field
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2;
   */
  interfaceAcceptingMessages: InterfaceAcceptingMessageDescriptor[];

  /**
   * interface_implementers is a list of the descriptors of the interface implementers
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor interface_implementers = 3;
   */
  interfaceImplementers: InterfaceImplementerDescriptor[];
};

/**
 * InterfaceDescriptor describes the implementation of an interface
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceDescriptor
 */
export type InterfaceDescriptorJson = {
  /**
   * fullname is the name of the interface
   *
   * @generated from field: string fullname = 1;
   */
  fullname?: string;

  /**
   * interface_accepting_messages contains information regarding the proto messages which contain the interface as
   * google.protobuf.Any field
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2;
   */
  interfaceAcceptingMessages?: InterfaceAcceptingMessageDescriptorJson[];

  /**
   * interface_implementers is a list of the descriptors of the interface implementers
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor interface_implementers = 3;
   */
  interfaceImplementers?: InterfaceImplementerDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.InterfaceDescriptor.
 * Use `create(InterfaceDescriptorSchema)` to create a new message.
 */
export const InterfaceDescriptorSchema: GenMessage<InterfaceDescriptor, InterfaceDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 6);

/**
 * InterfaceImplementerDescriptor describes an interface implementer
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor
 */
export type InterfaceImplementerDescriptor = Message<"cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor"> & {
  /**
   * fullname is the protobuf queryable name of the interface implementer
   *
   * @generated from field: string fullname = 1;
   */
  fullname: string;

  /**
   * type_url defines the type URL used when marshalling the type as any
   * this is required so we can provide type safe google.protobuf.Any marshalling and
   * unmarshalling, making sure that we don't accept just 'any' type
   * in our interface fields
   *
   * @generated from field: string type_url = 2;
   */
  typeUrl: string;
};

/**
 * InterfaceImplementerDescriptor describes an interface implementer
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor
 */
export type InterfaceImplementerDescriptorJson = {
  /**
   * fullname is the protobuf queryable name of the interface implementer
   *
   * @generated from field: string fullname = 1;
   */
  fullname?: string;

  /**
   * type_url defines the type URL used when marshalling the type as any
   * this is required so we can provide type safe google.protobuf.Any marshalling and
   * unmarshalling, making sure that we don't accept just 'any' type
   * in our interface fields
   *
   * @generated from field: string type_url = 2;
   */
  typeUrl?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.
 * Use `create(InterfaceImplementerDescriptorSchema)` to create a new message.
 */
export const InterfaceImplementerDescriptorSchema: GenMessage<InterfaceImplementerDescriptor, InterfaceImplementerDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 7);

/**
 * InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
 * an interface represented as a google.protobuf.Any
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor
 */
export type InterfaceAcceptingMessageDescriptor = Message<"cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor"> & {
  /**
   * fullname is the protobuf fullname of the type containing the interface
   *
   * @generated from field: string fullname = 1;
   */
  fullname: string;

  /**
   * field_descriptor_names is a list of the protobuf name (not fullname) of the field
   * which contains the interface as google.protobuf.Any (the interface is the same, but
   * it can be in multiple fields of the same proto message)
   *
   * @generated from field: repeated string field_descriptor_names = 2;
   */
  fieldDescriptorNames: string[];
};

/**
 * InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
 * an interface represented as a google.protobuf.Any
 *
 * @generated from message cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor
 */
export type InterfaceAcceptingMessageDescriptorJson = {
  /**
   * fullname is the protobuf fullname of the type containing the interface
   *
   * @generated from field: string fullname = 1;
   */
  fullname?: string;

  /**
   * field_descriptor_names is a list of the protobuf name (not fullname) of the field
   * which contains the interface as google.protobuf.Any (the interface is the same, but
   * it can be in multiple fields of the same proto message)
   *
   * @generated from field: repeated string field_descriptor_names = 2;
   */
  fieldDescriptorNames?: string[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.
 * Use `create(InterfaceAcceptingMessageDescriptorSchema)` to create a new message.
 */
export const InterfaceAcceptingMessageDescriptorSchema: GenMessage<InterfaceAcceptingMessageDescriptor, InterfaceAcceptingMessageDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 8);

/**
 * ConfigurationDescriptor contains metadata information on the sdk.Config
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ConfigurationDescriptor
 */
export type ConfigurationDescriptor = Message<"cosmos.base.reflection.v2alpha1.ConfigurationDescriptor"> & {
  /**
   * bech32_account_address_prefix is the account address prefix
   *
   * @generated from field: string bech32_account_address_prefix = 1;
   */
  bech32AccountAddressPrefix: string;
};

/**
 * ConfigurationDescriptor contains metadata information on the sdk.Config
 *
 * @generated from message cosmos.base.reflection.v2alpha1.ConfigurationDescriptor
 */
export type ConfigurationDescriptorJson = {
  /**
   * bech32_account_address_prefix is the account address prefix
   *
   * @generated from field: string bech32_account_address_prefix = 1;
   */
  bech32AccountAddressPrefix?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.
 * Use `create(ConfigurationDescriptorSchema)` to create a new message.
 */
export const ConfigurationDescriptorSchema: GenMessage<ConfigurationDescriptor, ConfigurationDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 9);

/**
 * MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
 *
 * @generated from message cosmos.base.reflection.v2alpha1.MsgDescriptor
 */
export type MsgDescriptor = Message<"cosmos.base.reflection.v2alpha1.MsgDescriptor"> & {
  /**
   * msg_type_url contains the TypeURL of a sdk.Msg.
   *
   * @generated from field: string msg_type_url = 1;
   */
  msgTypeUrl: string;
};

/**
 * MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
 *
 * @generated from message cosmos.base.reflection.v2alpha1.MsgDescriptor
 */
export type MsgDescriptorJson = {
  /**
   * msg_type_url contains the TypeURL of a sdk.Msg.
   *
   * @generated from field: string msg_type_url = 1;
   */
  msgTypeUrl?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.MsgDescriptor.
 * Use `create(MsgDescriptorSchema)` to create a new message.
 */
export const MsgDescriptorSchema: GenMessage<MsgDescriptor, MsgDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 10);

/**
 * GetAuthnDescriptorRequest is the request used for the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest
 */
export type GetAuthnDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest"> & {
};

/**
 * GetAuthnDescriptorRequest is the request used for the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest
 */
export type GetAuthnDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest.
 * Use `create(GetAuthnDescriptorRequestSchema)` to create a new message.
 */
export const GetAuthnDescriptorRequestSchema: GenMessage<GetAuthnDescriptorRequest, GetAuthnDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 11);

/**
 * GetAuthnDescriptorResponse is the response returned by the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse
 */
export type GetAuthnDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse"> & {
  /**
   * authn describes how to authenticate to the application when sending transactions
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1;
   */
  authn?: AuthnDescriptor;
};

/**
 * GetAuthnDescriptorResponse is the response returned by the GetAuthnDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse
 */
export type GetAuthnDescriptorResponseJson = {
  /**
   * authn describes how to authenticate to the application when sending transactions
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1;
   */
  authn?: AuthnDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.
 * Use `create(GetAuthnDescriptorResponseSchema)` to create a new message.
 */
export const GetAuthnDescriptorResponseSchema: GenMessage<GetAuthnDescriptorResponse, GetAuthnDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 12);

/**
 * GetChainDescriptorRequest is the request used for the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest
 */
export type GetChainDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest"> & {
};

/**
 * GetChainDescriptorRequest is the request used for the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest
 */
export type GetChainDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest.
 * Use `create(GetChainDescriptorRequestSchema)` to create a new message.
 */
export const GetChainDescriptorRequestSchema: GenMessage<GetChainDescriptorRequest, GetChainDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 13);

/**
 * GetChainDescriptorResponse is the response returned by the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse
 */
export type GetChainDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse"> & {
  /**
   * chain describes application chain information
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 1;
   */
  chain?: ChainDescriptor;
};

/**
 * GetChainDescriptorResponse is the response returned by the GetChainDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse
 */
export type GetChainDescriptorResponseJson = {
  /**
   * chain describes application chain information
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 1;
   */
  chain?: ChainDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.
 * Use `create(GetChainDescriptorResponseSchema)` to create a new message.
 */
export const GetChainDescriptorResponseSchema: GenMessage<GetChainDescriptorResponse, GetChainDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 14);

/**
 * GetCodecDescriptorRequest is the request used for the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest
 */
export type GetCodecDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest"> & {
};

/**
 * GetCodecDescriptorRequest is the request used for the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest
 */
export type GetCodecDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest.
 * Use `create(GetCodecDescriptorRequestSchema)` to create a new message.
 */
export const GetCodecDescriptorRequestSchema: GenMessage<GetCodecDescriptorRequest, GetCodecDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 15);

/**
 * GetCodecDescriptorResponse is the response returned by the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse
 */
export type GetCodecDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse"> & {
  /**
   * codec describes the application codec such as registered interfaces and implementations
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 1;
   */
  codec?: CodecDescriptor;
};

/**
 * GetCodecDescriptorResponse is the response returned by the GetCodecDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse
 */
export type GetCodecDescriptorResponseJson = {
  /**
   * codec describes the application codec such as registered interfaces and implementations
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 1;
   */
  codec?: CodecDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.
 * Use `create(GetCodecDescriptorResponseSchema)` to create a new message.
 */
export const GetCodecDescriptorResponseSchema: GenMessage<GetCodecDescriptorResponse, GetCodecDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 16);

/**
 * GetConfigurationDescriptorRequest is the request used for the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest
 */
export type GetConfigurationDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest"> & {
};

/**
 * GetConfigurationDescriptorRequest is the request used for the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest
 */
export type GetConfigurationDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest.
 * Use `create(GetConfigurationDescriptorRequestSchema)` to create a new message.
 */
export const GetConfigurationDescriptorRequestSchema: GenMessage<GetConfigurationDescriptorRequest, GetConfigurationDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 17);

/**
 * GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse
 */
export type GetConfigurationDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse"> & {
  /**
   * config describes the application's sdk.Config
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1;
   */
  config?: ConfigurationDescriptor;
};

/**
 * GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse
 */
export type GetConfigurationDescriptorResponseJson = {
  /**
   * config describes the application's sdk.Config
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1;
   */
  config?: ConfigurationDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.
 * Use `create(GetConfigurationDescriptorResponseSchema)` to create a new message.
 */
export const GetConfigurationDescriptorResponseSchema: GenMessage<GetConfigurationDescriptorResponse, GetConfigurationDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 18);

/**
 * GetQueryServicesDescriptorRequest is the request used for the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest
 */
export type GetQueryServicesDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest"> & {
};

/**
 * GetQueryServicesDescriptorRequest is the request used for the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest
 */
export type GetQueryServicesDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest.
 * Use `create(GetQueryServicesDescriptorRequestSchema)` to create a new message.
 */
export const GetQueryServicesDescriptorRequestSchema: GenMessage<GetQueryServicesDescriptorRequest, GetQueryServicesDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 19);

/**
 * GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse
 */
export type GetQueryServicesDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse"> & {
  /**
   * queries provides information on the available queryable services
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1;
   */
  queries?: QueryServicesDescriptor;
};

/**
 * GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse
 */
export type GetQueryServicesDescriptorResponseJson = {
  /**
   * queries provides information on the available queryable services
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1;
   */
  queries?: QueryServicesDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.
 * Use `create(GetQueryServicesDescriptorResponseSchema)` to create a new message.
 */
export const GetQueryServicesDescriptorResponseSchema: GenMessage<GetQueryServicesDescriptorResponse, GetQueryServicesDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 20);

/**
 * GetTxDescriptorRequest is the request used for the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest
 */
export type GetTxDescriptorRequest = Message<"cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest"> & {
};

/**
 * GetTxDescriptorRequest is the request used for the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest
 */
export type GetTxDescriptorRequestJson = {
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest.
 * Use `create(GetTxDescriptorRequestSchema)` to create a new message.
 */
export const GetTxDescriptorRequestSchema: GenMessage<GetTxDescriptorRequest, GetTxDescriptorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 21);

/**
 * GetTxDescriptorResponse is the response returned by the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse
 */
export type GetTxDescriptorResponse = Message<"cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse"> & {
  /**
   * tx provides information on msgs that can be forwarded to the application
   * alongside the accepted transaction protobuf type
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.TxDescriptor tx = 1;
   */
  tx?: TxDescriptor;
};

/**
 * GetTxDescriptorResponse is the response returned by the GetTxDescriptor RPC
 *
 * @generated from message cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse
 */
export type GetTxDescriptorResponseJson = {
  /**
   * tx provides information on msgs that can be forwarded to the application
   * alongside the accepted transaction protobuf type
   *
   * @generated from field: cosmos.base.reflection.v2alpha1.TxDescriptor tx = 1;
   */
  tx?: TxDescriptorJson;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.
 * Use `create(GetTxDescriptorResponseSchema)` to create a new message.
 */
export const GetTxDescriptorResponseSchema: GenMessage<GetTxDescriptorResponse, GetTxDescriptorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 22);

/**
 * QueryServicesDescriptor contains the list of cosmos-sdk queriable services
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServicesDescriptor
 */
export type QueryServicesDescriptor = Message<"cosmos.base.reflection.v2alpha1.QueryServicesDescriptor"> & {
  /**
   * query_services is a list of cosmos-sdk QueryServiceDescriptor
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.QueryServiceDescriptor query_services = 1;
   */
  queryServices: QueryServiceDescriptor[];
};

/**
 * QueryServicesDescriptor contains the list of cosmos-sdk queriable services
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServicesDescriptor
 */
export type QueryServicesDescriptorJson = {
  /**
   * query_services is a list of cosmos-sdk QueryServiceDescriptor
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.QueryServiceDescriptor query_services = 1;
   */
  queryServices?: QueryServiceDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.
 * Use `create(QueryServicesDescriptorSchema)` to create a new message.
 */
export const QueryServicesDescriptorSchema: GenMessage<QueryServicesDescriptor, QueryServicesDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 23);

/**
 * QueryServiceDescriptor describes a cosmos-sdk queryable service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServiceDescriptor
 */
export type QueryServiceDescriptor = Message<"cosmos.base.reflection.v2alpha1.QueryServiceDescriptor"> & {
  /**
   * fullname is the protobuf fullname of the service descriptor
   *
   * @generated from field: string fullname = 1;
   */
  fullname: string;

  /**
   * is_module describes if this service is actually exposed by an application's module
   *
   * @generated from field: bool is_module = 2;
   */
  isModule: boolean;

  /**
   * methods provides a list of query service methods
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.QueryMethodDescriptor methods = 3;
   */
  methods: QueryMethodDescriptor[];
};

/**
 * QueryServiceDescriptor describes a cosmos-sdk queryable service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryServiceDescriptor
 */
export type QueryServiceDescriptorJson = {
  /**
   * fullname is the protobuf fullname of the service descriptor
   *
   * @generated from field: string fullname = 1;
   */
  fullname?: string;

  /**
   * is_module describes if this service is actually exposed by an application's module
   *
   * @generated from field: bool is_module = 2;
   */
  isModule?: boolean;

  /**
   * methods provides a list of query service methods
   *
   * @generated from field: repeated cosmos.base.reflection.v2alpha1.QueryMethodDescriptor methods = 3;
   */
  methods?: QueryMethodDescriptorJson[];
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.
 * Use `create(QueryServiceDescriptorSchema)` to create a new message.
 */
export const QueryServiceDescriptorSchema: GenMessage<QueryServiceDescriptor, QueryServiceDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 24);

/**
 * QueryMethodDescriptor describes a queryable method of a query service
 * no other info is provided beside method name and tendermint queryable path
 * because it would be redundant with the grpc reflection service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryMethodDescriptor
 */
export type QueryMethodDescriptor = Message<"cosmos.base.reflection.v2alpha1.QueryMethodDescriptor"> & {
  /**
   * name is the protobuf name (not fullname) of the method
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * full_query_path is the path that can be used to query
   * this method via tendermint abci.Query
   *
   * @generated from field: string full_query_path = 2;
   */
  fullQueryPath: string;
};

/**
 * QueryMethodDescriptor describes a queryable method of a query service
 * no other info is provided beside method name and tendermint queryable path
 * because it would be redundant with the grpc reflection service
 *
 * @generated from message cosmos.base.reflection.v2alpha1.QueryMethodDescriptor
 */
export type QueryMethodDescriptorJson = {
  /**
   * name is the protobuf name (not fullname) of the method
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * full_query_path is the path that can be used to query
   * this method via tendermint abci.Query
   *
   * @generated from field: string full_query_path = 2;
   */
  fullQueryPath?: string;
};

/**
 * Describes the message cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.
 * Use `create(QueryMethodDescriptorSchema)` to create a new message.
 */
export const QueryMethodDescriptorSchema: GenMessage<QueryMethodDescriptor, QueryMethodDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_base_reflection_v2alpha1_reflection, 25);

/**
 * ReflectionService defines a service for application reflection.
 *
 * @generated from service cosmos.base.reflection.v2alpha1.ReflectionService
 */
export const ReflectionService: GenService<{
  /**
   * GetAuthnDescriptor returns information on how to authenticate transactions in the application
   * NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
   * future releases of the cosmos-sdk.
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetAuthnDescriptor
   */
  getAuthnDescriptor: {
    methodKind: "unary";
    input: typeof GetAuthnDescriptorRequestSchema;
    output: typeof GetAuthnDescriptorResponseSchema;
  },
  /**
   * GetChainDescriptor returns the description of the chain
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetChainDescriptor
   */
  getChainDescriptor: {
    methodKind: "unary";
    input: typeof GetChainDescriptorRequestSchema;
    output: typeof GetChainDescriptorResponseSchema;
  },
  /**
   * GetCodecDescriptor returns the descriptor of the codec of the application
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetCodecDescriptor
   */
  getCodecDescriptor: {
    methodKind: "unary";
    input: typeof GetCodecDescriptorRequestSchema;
    output: typeof GetCodecDescriptorResponseSchema;
  },
  /**
   * GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetConfigurationDescriptor
   */
  getConfigurationDescriptor: {
    methodKind: "unary";
    input: typeof GetConfigurationDescriptorRequestSchema;
    output: typeof GetConfigurationDescriptorResponseSchema;
  },
  /**
   * GetQueryServicesDescriptor returns the available gRPC queryable services of the application
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetQueryServicesDescriptor
   */
  getQueryServicesDescriptor: {
    methodKind: "unary";
    input: typeof GetQueryServicesDescriptorRequestSchema;
    output: typeof GetQueryServicesDescriptorResponseSchema;
  },
  /**
   * GetTxDescriptor returns information on the used transaction object and available msgs that can be used
   *
   * @generated from rpc cosmos.base.reflection.v2alpha1.ReflectionService.GetTxDescriptor
   */
  getTxDescriptor: {
    methodKind: "unary";
    input: typeof GetTxDescriptorRequestSchema;
    output: typeof GetTxDescriptorResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_base_reflection_v2alpha1_reflection, 0);

