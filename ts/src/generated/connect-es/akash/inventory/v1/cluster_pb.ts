// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file akash/inventory/v1/cluster.proto (package akash.inventory.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Node } from './node_pb.js';
import { Storage } from './storage_pb.js';

/**
 * Cluster reports inventory across entire cluster
 *
 * @generated from message akash.inventory.v1.Cluster
 */
export class Cluster extends Message<Cluster> {
  /**
   * @generated from field: repeated akash.inventory.v1.Node nodes = 1;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated akash.inventory.v1.Storage storage = 2;
   */
  storage: Storage[] = [];

  constructor(data?: PartialMessage<Cluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.inventory.v1.Cluster';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'nodes', kind: 'message', T: Node, repeated: true },
    { no: 2, name: 'storage', kind: 'message', T: Storage, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Cluster {
    return new Cluster().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Cluster {
    return new Cluster().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Cluster {
    return new Cluster().fromJsonString(jsonString, options);
  }

  static equals(
    a: Cluster | PlainMessage<Cluster> | undefined,
    b: Cluster | PlainMessage<Cluster> | undefined,
  ): boolean {
    return proto3.util.equals(Cluster, a, b);
  }
}
