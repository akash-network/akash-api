// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/app/v1alpha1/module.proto (package cosmos.app.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { extDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { MessageOptions } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_descriptor } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/app/v1alpha1/module.proto.
 */
export const file_cosmos_app_v1alpha1_module: GenFile = /*@__PURE__*/
  fileDesc("CiBjb3Ntb3MvYXBwL3YxYWxwaGExL21vZHVsZS5wcm90bxITY29zbW9zLmFwcC52MWFscGhhMSKhAQoQTW9kdWxlRGVzY3JpcHRvchIRCglnb19pbXBvcnQYASABKAkSOgoLdXNlX3BhY2thZ2UYAiADKAsyJS5jb3Ntb3MuYXBwLnYxYWxwaGExLlBhY2thZ2VSZWZlcmVuY2USPgoQY2FuX21pZ3JhdGVfZnJvbRgDIAMoCzIkLmNvc21vcy5hcHAudjFhbHBoYTEuTWlncmF0ZUZyb21JbmZvIjIKEFBhY2thZ2VSZWZlcmVuY2USDAoEbmFtZRgBIAEoCRIQCghyZXZpc2lvbhgCIAEoDSIhCg9NaWdyYXRlRnJvbUluZm8SDgoGbW9kdWxlGAEgASgJOmEKBm1vZHVsZRIfLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0aW9ucxiH6KIbIAEoCzIlLmNvc21vcy5hcHAudjFhbHBoYTEuTW9kdWxlRGVzY3JpcHRvclIGbW9kdWxlYgZwcm90bzM", [file_google_protobuf_descriptor]);

/**
 * ModuleDescriptor describes an app module.
 *
 * @generated from message cosmos.app.v1alpha1.ModuleDescriptor
 */
export type ModuleDescriptor = Message<"cosmos.app.v1alpha1.ModuleDescriptor"> & {
  /**
   * go_import names the package that should be imported by an app to load the
   * module in the runtime module registry. It is required to make debugging
   * of configuration errors easier for users.
   *
   * @generated from field: string go_import = 1;
   */
  goImport: string;

  /**
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.PackageReference use_package = 2;
   */
  usePackage: PackageReference[];

  /**
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3;
   */
  canMigrateFrom: MigrateFromInfo[];
};

/**
 * ModuleDescriptor describes an app module.
 *
 * @generated from message cosmos.app.v1alpha1.ModuleDescriptor
 */
export type ModuleDescriptorJson = {
  /**
   * go_import names the package that should be imported by an app to load the
   * module in the runtime module registry. It is required to make debugging
   * of configuration errors easier for users.
   *
   * @generated from field: string go_import = 1;
   */
  goImport?: string;

  /**
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.PackageReference use_package = 2;
   */
  usePackage?: PackageReferenceJson[];

  /**
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3;
   */
  canMigrateFrom?: MigrateFromInfoJson[];
};

/**
 * Describes the message cosmos.app.v1alpha1.ModuleDescriptor.
 * Use `create(ModuleDescriptorSchema)` to create a new message.
 */
export const ModuleDescriptorSchema: GenMessage<ModuleDescriptor, ModuleDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_module, 0);

/**
 * PackageReference is a reference to a protobuf package used by a module.
 *
 * @generated from message cosmos.app.v1alpha1.PackageReference
 */
export type PackageReference = Message<"cosmos.app.v1alpha1.PackageReference"> & {
  /**
   * name is the fully-qualified name of the package.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * revision is the optional revision of the package that is being used.
   * Protobuf packages used in Cosmos should generally have a major version
   * as the last part of the package name, ex. foo.bar.baz.v1.
   * The revision of a package can be thought of as the minor version of a
   * package which has additional backwards compatible definitions that weren't
   * present in a previous version.
   *
   * A package should indicate its revision with a source code comment
   * above the package declaration in one of its files containing the
   * text "Revision N" where N is an integer revision. All packages start
   * at revision 0 the first time they are released in a module.
   *
   * When a new version of a module is released and items are added to existing
   * .proto files, these definitions should contain comments of the form
   * "Since Revision N" where N is an integer revision.
   *
   * When the module runtime starts up, it will check the pinned proto
   * image and panic if there are runtime protobuf definitions that are not
   * in the pinned descriptor which do not have
   * a "Since Revision N" comment or have a "Since Revision N" comment where
   * N is <= to the revision specified here. This indicates that the protobuf
   * files have been updated, but the pinned file descriptor hasn't.
   *
   * If there are items in the pinned file descriptor with a revision
   * greater than the value indicated here, this will also cause a panic
   * as it may mean that the pinned descriptor for a legacy module has been
   * improperly updated or that there is some other versioning discrepancy.
   * Runtime protobuf definitions will also be checked for compatibility
   * with pinned file descriptors to make sure there are no incompatible changes.
   *
   * This behavior ensures that:
   * * pinned proto images are up-to-date
   * * protobuf files are carefully annotated with revision comments which
   *   are important good client UX
   * * protobuf files are changed in backwards and forwards compatible ways
   *
   * @generated from field: uint32 revision = 2;
   */
  revision: number;
};

/**
 * PackageReference is a reference to a protobuf package used by a module.
 *
 * @generated from message cosmos.app.v1alpha1.PackageReference
 */
export type PackageReferenceJson = {
  /**
   * name is the fully-qualified name of the package.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * revision is the optional revision of the package that is being used.
   * Protobuf packages used in Cosmos should generally have a major version
   * as the last part of the package name, ex. foo.bar.baz.v1.
   * The revision of a package can be thought of as the minor version of a
   * package which has additional backwards compatible definitions that weren't
   * present in a previous version.
   *
   * A package should indicate its revision with a source code comment
   * above the package declaration in one of its files containing the
   * text "Revision N" where N is an integer revision. All packages start
   * at revision 0 the first time they are released in a module.
   *
   * When a new version of a module is released and items are added to existing
   * .proto files, these definitions should contain comments of the form
   * "Since Revision N" where N is an integer revision.
   *
   * When the module runtime starts up, it will check the pinned proto
   * image and panic if there are runtime protobuf definitions that are not
   * in the pinned descriptor which do not have
   * a "Since Revision N" comment or have a "Since Revision N" comment where
   * N is <= to the revision specified here. This indicates that the protobuf
   * files have been updated, but the pinned file descriptor hasn't.
   *
   * If there are items in the pinned file descriptor with a revision
   * greater than the value indicated here, this will also cause a panic
   * as it may mean that the pinned descriptor for a legacy module has been
   * improperly updated or that there is some other versioning discrepancy.
   * Runtime protobuf definitions will also be checked for compatibility
   * with pinned file descriptors to make sure there are no incompatible changes.
   *
   * This behavior ensures that:
   * * pinned proto images are up-to-date
   * * protobuf files are carefully annotated with revision comments which
   *   are important good client UX
   * * protobuf files are changed in backwards and forwards compatible ways
   *
   * @generated from field: uint32 revision = 2;
   */
  revision?: number;
};

/**
 * Describes the message cosmos.app.v1alpha1.PackageReference.
 * Use `create(PackageReferenceSchema)` to create a new message.
 */
export const PackageReferenceSchema: GenMessage<PackageReference, PackageReferenceJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_module, 1);

/**
 * MigrateFromInfo is information on a module version that a newer module
 * can migrate from.
 *
 * @generated from message cosmos.app.v1alpha1.MigrateFromInfo
 */
export type MigrateFromInfo = Message<"cosmos.app.v1alpha1.MigrateFromInfo"> & {
  /**
   * module is the fully-qualified protobuf name of the module config object
   * for the previous module version, ex: "cosmos.group.module.v1.Module".
   *
   * @generated from field: string module = 1;
   */
  module: string;
};

/**
 * MigrateFromInfo is information on a module version that a newer module
 * can migrate from.
 *
 * @generated from message cosmos.app.v1alpha1.MigrateFromInfo
 */
export type MigrateFromInfoJson = {
  /**
   * module is the fully-qualified protobuf name of the module config object
   * for the previous module version, ex: "cosmos.group.module.v1.Module".
   *
   * @generated from field: string module = 1;
   */
  module?: string;
};

/**
 * Describes the message cosmos.app.v1alpha1.MigrateFromInfo.
 * Use `create(MigrateFromInfoSchema)` to create a new message.
 */
export const MigrateFromInfoSchema: GenMessage<MigrateFromInfo, MigrateFromInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_module, 2);

/**
 * module indicates that this proto type is a config object for an app module
 * and optionally provides other descriptive information about the module.
 * It is recommended that a new module config object and go module is versioned
 * for every state machine breaking version of a module. The recommended
 * pattern for doing this is to put module config objects in a separate proto
 * package from the API they expose. Ex: the cosmos.group.v1 API would be
 * exposed by module configs cosmos.group.module.v1, cosmos.group.module.v2, etc.
 *
 * @generated from extension: cosmos.app.v1alpha1.ModuleDescriptor module = 57193479;
 */
export const module: GenExtension<MessageOptions, ModuleDescriptor> = /*@__PURE__*/
  extDesc(file_cosmos_app_v1alpha1_module, 0);

