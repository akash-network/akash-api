// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/market/v1/lease.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of lease
type LeaseState int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	LeaseStateInvalid LeaseState = 0
	// LeaseActive denotes state for lease active
	LeaseActive LeaseState = 1
	// LeaseInsufficientFunds denotes state for lease insufficient_funds
	LeaseInsufficientFunds LeaseState = 2
	// LeaseClosed denotes state for lease closed
	LeaseClosed LeaseState = 3
)

var LeaseState_name = map[int32]string{
	0: "lease_invalid",
	1: "lease_active",
	2: "lease_insufficient_funds",
	3: "lease_closed",
}

var LeaseState_value = map[string]int32{
	"lease_invalid":            0,
	"lease_active":             1,
	"lease_insufficient_funds": 2,
	"lease_closed":             3,
}

func (x LeaseState) String() string {
	return proto.EnumName(LeaseState_name, int32(x))
}

func (LeaseState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_122c076f440f07dc, []int{0}
}

// LeaseID stores bid details of lease
type LeaseID struct {
	Owner    string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	DSeq     uint64 `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
	GSeq     uint32 `protobuf:"varint,3,opt,name=gseq,proto3" json:"gseq" yaml:"gseq"`
	OSeq     uint32 `protobuf:"varint,4,opt,name=oseq,proto3" json:"oseq" yaml:"oseq"`
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider" yaml:"provider"`
}

func (m *LeaseID) Reset()      { *m = LeaseID{} }
func (*LeaseID) ProtoMessage() {}
func (*LeaseID) Descriptor() ([]byte, []int) {
	return fileDescriptor_122c076f440f07dc, []int{0}
}
func (m *LeaseID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseID.Merge(m, src)
}
func (m *LeaseID) XXX_Size() int {
	return m.Size()
}
func (m *LeaseID) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseID.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseID proto.InternalMessageInfo

func (m *LeaseID) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LeaseID) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

func (m *LeaseID) GetGSeq() uint32 {
	if m != nil {
		return m.GSeq
	}
	return 0
}

func (m *LeaseID) GetOSeq() uint32 {
	if m != nil {
		return m.OSeq
	}
	return 0
}

func (m *LeaseID) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

// Lease stores LeaseID, state of lease and price
type Lease struct {
	ID        LeaseID       `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	State     LeaseState    `protobuf:"varint,2,opt,name=state,proto3,enum=akash.market.v1.LeaseState" json:"state" yaml:"state"`
	Price     types.DecCoin `protobuf:"bytes,3,opt,name=price,proto3" json:"price" yaml:"price"`
	CreatedAt int64         `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at" yaml:"created_at"`
	ClosedOn  int64         `protobuf:"varint,5,opt,name=closed_on,json=closedOn,proto3" json:"closed_on" yaml:"closed_on"`
}

func (m *Lease) Reset()      { *m = Lease{} }
func (*Lease) ProtoMessage() {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_122c076f440f07dc, []int{1}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return m.Size()
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetID() LeaseID {
	if m != nil {
		return m.ID
	}
	return LeaseID{}
}

func (m *Lease) GetState() LeaseState {
	if m != nil {
		return m.State
	}
	return LeaseStateInvalid
}

func (m *Lease) GetPrice() types.DecCoin {
	if m != nil {
		return m.Price
	}
	return types.DecCoin{}
}

func (m *Lease) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Lease) GetClosedOn() int64 {
	if m != nil {
		return m.ClosedOn
	}
	return 0
}

func init() {
	proto.RegisterEnum("akash.market.v1.LeaseState", LeaseState_name, LeaseState_value)
	proto.RegisterType((*LeaseID)(nil), "akash.market.v1.LeaseID")
	proto.RegisterType((*Lease)(nil), "akash.market.v1.Lease")
}

func init() { proto.RegisterFile("akash/market/v1/lease.proto", fileDescriptor_122c076f440f07dc) }

var fileDescriptor_122c076f440f07dc = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0xc7, 0x6d, 0x27, 0xf9, 0x3e, 0xb2, 0x81, 0x12, 0x2c, 0x5a, 0x05, 0xd3, 0x7a, 0x83, 0x7b,
	0x89, 0x2a, 0xd5, 0x56, 0xe0, 0xd0, 0x96, 0x43, 0x25, 0x4c, 0x54, 0x84, 0x84, 0x84, 0xea, 0xdc,
	0x7a, 0x89, 0x8c, 0x77, 0x71, 0x57, 0x04, 0x2f, 0x78, 0x4d, 0xaa, 0xbe, 0x41, 0xc5, 0xa9, 0xc7,
	0x5e, 0x90, 0x90, 0xfa, 0x0a, 0x3d, 0xf6, 0x01, 0x38, 0xa2, 0x9e, 0x7a, 0x5a, 0x55, 0xe1, 0x52,
	0xe5, 0x98, 0x17, 0x68, 0xe5, 0x1d, 0x83, 0xa1, 0x6a, 0x4f, 0xf1, 0xfc, 0xff, 0xf3, 0x9b, 0xdd,
	0x9d, 0xd9, 0x0d, 0x5a, 0x0e, 0x0f, 0x42, 0xf1, 0xd6, 0x3b, 0x0c, 0xd3, 0x03, 0x9a, 0x79, 0xa3,
	0xae, 0x37, 0xa4, 0xa1, 0xa0, 0xee, 0x51, 0xca, 0x33, 0x6e, 0xce, 0x2b, 0xd3, 0x05, 0xd3, 0x1d,
	0x75, 0xad, 0xc5, 0x98, 0xc7, 0x5c, 0x79, 0x5e, 0xfe, 0x05, 0x69, 0xd6, 0x52, 0xc4, 0xc5, 0x21,
	0x17, 0x03, 0x30, 0x20, 0x28, 0x2c, 0x1b, 0x22, 0x6f, 0x2f, 0x14, 0xd4, 0x1b, 0x75, 0xf7, 0x68,
	0x16, 0x76, 0xbd, 0x88, 0xb3, 0x04, 0x7c, 0xe7, 0xd2, 0x40, 0xff, 0xef, 0xe4, 0x2b, 0x6e, 0xf7,
	0xcc, 0x2d, 0x54, 0xe3, 0xef, 0x12, 0x9a, 0xb6, 0xf4, 0xb6, 0xde, 0xa9, 0xfb, 0xdd, 0x89, 0xc4,
	0x20, 0x4c, 0x25, 0x9e, 0x7d, 0x1f, 0x1e, 0x0e, 0xd7, 0x1d, 0x15, 0x3a, 0xdf, 0xbe, 0x3c, 0x5d,
	0x2c, 0x56, 0xd9, 0x20, 0x24, 0xa5, 0x42, 0xf4, 0xb3, 0x94, 0x25, 0x71, 0x00, 0xe9, 0xe6, 0x1a,
	0xaa, 0x12, 0x41, 0x8f, 0x5b, 0x46, 0x5b, 0xef, 0x54, 0x7d, 0x3c, 0x96, 0xb8, 0xda, 0xeb, 0xd3,
	0xe3, 0x89, 0xc4, 0x4a, 0x9f, 0x4a, 0xdc, 0x80, 0x72, 0x79, 0xe4, 0x04, 0x4a, 0xcc, 0xa1, 0x38,
	0x87, 0x2a, 0x6d, 0xbd, 0x33, 0x07, 0xd0, 0x56, 0x01, 0xc5, 0x77, 0xa0, 0x18, 0xa0, 0xb8, 0x80,
	0x78, 0x0e, 0x55, 0x4b, 0x68, 0xb7, 0x80, 0xf8, 0x1d, 0x88, 0x03, 0x94, 0xff, 0x98, 0x7d, 0x34,
	0x73, 0x94, 0xf2, 0x11, 0x23, 0x34, 0x6d, 0xd5, 0xd4, 0x51, 0x9f, 0x4d, 0x24, 0xbe, 0xd1, 0xa6,
	0x12, 0xcf, 0x03, 0x74, 0xad, 0xfc, 0xfb, 0xc0, 0x37, 0xd0, 0xfa, 0xcc, 0xa7, 0x73, 0xac, 0xfd,
	0x3c, 0xc7, 0x9a, 0xf3, 0xcb, 0x40, 0x35, 0xd5, 0x52, 0x73, 0x0b, 0x19, 0x8c, 0xa8, 0x6e, 0x36,
	0x56, 0x5b, 0xee, 0x1f, 0xb3, 0x74, 0x8b, 0xb6, 0xfb, 0x8f, 0x2e, 0x24, 0xd6, 0xc6, 0x12, 0x1b,
	0xdb, 0xbd, 0x89, 0xc4, 0x06, 0x23, 0x53, 0x89, 0xeb, 0xb0, 0x01, 0x46, 0x9c, 0xc0, 0x60, 0xc4,
	0xdc, 0x41, 0x35, 0x91, 0x85, 0x19, 0x55, 0x1d, 0xbd, 0xb7, 0xba, 0xfc, 0xf7, 0x5a, 0xfd, 0x3c,
	0xc5, 0x5f, 0xca, 0xc7, 0xa6, 0xb2, 0xcb, 0xb1, 0xa9, 0xd0, 0x09, 0x40, 0x36, 0x5f, 0xa3, 0xda,
	0x51, 0xca, 0x22, 0xaa, 0x5a, 0xdd, 0x58, 0x7d, 0xe8, 0x16, 0x47, 0xcb, 0xef, 0x88, 0x5b, 0xdc,
	0x11, 0xb7, 0x47, 0xa3, 0x4d, 0xce, 0x12, 0xd8, 0x5d, 0x5e, 0x52, 0x21, 0x65, 0x49, 0x15, 0x3a,
	0x01, 0xc8, 0xa6, 0x8f, 0x50, 0x94, 0xd2, 0x30, 0xa3, 0x64, 0x10, 0x66, 0x6a, 0x1a, 0x15, 0xff,
	0xf1, 0x44, 0xe2, 0x5b, 0xea, 0x54, 0xe2, 0x05, 0x40, 0x4b, 0xcd, 0x09, 0xea, 0x45, 0xb0, 0x91,
	0x99, 0x2f, 0x51, 0x3d, 0x1a, 0x72, 0x41, 0xc9, 0x80, 0x27, 0x6a, 0x2e, 0x15, 0x7f, 0x65, 0x22,
	0x71, 0x29, 0x4e, 0x25, 0x6e, 0x16, 0x15, 0xae, 0x25, 0x27, 0x98, 0x81, 0xef, 0xdd, 0xa4, 0x9c,
	0xc0, 0x93, 0xaf, 0x3a, 0x42, 0x65, 0x47, 0xcc, 0x0e, 0x9a, 0x53, 0x8f, 0x6a, 0xc0, 0x92, 0x51,
	0x38, 0x64, 0xa4, 0xa9, 0x59, 0xf7, 0x4f, 0xcf, 0xda, 0x0b, 0x65, 0xca, 0x36, 0x18, 0xe6, 0x0a,
	0x9a, 0x85, 0xcc, 0x30, 0xca, 0xd8, 0x88, 0x36, 0x75, 0x6b, 0xfe, 0xf4, 0xac, 0xdd, 0x50, 0x89,
	0x1b, 0x4a, 0x32, 0x9f, 0xa3, 0xd6, 0x75, 0x31, 0x71, 0xb2, 0xbf, 0xcf, 0x22, 0x46, 0x93, 0x6c,
	0xb0, 0x7f, 0x92, 0x10, 0xd1, 0x34, 0x2c, 0xeb, 0xf4, 0xac, 0xfd, 0x00, 0x06, 0x7b, 0xcb, 0x7e,
	0x95, 0xbb, 0x65, 0x71, 0xd8, 0x71, 0xb3, 0x72, 0xab, 0xf8, 0xa6, 0x92, 0xac, 0xea, 0x87, 0xcf,
	0xb6, 0xe6, 0xbf, 0xb8, 0x18, 0xdb, 0xfa, 0xe5, 0xd8, 0xd6, 0x7f, 0x8c, 0x6d, 0xfd, 0xe3, 0x95,
	0xad, 0x5d, 0x5e, 0xd9, 0xda, 0xf7, 0x2b, 0x5b, 0x7b, 0x83, 0x63, 0x0e, 0xa3, 0x27, 0x2e, 0xe3,
	0x9e, 0x20, 0x07, 0x5e, 0xc2, 0x09, 0x2d, 0xff, 0x3c, 0xf6, 0xfe, 0x53, 0xaf, 0x7a, 0xed, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x6c, 0xc7, 0x22, 0x56, 0x04, 0x00, 0x00,
}

func (m *LeaseID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintLease(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OSeq != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.OSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.GSeq != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.GSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.DSeq != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLease(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Lease) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lease) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lease) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosedOn != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.ClosedOn))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatedAt != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintLease(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLease(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLease(dAtA []byte, offset int, v uint64) int {
	offset -= sovLease(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LeaseID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovLease(uint64(m.DSeq))
	}
	if m.GSeq != 0 {
		n += 1 + sovLease(uint64(m.GSeq))
	}
	if m.OSeq != 0 {
		n += 1 + sovLease(uint64(m.OSeq))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovLease(uint64(l))
	}
	return n
}

func (m *Lease) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovLease(uint64(l))
	if m.State != 0 {
		n += 1 + sovLease(uint64(m.State))
	}
	l = m.Price.Size()
	n += 1 + l + sovLease(uint64(l))
	if m.CreatedAt != 0 {
		n += 1 + sovLease(uint64(m.CreatedAt))
	}
	if m.ClosedOn != 0 {
		n += 1 + sovLease(uint64(m.ClosedOn))
	}
	return n
}

func sovLease(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLease(x uint64) (n int) {
	return sovLease(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LeaseID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GSeq", wireType)
			}
			m.GSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSeq", wireType)
			}
			m.OSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lease) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLease
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= LeaseState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLease
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLease
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedOn", wireType)
			}
			m.ClosedOn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLease
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedOn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLease(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLease
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLease(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLease
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLease
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLease
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLease
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLease
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLease        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLease          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLease = fmt.Errorf("proto: unexpected end of group")
)
