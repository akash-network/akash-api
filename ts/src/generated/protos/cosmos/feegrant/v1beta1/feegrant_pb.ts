// Since: cosmos-sdk 0.43

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/feegrant/v1beta1/feegrant.proto (package cosmos.feegrant.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Any, AnyJson, Duration, DurationJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import type { Coin, CoinJson } from "../../base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb";
import { file_amino_amino } from "../../../amino/amino_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/feegrant/v1beta1/feegrant.proto.
 */
export const file_cosmos_feegrant_v1beta1_feegrant: GenFile = /*@__PURE__*/
  fileDesc("CiZjb3Ntb3MvZmVlZ3JhbnQvdjFiZXRhMS9mZWVncmFudC5wcm90bxIXY29zbW9zLmZlZWdyYW50LnYxYmV0YTEi9gEKDkJhc2ljQWxsb3dhbmNlEmUKC3NwZW5kX2xpbWl0GAEgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjXI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnOo57AqARI0CgpleHBpcmF0aW9uGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIEkN8fATpHyrQtJWNvc21vcy5mZWVncmFudC52MWJldGExLkZlZUFsbG93YW5jZUmK57AqGWNvc21vcy1zZGsvQmFzaWNBbGxvd2FuY2Ui9wMKEVBlcmlvZGljQWxsb3dhbmNlEkEKBWJhc2ljGAEgASgLMicuY29zbW9zLmZlZWdyYW50LnYxYmV0YTEuQmFzaWNBbGxvd2FuY2VCCcjeHwCo57AqARI4CgZwZXJpb2QYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDcjeHwCY3x8BqOewKgESbAoScGVyaW9kX3NwZW5kX2xpbWl0GAMgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjXI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnOo57AqARJqChBwZXJpb2RfY2FuX3NwZW5kGAQgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjXI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnOo57AqARI/CgxwZXJpb2RfcmVzZXQYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQg3I3h8AkN8fAajnsCoBOkrKtC0lY29zbW9zLmZlZWdyYW50LnYxYmV0YTEuRmVlQWxsb3dhbmNlSYrnsCocY29zbW9zLXNkay9QZXJpb2RpY0FsbG93YW5jZSLVAQoTQWxsb3dlZE1zZ0FsbG93YW5jZRJSCglhbGxvd2FuY2UYASABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QinKtC0lY29zbW9zLmZlZWdyYW50LnYxYmV0YTEuRmVlQWxsb3dhbmNlSRIYChBhbGxvd2VkX21lc3NhZ2VzGAIgAygJOlCIoB8AyrQtJWNvc21vcy5mZWVncmFudC52MWJldGExLkZlZUFsbG93YW5jZUmK57AqHmNvc21vcy1zZGsvQWxsb3dlZE1zZ0FsbG93YW5jZSKxAQoFR3JhbnQSKQoHZ3JhbnRlchgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEikKB2dyYW50ZWUYAiABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJSCglhbGxvd2FuY2UYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QinKtC0lY29zbW9zLmZlZWdyYW50LnYxYmV0YTEuRmVlQWxsb3dhbmNlSUIpWidnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3gvZmVlZ3JhbnRiBnByb3RvMw", [file_gogoproto_gogo, file_google_protobuf_any, file_cosmos_proto_cosmos, file_cosmos_base_v1beta1_coin, file_amino_amino, file_google_protobuf_timestamp, file_google_protobuf_duration]);

/**
 * BasicAllowance implements Allowance with a one-time grant of coins
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 *
 * @generated from message cosmos.feegrant.v1beta1.BasicAllowance
 */
export type BasicAllowance = Message<"cosmos.feegrant.v1beta1.BasicAllowance"> & {
  /**
   * spend_limit specifies the maximum amount of coins that can be spent
   * by this allowance and will be updated as coins are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin spend_limit = 1;
   */
  spendLimit: Coin[];

  /**
   * expiration specifies an optional time when this allowance expires
   *
   * @generated from field: google.protobuf.Timestamp expiration = 2;
   */
  expiration?: Timestamp;
};

/**
 * BasicAllowance implements Allowance with a one-time grant of coins
 * that optionally expires. The grantee can use up to SpendLimit to cover fees.
 *
 * @generated from message cosmos.feegrant.v1beta1.BasicAllowance
 */
export type BasicAllowanceJson = {
  /**
   * spend_limit specifies the maximum amount of coins that can be spent
   * by this allowance and will be updated as coins are spent. If it is
   * empty, there is no spend limit and any amount of coins can be spent.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin spend_limit = 1;
   */
  spendLimit?: CoinJson[];

  /**
   * expiration specifies an optional time when this allowance expires
   *
   * @generated from field: google.protobuf.Timestamp expiration = 2;
   */
  expiration?: TimestampJson;
};

/**
 * Describes the message cosmos.feegrant.v1beta1.BasicAllowance.
 * Use `create(BasicAllowanceSchema)` to create a new message.
 */
export const BasicAllowanceSchema: GenMessage<BasicAllowance, BasicAllowanceJson> = /*@__PURE__*/
  messageDesc(file_cosmos_feegrant_v1beta1_feegrant, 0);

/**
 * PeriodicAllowance extends Allowance to allow for both a maximum cap,
 * as well as a limit per time period.
 *
 * @generated from message cosmos.feegrant.v1beta1.PeriodicAllowance
 */
export type PeriodicAllowance = Message<"cosmos.feegrant.v1beta1.PeriodicAllowance"> & {
  /**
   * basic specifies a struct of `BasicAllowance`
   *
   * @generated from field: cosmos.feegrant.v1beta1.BasicAllowance basic = 1;
   */
  basic?: BasicAllowance;

  /**
   * period specifies the time duration in which period_spend_limit coins can
   * be spent before that allowance is reset
   *
   * @generated from field: google.protobuf.Duration period = 2;
   */
  period?: Duration;

  /**
   * period_spend_limit specifies the maximum number of coins that can be spent
   * in the period
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin period_spend_limit = 3;
   */
  periodSpendLimit: Coin[];

  /**
   * period_can_spend is the number of coins left to be spent before the period_reset time
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin period_can_spend = 4;
   */
  periodCanSpend: Coin[];

  /**
   * period_reset is the time at which this period resets and a new one begins,
   * it is calculated from the start time of the first transaction after the
   * last period ended
   *
   * @generated from field: google.protobuf.Timestamp period_reset = 5;
   */
  periodReset?: Timestamp;
};

/**
 * PeriodicAllowance extends Allowance to allow for both a maximum cap,
 * as well as a limit per time period.
 *
 * @generated from message cosmos.feegrant.v1beta1.PeriodicAllowance
 */
export type PeriodicAllowanceJson = {
  /**
   * basic specifies a struct of `BasicAllowance`
   *
   * @generated from field: cosmos.feegrant.v1beta1.BasicAllowance basic = 1;
   */
  basic?: BasicAllowanceJson;

  /**
   * period specifies the time duration in which period_spend_limit coins can
   * be spent before that allowance is reset
   *
   * @generated from field: google.protobuf.Duration period = 2;
   */
  period?: DurationJson;

  /**
   * period_spend_limit specifies the maximum number of coins that can be spent
   * in the period
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin period_spend_limit = 3;
   */
  periodSpendLimit?: CoinJson[];

  /**
   * period_can_spend is the number of coins left to be spent before the period_reset time
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin period_can_spend = 4;
   */
  periodCanSpend?: CoinJson[];

  /**
   * period_reset is the time at which this period resets and a new one begins,
   * it is calculated from the start time of the first transaction after the
   * last period ended
   *
   * @generated from field: google.protobuf.Timestamp period_reset = 5;
   */
  periodReset?: TimestampJson;
};

/**
 * Describes the message cosmos.feegrant.v1beta1.PeriodicAllowance.
 * Use `create(PeriodicAllowanceSchema)` to create a new message.
 */
export const PeriodicAllowanceSchema: GenMessage<PeriodicAllowance, PeriodicAllowanceJson> = /*@__PURE__*/
  messageDesc(file_cosmos_feegrant_v1beta1_feegrant, 1);

/**
 * AllowedMsgAllowance creates allowance only for specified message types.
 *
 * @generated from message cosmos.feegrant.v1beta1.AllowedMsgAllowance
 */
export type AllowedMsgAllowance = Message<"cosmos.feegrant.v1beta1.AllowedMsgAllowance"> & {
  /**
   * allowance can be any of basic and periodic fee allowance.
   *
   * @generated from field: google.protobuf.Any allowance = 1;
   */
  allowance?: Any;

  /**
   * allowed_messages are the messages for which the grantee has the access.
   *
   * @generated from field: repeated string allowed_messages = 2;
   */
  allowedMessages: string[];
};

/**
 * AllowedMsgAllowance creates allowance only for specified message types.
 *
 * @generated from message cosmos.feegrant.v1beta1.AllowedMsgAllowance
 */
export type AllowedMsgAllowanceJson = {
  /**
   * allowance can be any of basic and periodic fee allowance.
   *
   * @generated from field: google.protobuf.Any allowance = 1;
   */
  allowance?: AnyJson;

  /**
   * allowed_messages are the messages for which the grantee has the access.
   *
   * @generated from field: repeated string allowed_messages = 2;
   */
  allowedMessages?: string[];
};

/**
 * Describes the message cosmos.feegrant.v1beta1.AllowedMsgAllowance.
 * Use `create(AllowedMsgAllowanceSchema)` to create a new message.
 */
export const AllowedMsgAllowanceSchema: GenMessage<AllowedMsgAllowance, AllowedMsgAllowanceJson> = /*@__PURE__*/
  messageDesc(file_cosmos_feegrant_v1beta1_feegrant, 2);

/**
 * Grant is stored in the KVStore to record a grant with full context
 *
 * @generated from message cosmos.feegrant.v1beta1.Grant
 */
export type Grant = Message<"cosmos.feegrant.v1beta1.Grant"> & {
  /**
   * granter is the address of the user granting an allowance of their funds.
   *
   * @generated from field: string granter = 1;
   */
  granter: string;

  /**
   * grantee is the address of the user being granted an allowance of another user's funds.
   *
   * @generated from field: string grantee = 2;
   */
  grantee: string;

  /**
   * allowance can be any of basic, periodic, allowed fee allowance.
   *
   * @generated from field: google.protobuf.Any allowance = 3;
   */
  allowance?: Any;
};

/**
 * Grant is stored in the KVStore to record a grant with full context
 *
 * @generated from message cosmos.feegrant.v1beta1.Grant
 */
export type GrantJson = {
  /**
   * granter is the address of the user granting an allowance of their funds.
   *
   * @generated from field: string granter = 1;
   */
  granter?: string;

  /**
   * grantee is the address of the user being granted an allowance of another user's funds.
   *
   * @generated from field: string grantee = 2;
   */
  grantee?: string;

  /**
   * allowance can be any of basic, periodic, allowed fee allowance.
   *
   * @generated from field: google.protobuf.Any allowance = 3;
   */
  allowance?: AnyJson;
};

/**
 * Describes the message cosmos.feegrant.v1beta1.Grant.
 * Use `create(GrantSchema)` to create a new message.
 */
export const GrantSchema: GenMessage<Grant, GrantJson> = /*@__PURE__*/
  messageDesc(file_cosmos_feegrant_v1beta1_feegrant, 3);

