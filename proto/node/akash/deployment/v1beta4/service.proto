syntax = "proto3";
package akash.deployment.v1beta4;

import "cosmos/msg/v1/msg.proto";

import "akash/deployment/v1beta4/deploymentmsg.proto";
import "akash/deployment/v1beta4/groupmsg.proto";
import "akash/deployment/v1/msg.proto";

option go_package = "pkg.akt.io/go/node/deployment/v1beta4";

// Msg defines the deployment Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateDeployment defines a method to create new deployment given proper inputs.
  rpc CreateDeployment(MsgCreateDeployment) returns (MsgCreateDeploymentResponse);

  // DepositDeployment deposits more funds into the deployment account
  rpc DepositDeployment(akash.deployment.v1.MsgDepositDeployment) returns (akash.deployment.v1.MsgDepositDeploymentResponse);

  // UpdateDeployment defines a method to update a deployment given proper inputs.
  rpc UpdateDeployment(MsgUpdateDeployment) returns (MsgUpdateDeploymentResponse);

  // CloseDeployment defines a method to close a deployment given proper inputs.
  rpc CloseDeployment(MsgCloseDeployment) returns (MsgCloseDeploymentResponse);

  // CloseGroup defines a method to close a group of a deployment given proper inputs.
  rpc CloseGroup(MsgCloseGroup) returns (MsgCloseGroupResponse);

  // PauseGroup defines a method to close a group of a deployment given proper inputs.
  rpc PauseGroup(MsgPauseGroup) returns (MsgPauseGroupResponse);

  // StartGroup defines a method to close a group of a deployment given proper inputs.
  rpc StartGroup(MsgStartGroup) returns (MsgStartGroupResponse);
}
