// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/audit/v1/service.proto

/* eslint-disable */
import {
  ChannelCredentials,
  Client,
  makeGenericClientConstructor,
  Metadata,
} from "@grpc/grpc-js";
import type {
  CallOptions,
  ClientOptions,
  ClientUnaryCall,
  handleUnaryCall,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  MsgDeleteProviderAttributes,
  MsgDeleteProviderAttributesResponse,
  MsgSignProviderAttributes,
  MsgSignProviderAttributesResponse,
} from "./msg";

export const protobufPackage = "akash.audit.v1";

/** Msg defines the provider Msg service */
export type MsgService = typeof MsgService;
export const MsgService = {
  /** SignProviderAttributes defines a method that signs provider attributes */
  signProviderAttributes: {
    path: "/akash.audit.v1.Msg/SignProviderAttributes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgSignProviderAttributes) =>
      Buffer.from(MsgSignProviderAttributes.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      MsgSignProviderAttributes.decode(value),
    responseSerialize: (value: MsgSignProviderAttributesResponse) =>
      Buffer.from(MsgSignProviderAttributesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      MsgSignProviderAttributesResponse.decode(value),
  },
  /** DeleteProviderAttributes defines a method that deletes provider attributes */
  deleteProviderAttributes: {
    path: "/akash.audit.v1.Msg/DeleteProviderAttributes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgDeleteProviderAttributes) =>
      Buffer.from(MsgDeleteProviderAttributes.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      MsgDeleteProviderAttributes.decode(value),
    responseSerialize: (value: MsgDeleteProviderAttributesResponse) =>
      Buffer.from(MsgDeleteProviderAttributesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      MsgDeleteProviderAttributesResponse.decode(value),
  },
} as const;

export interface MsgServer extends UntypedServiceImplementation {
  /** SignProviderAttributes defines a method that signs provider attributes */
  signProviderAttributes: handleUnaryCall<
    MsgSignProviderAttributes,
    MsgSignProviderAttributesResponse
  >;
  /** DeleteProviderAttributes defines a method that deletes provider attributes */
  deleteProviderAttributes: handleUnaryCall<
    MsgDeleteProviderAttributes,
    MsgDeleteProviderAttributesResponse
  >;
}

export interface MsgClient extends Client {
  /** SignProviderAttributes defines a method that signs provider attributes */
  signProviderAttributes(
    request: MsgSignProviderAttributes,
    callback: (
      error: ServiceError | null,
      response: MsgSignProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
  signProviderAttributes(
    request: MsgSignProviderAttributes,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MsgSignProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
  signProviderAttributes(
    request: MsgSignProviderAttributes,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MsgSignProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
  /** DeleteProviderAttributes defines a method that deletes provider attributes */
  deleteProviderAttributes(
    request: MsgDeleteProviderAttributes,
    callback: (
      error: ServiceError | null,
      response: MsgDeleteProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteProviderAttributes(
    request: MsgDeleteProviderAttributes,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MsgDeleteProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteProviderAttributes(
    request: MsgDeleteProviderAttributes,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MsgDeleteProviderAttributesResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const MsgClient = makeGenericClientConstructor(
  MsgService,
  "akash.audit.v1.Msg",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): MsgClient;
  service: typeof MsgService;
  serviceName: string;
};
