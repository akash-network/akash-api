// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/deployment/v1/deployment.proto (package akash.deployment.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/deployment/v1/deployment.proto.
 */
export const file_akash_deployment_v1_deployment: GenFile = /*@__PURE__*/
  fileDesc("CiRha2FzaC9kZXBsb3ltZW50L3YxL2RlcGxveW1lbnQucHJvdG8SE2FrYXNoLmRlcGxveW1lbnQudjEiiQEKDERlcGxveW1lbnRJRBJACgVvd25lchgBIAEoCUIx6t4fBW93bmVy8t4fDHlhbWw6Im93bmVyItK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxItCgRkc2VxGAIgASgEQh/i3h8ERFNlcereHwRkc2Vx8t4fC3lhbWw6ImRzZXEiOgiYoB8A6KAfACLoAgoKRGVwbG95bWVudBJMCgJpZBgBIAEoCzIhLmFrYXNoLmRlcGxveW1lbnQudjEuRGVwbG95bWVudElEQh3I3h8A4t4fAklE6t4fAmlk8t4fCXlhbWw6ImlkIhJPCgVzdGF0ZRgCIAEoDjIlLmFrYXNoLmRlcGxveW1lbnQudjEuRGVwbG95bWVudC5TdGF0ZUIZ6t4fBXN0YXRl8t4fDHlhbWw6InN0YXRlIhIlCgRoYXNoGAMgASgMQhfq3h8EaGFzaPLeHwt5YW1sOiJoYXNoIhISCgpjcmVhdGVkX2F0GAQgASgDInoKBVN0YXRlEicKB2ludmFsaWQQABoaip0gFkRlcGxveW1lbnRTdGF0ZUludmFsaWQSIAoGYWN0aXZlEAEaFIqdIBBEZXBsb3ltZW50QWN0aXZlEiAKBmNsb3NlZBACGhSKnSAQRGVwbG95bWVudENsb3NlZBoEiKMeADoE6KAfAEIjWiFwa2cuYWt0LmRldi9nby9ub2RlL2RlcGxveW1lbnQvdjFiBnByb3RvMw", [file_gogoproto_gogo, file_cosmos_proto_cosmos]);

/**
 * DeploymentID represents a unique identifier for a specific deployment on the network.
 * It is composed of two fields: an owner address and a sequence number (dseq).
 *
 * @generated from message akash.deployment.v1.DeploymentID
 */
export type DeploymentID = Message<"akash.deployment.v1.DeploymentID"> & {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq: bigint;
};

/**
 * DeploymentID represents a unique identifier for a specific deployment on the network.
 * It is composed of two fields: an owner address and a sequence number (dseq).
 *
 * @generated from message akash.deployment.v1.DeploymentID
 */
export type DeploymentIDJson = {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   *
   * @generated from field: uint64 dseq = 2;
   */
  dseq?: string;
};

/**
 * Describes the message akash.deployment.v1.DeploymentID.
 * Use `create(DeploymentIDSchema)` to create a new message.
 */
export const DeploymentIDSchema: GenMessage<DeploymentID, DeploymentIDJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_deployment, 0);

/**
 * Deployment stores deploymentID, state and checksum details.
 *
 * @generated from message akash.deployment.v1.Deployment
 */
export type Deployment = Message<"akash.deployment.v1.Deployment"> & {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentID;

  /**
   * State defines the sate of the deployment.
   * A deployment can be either active or inactive.
   *
   * @generated from field: akash.deployment.v1.Deployment.State state = 2;
   */
  state: Deployment_State;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 3;
   */
  hash: Uint8Array;

  /**
   * CreatedAt indicates when the deployment was created as a block height value.
   *
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;
};

/**
 * Deployment stores deploymentID, state and checksum details.
 *
 * @generated from message akash.deployment.v1.Deployment
 */
export type DeploymentJson = {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentIDJson;

  /**
   * State defines the sate of the deployment.
   * A deployment can be either active or inactive.
   *
   * @generated from field: akash.deployment.v1.Deployment.State state = 2;
   */
  state?: Deployment_StateJson;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 3;
   */
  hash?: string;

  /**
   * CreatedAt indicates when the deployment was created as a block height value.
   *
   * @generated from field: int64 created_at = 4;
   */
  createdAt?: string;
};

/**
 * Describes the message akash.deployment.v1.Deployment.
 * Use `create(DeploymentSchema)` to create a new message.
 */
export const DeploymentSchema: GenMessage<Deployment, DeploymentJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_deployment, 1);

/**
 * State is an enum which refers to state of deployment.
 *
 * @generated from enum akash.deployment.v1.Deployment.State
 */
export enum Deployment_State {
  /**
   * Prefix should start with 0 in enum. So declaring dummy state.
   *
   * @generated from enum value: invalid = 0;
   */
  invalid = 0,

  /**
   * DeploymentActive denotes state for deployment active.
   *
   * @generated from enum value: active = 1;
   */
  active = 1,

  /**
   * DeploymentClosed denotes state for deployment closed.
   *
   * @generated from enum value: closed = 2;
   */
  closed = 2,
}

/**
 * State is an enum which refers to state of deployment.
 *
 * @generated from enum akash.deployment.v1.Deployment.State
 */
export type Deployment_StateJson = "invalid" | "active" | "closed";

/**
 * Describes the enum akash.deployment.v1.Deployment.State.
 */
export const Deployment_StateSchema: GenEnum<Deployment_State, Deployment_StateJson> = /*@__PURE__*/
  enumDesc(file_akash_deployment_v1_deployment, 1, 0);

