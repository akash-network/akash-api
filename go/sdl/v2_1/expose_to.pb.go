// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/sdl/v2.1/expose_to.proto

package v2_1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExposeTo struct {
	Service     string      `protobuf:"bytes,1,opt,name=service,proto3" json:"service" yaml:"service"`
	Global      bool        `protobuf:"varint,2,opt,name=Global,proto3" json:"global" yaml:"global"`
	HTTPOptions HTTPOptions `protobuf:"bytes,3,opt,name=http_options,json=httpOptions,proto3" json:"http_options" yaml:"http_options"`
	IP          string      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip" yaml:"ip"`
}

func (m *ExposeTo) Reset()         { *m = ExposeTo{} }
func (m *ExposeTo) String() string { return proto.CompactTextString(m) }
func (*ExposeTo) ProtoMessage()    {}
func (*ExposeTo) Descriptor() ([]byte, []int) {
	return fileDescriptor_42360c3d4d968c85, []int{0}
}
func (m *ExposeTo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExposeTo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExposeTo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExposeTo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExposeTo.Merge(m, src)
}
func (m *ExposeTo) XXX_Size() int {
	return m.Size()
}
func (m *ExposeTo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExposeTo.DiscardUnknown(m)
}

var xxx_messageInfo_ExposeTo proto.InternalMessageInfo

func (m *ExposeTo) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ExposeTo) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

func (m *ExposeTo) GetHTTPOptions() HTTPOptions {
	if m != nil {
		return m.HTTPOptions
	}
	return HTTPOptions{}
}

func (m *ExposeTo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func init() {
	proto.RegisterType((*ExposeTo)(nil), "akash.sdl.v2_1.ExposeTo")
}

func init() { proto.RegisterFile("akash/sdl/v2.1/expose_to.proto", fileDescriptor_42360c3d4d968c85) }

var fileDescriptor_42360c3d4d968c85 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xbd, 0x6e, 0xe2, 0x40,
	0x10, 0xb6, 0x7d, 0x27, 0x7e, 0xcc, 0x1d, 0x85, 0xef, 0x0a, 0x87, 0x48, 0xbb, 0xc4, 0x52, 0x24,
	0xa7, 0xc8, 0x5a, 0x90, 0x0e, 0x29, 0x8d, 0xa5, 0x28, 0xa4, 0x0a, 0x72, 0xa8, 0xd2, 0x58, 0x06,
	0x2c, 0xb3, 0xc2, 0xb0, 0x2b, 0xbc, 0x21, 0x3f, 0x4f, 0x91, 0x87, 0xc9, 0x43, 0x50, 0x52, 0xa6,
	0x5a, 0x45, 0x4b, 0xe7, 0xd2, 0x4f, 0x10, 0xb1, 0x6b, 0x24, 0x48, 0x37, 0xdf, 0xcf, 0x7c, 0x33,
	0xa3, 0x31, 0x41, 0x34, 0x8b, 0xb2, 0xa9, 0x97, 0x4d, 0x52, 0x6f, 0xd5, 0x45, 0x1d, 0x2f, 0x7e,
	0xa1, 0x24, 0x8b, 0x43, 0x46, 0x10, 0x5d, 0x12, 0x46, 0xac, 0xa6, 0xd4, 0x51, 0x36, 0x49, 0xd1,
	0xaa, 0x1b, 0x76, 0x5a, 0xff, 0x13, 0x92, 0x10, 0x29, 0x79, 0xbb, 0x4a, 0xb9, 0x5a, 0x67, 0x3f,
	0x52, 0xa6, 0x8c, 0xd1, 0x90, 0x50, 0x86, 0xc9, 0x22, 0x53, 0x16, 0xe7, 0xc3, 0x30, 0x6b, 0x37,
	0x32, 0x7c, 0x48, 0x2c, 0xdf, 0xac, 0x66, 0xf1, 0x72, 0x85, 0xc7, 0xb1, 0xad, 0xb7, 0x75, 0xb7,
	0xee, 0xbb, 0x82, 0xc3, 0xea, 0x83, 0xa2, 0x72, 0x0e, 0xf7, 0x6a, 0xc1, 0x61, 0xf3, 0x35, 0x9a,
	0xa7, 0x3d, 0xa7, 0x24, 0x9c, 0x60, 0x2f, 0x59, 0xd7, 0x66, 0xe5, 0x36, 0x25, 0xa3, 0x28, 0xb5,
	0x8d, 0xb6, 0xee, 0xd6, 0xfc, 0x73, 0xc1, 0x61, 0xc9, 0xe4, 0x1c, 0x56, 0x12, 0x59, 0x15, 0x1c,
	0xfe, 0x55, 0x01, 0x0a, 0x3b, 0x41, 0x69, 0xb1, 0xde, 0xcc, 0x3f, 0x87, 0x5b, 0xda, 0xbf, 0xda,
	0xba, 0xdb, 0xe8, 0x9e, 0xa2, 0xe3, 0x7b, 0x51, 0x7f, 0x38, 0x1c, 0xdc, 0x2b, 0x8b, 0xdf, 0x5b,
	0x73, 0xa8, 0x09, 0x0e, 0x1b, 0x07, 0x64, 0xce, 0xe1, 0x51, 0x4e, 0xc1, 0xe1, 0x3f, 0x35, 0xf0,
	0x90, 0x75, 0x82, 0xc6, 0x0e, 0x96, 0x3d, 0xd6, 0x85, 0x69, 0x60, 0x6a, 0xff, 0x96, 0x97, 0x9f,
	0x08, 0x0e, 0x8d, 0xbb, 0x41, 0xce, 0xa1, 0x81, 0x69, 0xc1, 0x61, 0x5d, 0x75, 0x63, 0xea, 0x04,
	0x06, 0xa6, 0x7e, 0x7f, 0x2d, 0x80, 0xbe, 0x11, 0x40, 0xff, 0x12, 0x40, 0x7f, 0xdf, 0x02, 0x6d,
	0xb3, 0x05, 0xda, 0xe7, 0x16, 0x68, 0x8f, 0x28, 0xc1, 0x6c, 0xfa, 0x34, 0x42, 0x63, 0x32, 0xf7,
	0xe4, 0xd2, 0x97, 0x8b, 0x98, 0x3d, 0x93, 0xe5, 0xac, 0x44, 0x11, 0xc5, 0x5e, 0x42, 0xca, 0x9f,
	0x84, 0x9d, 0x51, 0x45, 0xfe, 0xe1, 0xea, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x89, 0x73, 0xd3,
	0xf2, 0x01, 0x00, 0x00,
}

func (m *ExposeTo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExposeTo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExposeTo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		i -= len(m.IP)
		copy(dAtA[i:], m.IP)
		i = encodeVarintExposeTo(dAtA, i, uint64(len(m.IP)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.HTTPOptions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExposeTo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Global {
		i--
		if m.Global {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintExposeTo(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExposeTo(dAtA []byte, offset int, v uint64) int {
	offset -= sovExposeTo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExposeTo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovExposeTo(uint64(l))
	}
	if m.Global {
		n += 2
	}
	l = m.HTTPOptions.Size()
	n += 1 + l + sovExposeTo(uint64(l))
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovExposeTo(uint64(l))
	}
	return n
}

func sovExposeTo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExposeTo(x uint64) (n int) {
	return sovExposeTo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExposeTo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExposeTo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExposeTo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExposeTo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposeTo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposeTo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Global", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Global = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HTTPOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExposeTo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExposeTo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HTTPOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExposeTo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExposeTo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExposeTo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExposeTo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExposeTo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExposeTo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExposeTo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExposeTo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExposeTo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExposeTo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExposeTo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExposeTo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExposeTo = fmt.Errorf("proto: unexpected end of group")
)
