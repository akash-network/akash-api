// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/tx/signing/v1beta1/signing.proto (package cosmos.tx.signing.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { CompactBitArray, CompactBitArrayJson } from "../../../crypto/multisig/v1beta1/multisig_pb";
import { file_cosmos_crypto_multisig_v1beta1_multisig } from "../../../crypto/multisig/v1beta1/multisig_pb";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/tx/signing/v1beta1/signing.proto.
 */
export const file_cosmos_tx_signing_v1beta1_signing: GenFile = /*@__PURE__*/
  fileDesc("Cidjb3Ntb3MvdHgvc2lnbmluZy92MWJldGExL3NpZ25pbmcucHJvdG8SGWNvc21vcy50eC5zaWduaW5nLnYxYmV0YTEiWgoUU2lnbmF0dXJlRGVzY3JpcHRvcnMSQgoKc2lnbmF0dXJlcxgBIAMoCzIuLmNvc21vcy50eC5zaWduaW5nLnYxYmV0YTEuU2lnbmF0dXJlRGVzY3JpcHRvciKkBAoTU2lnbmF0dXJlRGVzY3JpcHRvchIoCgpwdWJsaWNfa2V5GAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRJBCgRkYXRhGAIgASgLMjMuY29zbW9zLnR4LnNpZ25pbmcudjFiZXRhMS5TaWduYXR1cmVEZXNjcmlwdG9yLkRhdGESEAoIc2VxdWVuY2UYAyABKAQajQMKBERhdGESTAoGc2luZ2xlGAEgASgLMjouY29zbW9zLnR4LnNpZ25pbmcudjFiZXRhMS5TaWduYXR1cmVEZXNjcmlwdG9yLkRhdGEuU2luZ2xlSAASSgoFbXVsdGkYAiABKAsyOS5jb3Ntb3MudHguc2lnbmluZy52MWJldGExLlNpZ25hdHVyZURlc2NyaXB0b3IuRGF0YS5NdWx0aUgAGk4KBlNpbmdsZRIxCgRtb2RlGAEgASgOMiMuY29zbW9zLnR4LnNpZ25pbmcudjFiZXRhMS5TaWduTW9kZRIRCglzaWduYXR1cmUYAiABKAwakwEKBU11bHRpEkEKCGJpdGFycmF5GAEgASgLMi8uY29zbW9zLmNyeXB0by5tdWx0aXNpZy52MWJldGExLkNvbXBhY3RCaXRBcnJheRJHCgpzaWduYXR1cmVzGAIgAygLMjMuY29zbW9zLnR4LnNpZ25pbmcudjFiZXRhMS5TaWduYXR1cmVEZXNjcmlwdG9yLkRhdGFCBQoDc3VtKqUBCghTaWduTW9kZRIZChVTSUdOX01PREVfVU5TUEVDSUZJRUQQABIUChBTSUdOX01PREVfRElSRUNUEAESFQoRU0lHTl9NT0RFX1RFWFRVQUwQAhIYChRTSUdOX01PREVfRElSRUNUX0FVWBADEh8KG1NJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPThB/EhYKEVNJR05fTU9ERV9FSVBfMTkxEL8BQi9aLWdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMvdHgvc2lnbmluZ2IGcHJvdG8z", [file_cosmos_crypto_multisig_v1beta1_multisig, file_google_protobuf_any]);

/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export type SignatureDescriptors = Message<"cosmos.tx.signing.v1beta1.SignatureDescriptors"> & {
  /**
   * signatures are the signature descriptors
   *
   * @generated from field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1;
   */
  signatures: SignatureDescriptor[];
};

/**
 * SignatureDescriptors wraps multiple SignatureDescriptor's.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptors
 */
export type SignatureDescriptorsJson = {
  /**
   * signatures are the signature descriptors
   *
   * @generated from field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1;
   */
  signatures?: SignatureDescriptorJson[];
};

/**
 * Describes the message cosmos.tx.signing.v1beta1.SignatureDescriptors.
 * Use `create(SignatureDescriptorsSchema)` to create a new message.
 */
export const SignatureDescriptorsSchema: GenMessage<SignatureDescriptors, SignatureDescriptorsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_signing_v1beta1_signing, 0);

/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export type SignatureDescriptor = Message<"cosmos.tx.signing.v1beta1.SignatureDescriptor"> & {
  /**
   * public_key is the public key of the signer
   *
   * @generated from field: google.protobuf.Any public_key = 1;
   */
  publicKey?: Any;

  /**
   * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2;
   */
  data?: SignatureDescriptor_Data;

  /**
   * sequence is the sequence of the account, which describes the
   * number of committed transactions signed by a given address. It is used to prevent
   * replay attacks.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence: bigint;
};

/**
 * SignatureDescriptor is a convenience type which represents the full data for
 * a signature including the public key of the signer, signing modes and the
 * signature itself. It is primarily used for coordinating signatures between
 * clients.
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor
 */
export type SignatureDescriptorJson = {
  /**
   * public_key is the public key of the signer
   *
   * @generated from field: google.protobuf.Any public_key = 1;
   */
  publicKey?: AnyJson;

  /**
   * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2;
   */
  data?: SignatureDescriptor_DataJson;

  /**
   * sequence is the sequence of the account, which describes the
   * number of committed transactions signed by a given address. It is used to prevent
   * replay attacks.
   *
   * @generated from field: uint64 sequence = 3;
   */
  sequence?: string;
};

/**
 * Describes the message cosmos.tx.signing.v1beta1.SignatureDescriptor.
 * Use `create(SignatureDescriptorSchema)` to create a new message.
 */
export const SignatureDescriptorSchema: GenMessage<SignatureDescriptor, SignatureDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_signing_v1beta1_signing, 1);

/**
 * Data represents signature data
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export type SignatureDescriptor_Data = Message<"cosmos.tx.signing.v1beta1.SignatureDescriptor.Data"> & {
  /**
   * sum is the oneof that specifies whether this represents single or multi-signature data
   *
   * @generated from oneof cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.sum
   */
  sum: {
    /**
     * single represents a single signer
     *
     * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
     */
    value: SignatureDescriptor_Data_Single;
    case: "single";
  } | {
    /**
     * multi represents a multisig signer
     *
     * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
     */
    value: SignatureDescriptor_Data_Multi;
    case: "multi";
  } | { case: undefined; value?: undefined };
};

/**
 * Data represents signature data
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data
 */
export type SignatureDescriptor_DataJson = {
  /**
   * single represents a single signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1;
   */
  single?: SignatureDescriptor_Data_SingleJson;

  /**
   * multi represents a multisig signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2;
   */
  multi?: SignatureDescriptor_Data_MultiJson;
};

/**
 * Describes the message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.
 * Use `create(SignatureDescriptor_DataSchema)` to create a new message.
 */
export const SignatureDescriptor_DataSchema: GenMessage<SignatureDescriptor_Data, SignatureDescriptor_DataJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_signing_v1beta1_signing, 1, 0);

/**
 * Single is the signature data for a single signer
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export type SignatureDescriptor_Data_Single = Message<"cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single"> & {
  /**
   * mode is the signing mode of the single signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
   */
  mode: SignMode;

  /**
   * signature is the raw signature bytes
   *
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;
};

/**
 * Single is the signature data for a single signer
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single
 */
export type SignatureDescriptor_Data_SingleJson = {
  /**
   * mode is the signing mode of the single signer
   *
   * @generated from field: cosmos.tx.signing.v1beta1.SignMode mode = 1;
   */
  mode?: SignModeJson;

  /**
   * signature is the raw signature bytes
   *
   * @generated from field: bytes signature = 2;
   */
  signature?: string;
};

/**
 * Describes the message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.
 * Use `create(SignatureDescriptor_Data_SingleSchema)` to create a new message.
 */
export const SignatureDescriptor_Data_SingleSchema: GenMessage<SignatureDescriptor_Data_Single, SignatureDescriptor_Data_SingleJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_signing_v1beta1_signing, 1, 0, 0);

/**
 * Multi is the signature data for a multisig public key
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export type SignatureDescriptor_Data_Multi = Message<"cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi"> & {
  /**
   * bitarray specifies which keys within the multisig are signing
   *
   * @generated from field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
   */
  bitarray?: CompactBitArray;

  /**
   * signatures is the signatures of the multi-signature
   *
   * @generated from field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
   */
  signatures: SignatureDescriptor_Data[];
};

/**
 * Multi is the signature data for a multisig public key
 *
 * @generated from message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi
 */
export type SignatureDescriptor_Data_MultiJson = {
  /**
   * bitarray specifies which keys within the multisig are signing
   *
   * @generated from field: cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;
   */
  bitarray?: CompactBitArrayJson;

  /**
   * signatures is the signatures of the multi-signature
   *
   * @generated from field: repeated cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2;
   */
  signatures?: SignatureDescriptor_DataJson[];
};

/**
 * Describes the message cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.
 * Use `create(SignatureDescriptor_Data_MultiSchema)` to create a new message.
 */
export const SignatureDescriptor_Data_MultiSchema: GenMessage<SignatureDescriptor_Data_Multi, SignatureDescriptor_Data_MultiJson> = /*@__PURE__*/
  messageDesc(file_cosmos_tx_signing_v1beta1_signing, 1, 0, 1);

/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * This enum should be considered a registry of all known sign modes
 * in the Cosmos ecosystem. Apps are not expected to support all known
 * sign modes. Apps that would like to support custom  sign modes are
 * encouraged to open a small PR against this file to add a new case
 * to this SignMode enum describing their sign mode so that different
 * apps have a consistent version of this enum.
 *
 * @generated from enum cosmos.tx.signing.v1beta1.SignMode
 */
export enum SignMode {
  /**
   * SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
   * rejected.
   *
   * @generated from enum value: SIGN_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
   * verified with raw bytes from Tx.
   *
   * @generated from enum value: SIGN_MODE_DIRECT = 1;
   */
  DIRECT = 1,

  /**
   * SIGN_MODE_TEXTUAL is a future signing mode that will verify some
   * human-readable textual representation on top of the binary representation
   * from SIGN_MODE_DIRECT. It is currently not supported.
   *
   * @generated from enum value: SIGN_MODE_TEXTUAL = 2;
   */
  TEXTUAL = 2,

  /**
   * SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
   * SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
   * require signers signing over other signers' `signer_info`. It also allows
   * for adding Tips in transactions.
   *
   * Since: cosmos-sdk 0.46
   *
   * @generated from enum value: SIGN_MODE_DIRECT_AUX = 3;
   */
  DIRECT_AUX = 3,

  /**
   * SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
   * Amino JSON and will be removed in the future.
   *
   * @generated from enum value: SIGN_MODE_LEGACY_AMINO_JSON = 127;
   */
  LEGACY_AMINO_JSON = 127,

  /**
   * SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
   * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
   *
   * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
   * but is not implemented on the SDK by default. To enable EIP-191, you need
   * to pass a custom `TxConfig` that has an implementation of
   * `SignModeHandler` for EIP-191. The SDK may decide to fully support
   * EIP-191 in the future.
   *
   * Since: cosmos-sdk 0.45.2
   *
   * @generated from enum value: SIGN_MODE_EIP_191 = 191;
   */
  EIP_191 = 191,
}

/**
 * SignMode represents a signing mode with its own security guarantees.
 *
 * This enum should be considered a registry of all known sign modes
 * in the Cosmos ecosystem. Apps are not expected to support all known
 * sign modes. Apps that would like to support custom  sign modes are
 * encouraged to open a small PR against this file to add a new case
 * to this SignMode enum describing their sign mode so that different
 * apps have a consistent version of this enum.
 *
 * @generated from enum cosmos.tx.signing.v1beta1.SignMode
 */
export type SignModeJson = "SIGN_MODE_UNSPECIFIED" | "SIGN_MODE_DIRECT" | "SIGN_MODE_TEXTUAL" | "SIGN_MODE_DIRECT_AUX" | "SIGN_MODE_LEGACY_AMINO_JSON" | "SIGN_MODE_EIP_191";

/**
 * Describes the enum cosmos.tx.signing.v1beta1.SignMode.
 */
export const SignModeSchema: GenEnum<SignMode, SignModeJson> = /*@__PURE__*/
  enumDesc(file_cosmos_tx_signing_v1beta1_signing, 0);

