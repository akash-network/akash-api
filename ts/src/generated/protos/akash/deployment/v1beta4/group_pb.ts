// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file akash/deployment/v1beta4/group.proto (package akash.deployment.v1beta4, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { GroupID, GroupIDJson } from "../v1/group_pb";
import { file_akash_deployment_v1_group } from "../v1/group_pb";
import type { GroupSpec, GroupSpecJson } from "./groupspec_pb";
import { file_akash_deployment_v1beta4_groupspec } from "./groupspec_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/deployment/v1beta4/group.proto.
 */
export const file_akash_deployment_v1beta4_group: GenFile = /*@__PURE__*/
  fileDesc("CiRha2FzaC9kZXBsb3ltZW50L3YxYmV0YTQvZ3JvdXAucHJvdG8SGGFrYXNoLmRlcGxveW1lbnQudjFiZXRhNCLaAwoFR3JvdXASRwoCaWQYASABKAsyHC5ha2FzaC5kZXBsb3ltZW50LnYxLkdyb3VwSURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiEk8KBXN0YXRlGAIgASgOMiUuYWthc2guZGVwbG95bWVudC52MWJldGE0Lkdyb3VwLlN0YXRlQhnq3h8Fc3RhdGXy3h8MeWFtbDoic3RhdGUiEmIKCmdyb3VwX3NwZWMYAyABKAsyIy5ha2FzaC5kZXBsb3ltZW50LnYxYmV0YTQuR3JvdXBTcGVjQinI3h8A6t4fBHNwZWPy3h8LeWFtbDoic3BlYyKq3x8KR3JvdXBTcGVjcxISCgpjcmVhdGVkX2F0GAQgASgDIrgBCgVTdGF0ZRIiCgdpbnZhbGlkEAAaFYqdIBFHcm91cFN0YXRlSW52YWxpZBIXCgRvcGVuEAEaDYqdIAlHcm91cE9wZW4SGwoGcGF1c2VkEAIaD4qdIAtHcm91cFBhdXNlZBIyChJpbnN1ZmZpY2llbnRfZnVuZHMQAxoaip0gFkdyb3VwSW5zdWZmaWNpZW50RnVuZHMSGwoGY2xvc2VkEAQaD4qdIAtHcm91cENsb3NlZBoEiKMeADoE6KAfAEIoWiZwa2cuYWt0LmRldi9nby9ub2RlL2RlcGxveW1lbnQvdjFiZXRhNGIGcHJvdG8z", [file_gogoproto_gogo, file_akash_deployment_v1_group, file_akash_deployment_v1beta4_groupspec]);

/**
 * Group stores group id, state and specifications of a group.
 *
 * @generated from message akash.deployment.v1beta4.Group
 */
export type Group = Message<"akash.deployment.v1beta4.Group"> & {
  /**
   * Id is the unique identifier for the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupID;

  /**
   * State represents the state of the group.
   *
   * @generated from field: akash.deployment.v1beta4.Group.State state = 2;
   */
  state: Group_State;

  /**
   * GroupSpec holds the specification of a the Group.
   *
   * @generated from field: akash.deployment.v1beta4.GroupSpec group_spec = 3;
   */
  groupSpec?: GroupSpec;

  /**
   * CreatedAt is the block height at which the deployment was created.
   *
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;
};

/**
 * Group stores group id, state and specifications of a group.
 *
 * @generated from message akash.deployment.v1beta4.Group
 */
export type GroupJson = {
  /**
   * Id is the unique identifier for the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupIDJson;

  /**
   * State represents the state of the group.
   *
   * @generated from field: akash.deployment.v1beta4.Group.State state = 2;
   */
  state?: Group_StateJson;

  /**
   * GroupSpec holds the specification of a the Group.
   *
   * @generated from field: akash.deployment.v1beta4.GroupSpec group_spec = 3;
   */
  groupSpec?: GroupSpecJson;

  /**
   * CreatedAt is the block height at which the deployment was created.
   *
   * @generated from field: int64 created_at = 4;
   */
  createdAt?: string;
};

/**
 * Describes the message akash.deployment.v1beta4.Group.
 * Use `create(GroupSchema)` to create a new message.
 */
export const GroupSchema: GenMessage<Group, GroupJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1beta4_group, 0);

/**
 * State is an enum which refers to state of group.
 *
 * @generated from enum akash.deployment.v1beta4.Group.State
 */
export enum Group_State {
  /**
   * Prefix should start with 0 in enum. So declaring dummy state.
   *
   * @generated from enum value: invalid = 0;
   */
  invalid = 0,

  /**
   * GroupOpen denotes state for group open.
   *
   * @generated from enum value: open = 1;
   */
  open = 1,

  /**
   * GroupOrdered denotes state for group ordered.
   *
   * @generated from enum value: paused = 2;
   */
  paused = 2,

  /**
   * GroupInsufficientFunds denotes state for group insufficient_funds.
   *
   * @generated from enum value: insufficient_funds = 3;
   */
  insufficient_funds = 3,

  /**
   * GroupClosed denotes state for group closed.
   *
   * @generated from enum value: closed = 4;
   */
  closed = 4,
}

/**
 * State is an enum which refers to state of group.
 *
 * @generated from enum akash.deployment.v1beta4.Group.State
 */
export type Group_StateJson = "invalid" | "open" | "paused" | "insufficient_funds" | "closed";

/**
 * Describes the enum akash.deployment.v1beta4.Group.State.
 */
export const Group_StateSchema: GenEnum<Group_State, Group_StateJson> = /*@__PURE__*/
  enumDesc(file_akash_deployment_v1beta4_group, 0, 0);

