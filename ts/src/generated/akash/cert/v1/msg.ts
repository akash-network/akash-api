// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/cert/v1/msg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { messageTypeRegistry } from "../../../typeRegistry";
import { ID } from "./cert";

/** MsgCreateCertificate defines an SDK message for creating certificate */
export interface MsgCreateCertificate {
  $type: "akash.cert.v1.MsgCreateCertificate";
  owner: string;
  cert: Uint8Array;
  pubkey: Uint8Array;
}

/** MsgCreateCertificateResponse defines the Msg/CreateCertificate response type. */
export interface MsgCreateCertificateResponse {
  $type: "akash.cert.v1.MsgCreateCertificateResponse";
}

/** MsgRevokeCertificate defines an SDK message for revoking certificate */
export interface MsgRevokeCertificate {
  $type: "akash.cert.v1.MsgRevokeCertificate";
  id: ID | undefined;
}

/** MsgRevokeCertificateResponse defines the Msg/RevokeCertificate response type. */
export interface MsgRevokeCertificateResponse {
  $type: "akash.cert.v1.MsgRevokeCertificateResponse";
}

function createBaseMsgCreateCertificate(): MsgCreateCertificate {
  return {
    $type: "akash.cert.v1.MsgCreateCertificate",
    owner: "",
    cert: new Uint8Array(0),
    pubkey: new Uint8Array(0),
  };
}

export const MsgCreateCertificate: MessageFns<
  MsgCreateCertificate,
  "akash.cert.v1.MsgCreateCertificate"
> = {
  $type: "akash.cert.v1.MsgCreateCertificate" as const,

  encode(
    message: MsgCreateCertificate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.cert.length !== 0) {
      writer.uint32(18).bytes(message.cert);
    }
    if (message.pubkey.length !== 0) {
      writer.uint32(26).bytes(message.pubkey);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCreateCertificate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cert = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pubkey = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateCertificate {
    return {
      $type: MsgCreateCertificate.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      cert: isSet(object.cert)
        ? bytesFromBase64(object.cert)
        : new Uint8Array(0),
      pubkey: isSet(object.pubkey)
        ? bytesFromBase64(object.pubkey)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgCreateCertificate): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.cert.length !== 0) {
      obj.cert = base64FromBytes(message.cert);
    }
    if (message.pubkey.length !== 0) {
      obj.pubkey = base64FromBytes(message.pubkey);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateCertificate>): MsgCreateCertificate {
    return MsgCreateCertificate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateCertificate>): MsgCreateCertificate {
    const message = createBaseMsgCreateCertificate();
    message.owner = object.owner ?? "";
    message.cert = object.cert ?? new Uint8Array(0);
    message.pubkey = object.pubkey ?? new Uint8Array(0);
    return message;
  },
};

messageTypeRegistry.set(MsgCreateCertificate.$type, MsgCreateCertificate);

function createBaseMsgCreateCertificateResponse(): MsgCreateCertificateResponse {
  return { $type: "akash.cert.v1.MsgCreateCertificateResponse" };
}

export const MsgCreateCertificateResponse: MessageFns<
  MsgCreateCertificateResponse,
  "akash.cert.v1.MsgCreateCertificateResponse"
> = {
  $type: "akash.cert.v1.MsgCreateCertificateResponse" as const,

  encode(
    _: MsgCreateCertificateResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCreateCertificateResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateCertificateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateCertificateResponse {
    return { $type: MsgCreateCertificateResponse.$type };
  },

  toJSON(_: MsgCreateCertificateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<MsgCreateCertificateResponse>,
  ): MsgCreateCertificateResponse {
    return MsgCreateCertificateResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<MsgCreateCertificateResponse>,
  ): MsgCreateCertificateResponse {
    const message = createBaseMsgCreateCertificateResponse();
    return message;
  },
};

messageTypeRegistry.set(
  MsgCreateCertificateResponse.$type,
  MsgCreateCertificateResponse,
);

function createBaseMsgRevokeCertificate(): MsgRevokeCertificate {
  return { $type: "akash.cert.v1.MsgRevokeCertificate", id: undefined };
}

export const MsgRevokeCertificate: MessageFns<
  MsgRevokeCertificate,
  "akash.cert.v1.MsgRevokeCertificate"
> = {
  $type: "akash.cert.v1.MsgRevokeCertificate" as const,

  encode(
    message: MsgRevokeCertificate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== undefined) {
      ID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgRevokeCertificate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = ID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevokeCertificate {
    return {
      $type: MsgRevokeCertificate.$type,
      id: isSet(object.id) ? ID.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: MsgRevokeCertificate): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = ID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRevokeCertificate>): MsgRevokeCertificate {
    return MsgRevokeCertificate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRevokeCertificate>): MsgRevokeCertificate {
    const message = createBaseMsgRevokeCertificate();
    message.id =
      object.id !== undefined && object.id !== null
        ? ID.fromPartial(object.id)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MsgRevokeCertificate.$type, MsgRevokeCertificate);

function createBaseMsgRevokeCertificateResponse(): MsgRevokeCertificateResponse {
  return { $type: "akash.cert.v1.MsgRevokeCertificateResponse" };
}

export const MsgRevokeCertificateResponse: MessageFns<
  MsgRevokeCertificateResponse,
  "akash.cert.v1.MsgRevokeCertificateResponse"
> = {
  $type: "akash.cert.v1.MsgRevokeCertificateResponse" as const,

  encode(
    _: MsgRevokeCertificateResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgRevokeCertificateResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeCertificateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRevokeCertificateResponse {
    return { $type: MsgRevokeCertificateResponse.$type };
  },

  toJSON(_: MsgRevokeCertificateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<MsgRevokeCertificateResponse>,
  ): MsgRevokeCertificateResponse {
    return MsgRevokeCertificateResponse.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<MsgRevokeCertificateResponse>,
  ): MsgRevokeCertificateResponse {
    const message = createBaseMsgRevokeCertificateResponse();
    return message;
  },
};

messageTypeRegistry.set(
  MsgRevokeCertificateResponse.$type,
  MsgRevokeCertificateResponse,
);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
