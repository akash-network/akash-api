// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/provider/lease/v1/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	github_com_akash_network_akash_api_go_manifest_v2beta2 "github.com/akash-network/akash-api/go/manifest/v2beta2"
	v2beta2 "github.com/akash-network/akash-api/go/manifest/v2beta2"
	v1beta4 "github.com/akash-network/akash-api/go/node/market/v1beta4"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LeaseServiceStatus
type LeaseServiceStatus struct {
	Available          int32    `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Total              int32    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Uris               []string `protobuf:"bytes,3,rep,name=uris,proto3" json:"uris,omitempty"`
	ObservedGeneration int64    `protobuf:"varint,4,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	Replicas           int32    `protobuf:"varint,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
	UpdatedReplicas    int32    `protobuf:"varint,6,opt,name=updated_replicas,json=updatedReplicas,proto3" json:"updated_replicas,omitempty"`
	ReadyReplicas      int32    `protobuf:"varint,7,opt,name=ready_replicas,json=readyReplicas,proto3" json:"ready_replicas,omitempty"`
	AvailableReplicas  int32    `protobuf:"varint,8,opt,name=available_replicas,json=availableReplicas,proto3" json:"available_replicas,omitempty"`
}

func (m *LeaseServiceStatus) Reset()         { *m = LeaseServiceStatus{} }
func (m *LeaseServiceStatus) String() string { return proto.CompactTextString(m) }
func (*LeaseServiceStatus) ProtoMessage()    {}
func (*LeaseServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{0}
}
func (m *LeaseServiceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseServiceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseServiceStatus.Merge(m, src)
}
func (m *LeaseServiceStatus) XXX_Size() int {
	return m.Size()
}
func (m *LeaseServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseServiceStatus proto.InternalMessageInfo

func (m *LeaseServiceStatus) GetAvailable() int32 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *LeaseServiceStatus) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *LeaseServiceStatus) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *LeaseServiceStatus) GetObservedGeneration() int64 {
	if m != nil {
		return m.ObservedGeneration
	}
	return 0
}

func (m *LeaseServiceStatus) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *LeaseServiceStatus) GetUpdatedReplicas() int32 {
	if m != nil {
		return m.UpdatedReplicas
	}
	return 0
}

func (m *LeaseServiceStatus) GetReadyReplicas() int32 {
	if m != nil {
		return m.ReadyReplicas
	}
	return 0
}

func (m *LeaseServiceStatus) GetAvailableReplicas() int32 {
	if m != nil {
		return m.AvailableReplicas
	}
	return 0
}

// LeaseIPStatus
type LeaseIPStatus struct {
	Port         uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port" yaml:"port"`
	ExternalPort uint32 `protobuf:"varint,2,opt,name=external_port,json=externalPort,proto3" json:"external_port" yaml:"external_port"`
	Protocol     string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol" yaml:"protocol"`
	Ip           string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip" yaml:"ip"`
}

func (m *LeaseIPStatus) Reset()         { *m = LeaseIPStatus{} }
func (m *LeaseIPStatus) String() string { return proto.CompactTextString(m) }
func (*LeaseIPStatus) ProtoMessage()    {}
func (*LeaseIPStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{1}
}
func (m *LeaseIPStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseIPStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseIPStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseIPStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseIPStatus.Merge(m, src)
}
func (m *LeaseIPStatus) XXX_Size() int {
	return m.Size()
}
func (m *LeaseIPStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseIPStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseIPStatus proto.InternalMessageInfo

func (m *LeaseIPStatus) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *LeaseIPStatus) GetExternalPort() uint32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *LeaseIPStatus) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *LeaseIPStatus) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// ForwarderPortStatus
type ForwarderPortStatus struct {
	Host         string `protobuf:"bytes,1,opt,name=host,proto3" json:"host" yaml:"host"`
	Port         uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port" yaml:"port"`
	ExternalPort uint32 `protobuf:"varint,3,opt,name=external_port,json=externalPort,proto3" json:"external_port" yaml:"external_port"`
	Proto        string `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto" yaml:"proto"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" yaml:"name"`
}

func (m *ForwarderPortStatus) Reset()         { *m = ForwarderPortStatus{} }
func (m *ForwarderPortStatus) String() string { return proto.CompactTextString(m) }
func (*ForwarderPortStatus) ProtoMessage()    {}
func (*ForwarderPortStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{2}
}
func (m *ForwarderPortStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwarderPortStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwarderPortStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwarderPortStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwarderPortStatus.Merge(m, src)
}
func (m *ForwarderPortStatus) XXX_Size() int {
	return m.Size()
}
func (m *ForwarderPortStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwarderPortStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ForwarderPortStatus proto.InternalMessageInfo

func (m *ForwarderPortStatus) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ForwarderPortStatus) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ForwarderPortStatus) GetExternalPort() uint32 {
	if m != nil {
		return m.ExternalPort
	}
	return 0
}

func (m *ForwarderPortStatus) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *ForwarderPortStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ServiceStatus
type ServiceStatus struct {
	Name   string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Status LeaseServiceStatus    `protobuf:"bytes,2,opt,name=status,proto3" json:"status" yaml:"status"`
	Ports  []ForwarderPortStatus `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports" yaml:"ports"`
	Ips    []LeaseIPStatus       `protobuf:"bytes,4,rep,name=ips,proto3" json:"ip" yaml:"ip"`
}

func (m *ServiceStatus) Reset()         { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()    {}
func (*ServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{3}
}
func (m *ServiceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatus.Merge(m, src)
}
func (m *ServiceStatus) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatus proto.InternalMessageInfo

func (m *ServiceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceStatus) GetStatus() LeaseServiceStatus {
	if m != nil {
		return m.Status
	}
	return LeaseServiceStatus{}
}

func (m *ServiceStatus) GetPorts() []ForwarderPortStatus {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ServiceStatus) GetIps() []LeaseIPStatus {
	if m != nil {
		return m.Ips
	}
	return nil
}

// SendManifestRequest is request type for the SendManifest Providers RPC method
type SendManifestRequest struct {
	LeaseId  v1beta4.LeaseID                                                 `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"LeaseID" yaml:"LeaseID"`
	Manifest github_com_akash_network_akash_api_go_manifest_v2beta2.Manifest `protobuf:"bytes,2,rep,name=manifest,proto3,castrepeated=github.com/akash-network/akash-api/go/manifest/v2beta2.Manifest" json:"manifest" yaml:"manifest"`
}

func (m *SendManifestRequest) Reset()         { *m = SendManifestRequest{} }
func (m *SendManifestRequest) String() string { return proto.CompactTextString(m) }
func (*SendManifestRequest) ProtoMessage()    {}
func (*SendManifestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{4}
}
func (m *SendManifestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendManifestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendManifestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendManifestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendManifestRequest.Merge(m, src)
}
func (m *SendManifestRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendManifestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendManifestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendManifestRequest proto.InternalMessageInfo

func (m *SendManifestRequest) GetLeaseId() v1beta4.LeaseID {
	if m != nil {
		return m.LeaseId
	}
	return v1beta4.LeaseID{}
}

func (m *SendManifestRequest) GetManifest() github_com_akash_network_akash_api_go_manifest_v2beta2.Manifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

// SendManifestResponse is response type for the SendManifest Providers RPC method
type SendManifestResponse struct {
}

func (m *SendManifestResponse) Reset()         { *m = SendManifestResponse{} }
func (m *SendManifestResponse) String() string { return proto.CompactTextString(m) }
func (*SendManifestResponse) ProtoMessage()    {}
func (*SendManifestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{5}
}
func (m *SendManifestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendManifestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendManifestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendManifestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendManifestResponse.Merge(m, src)
}
func (m *SendManifestResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendManifestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendManifestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendManifestResponse proto.InternalMessageInfo

// ServiceLogsRequest
type ServiceLogsRequest struct {
	LeaseId  v1beta4.LeaseID `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"LeaseID" yaml:"LeaseID"`
	Services []string        `protobuf:"bytes,2,rep,name=services,proto3" json:"services" yaml:"services"`
}

func (m *ServiceLogsRequest) Reset()         { *m = ServiceLogsRequest{} }
func (m *ServiceLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceLogsRequest) ProtoMessage()    {}
func (*ServiceLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{6}
}
func (m *ServiceLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLogsRequest.Merge(m, src)
}
func (m *ServiceLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLogsRequest proto.InternalMessageInfo

func (m *ServiceLogsRequest) GetLeaseId() v1beta4.LeaseID {
	if m != nil {
		return m.LeaseId
	}
	return v1beta4.LeaseID{}
}

func (m *ServiceLogsRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

// ServiceLogs
type ServiceLogs struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" yaml:"name"`
	Logs []byte `protobuf:"bytes,2,opt,name=logs,proto3" json:"logs" yaml:"logs"`
}

func (m *ServiceLogs) Reset()         { *m = ServiceLogs{} }
func (m *ServiceLogs) String() string { return proto.CompactTextString(m) }
func (*ServiceLogs) ProtoMessage()    {}
func (*ServiceLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{7}
}
func (m *ServiceLogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceLogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLogs.Merge(m, src)
}
func (m *ServiceLogs) XXX_Size() int {
	return m.Size()
}
func (m *ServiceLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLogs proto.InternalMessageInfo

func (m *ServiceLogs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceLogs) GetLogs() []byte {
	if m != nil {
		return m.Logs
	}
	return nil
}

// ServiceLogsResponse
type ServiceLogsResponse struct {
	Services []*ServiceLogs `protobuf:"bytes,1,rep,name=services,proto3" json:"LeaseID" yaml:"LeaseID"`
}

func (m *ServiceLogsResponse) Reset()         { *m = ServiceLogsResponse{} }
func (m *ServiceLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceLogsResponse) ProtoMessage()    {}
func (*ServiceLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{8}
}
func (m *ServiceLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceLogsResponse.Merge(m, src)
}
func (m *ServiceLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceLogsResponse proto.InternalMessageInfo

func (m *ServiceLogsResponse) GetServices() []*ServiceLogs {
	if m != nil {
		return m.Services
	}
	return nil
}

// ShellRequest
type ShellRequest struct {
	LeaseId v1beta4.LeaseID `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"LeaseID" yaml:"LeaseID"`
}

func (m *ShellRequest) Reset()         { *m = ShellRequest{} }
func (m *ShellRequest) String() string { return proto.CompactTextString(m) }
func (*ShellRequest) ProtoMessage()    {}
func (*ShellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{9}
}
func (m *ShellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShellRequest.Merge(m, src)
}
func (m *ShellRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShellRequest proto.InternalMessageInfo

func (m *ShellRequest) GetLeaseId() v1beta4.LeaseID {
	if m != nil {
		return m.LeaseId
	}
	return v1beta4.LeaseID{}
}

// ServiceStatusRequest
type ServiceStatusRequest struct {
	LeaseId  v1beta4.LeaseID `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"LeaseID" yaml:"LeaseID"`
	Services []string        `protobuf:"bytes,2,rep,name=services,proto3" json:"services" yaml:"services"`
}

func (m *ServiceStatusRequest) Reset()         { *m = ServiceStatusRequest{} }
func (m *ServiceStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusRequest) ProtoMessage()    {}
func (*ServiceStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{10}
}
func (m *ServiceStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusRequest.Merge(m, src)
}
func (m *ServiceStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusRequest proto.InternalMessageInfo

func (m *ServiceStatusRequest) GetLeaseId() v1beta4.LeaseID {
	if m != nil {
		return m.LeaseId
	}
	return v1beta4.LeaseID{}
}

func (m *ServiceStatusRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

// ServiceStatusResponse
type ServiceStatusResponse struct {
	Services []ServiceStatus `protobuf:"bytes,1,rep,name=services,proto3" json:"services" yaml:"services"`
}

func (m *ServiceStatusResponse) Reset()         { *m = ServiceStatusResponse{} }
func (m *ServiceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ServiceStatusResponse) ProtoMessage()    {}
func (*ServiceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a2116fc700fbddb, []int{11}
}
func (m *ServiceStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceStatusResponse.Merge(m, src)
}
func (m *ServiceStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServiceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceStatusResponse proto.InternalMessageInfo

func (m *ServiceStatusResponse) GetServices() []ServiceStatus {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*LeaseServiceStatus)(nil), "akash.provider.lease.v1.LeaseServiceStatus")
	proto.RegisterType((*LeaseIPStatus)(nil), "akash.provider.lease.v1.LeaseIPStatus")
	proto.RegisterType((*ForwarderPortStatus)(nil), "akash.provider.lease.v1.ForwarderPortStatus")
	proto.RegisterType((*ServiceStatus)(nil), "akash.provider.lease.v1.ServiceStatus")
	proto.RegisterType((*SendManifestRequest)(nil), "akash.provider.lease.v1.SendManifestRequest")
	proto.RegisterType((*SendManifestResponse)(nil), "akash.provider.lease.v1.SendManifestResponse")
	proto.RegisterType((*ServiceLogsRequest)(nil), "akash.provider.lease.v1.ServiceLogsRequest")
	proto.RegisterType((*ServiceLogs)(nil), "akash.provider.lease.v1.ServiceLogs")
	proto.RegisterType((*ServiceLogsResponse)(nil), "akash.provider.lease.v1.ServiceLogsResponse")
	proto.RegisterType((*ShellRequest)(nil), "akash.provider.lease.v1.ShellRequest")
	proto.RegisterType((*ServiceStatusRequest)(nil), "akash.provider.lease.v1.ServiceStatusRequest")
	proto.RegisterType((*ServiceStatusResponse)(nil), "akash.provider.lease.v1.ServiceStatusResponse")
}

func init() {
	proto.RegisterFile("akash/provider/lease/v1/service.proto", fileDescriptor_3a2116fc700fbddb)
}

var fileDescriptor_3a2116fc700fbddb = []byte{
	// 1017 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xae, 0xed, 0xc4, 0x1e, 0xc7, 0x2d, 0x9d, 0x04, 0x62, 0x22, 0xe2, 0x31, 0x53, 0x5a,
	0xa5, 0x4a, 0xb2, 0xdb, 0x18, 0x24, 0x24, 0x7a, 0x40, 0x5a, 0x10, 0x55, 0xa5, 0x82, 0xd2, 0xcd,
	0x0d, 0x0e, 0xd6, 0x38, 0x3b, 0xac, 0x57, 0x59, 0x7b, 0x96, 0xd9, 0xb5, 0x4b, 0x6f, 0xfc, 0x04,
	0xfe, 0x00, 0x17, 0x8e, 0x95, 0x40, 0xdc, 0xf9, 0x03, 0x3d, 0xf6, 0xd8, 0xd3, 0x82, 0x92, 0x9b,
	0x0f, 0x1c, 0xfc, 0x0b, 0xd0, 0x7c, 0xec, 0xae, 0x1d, 0x93, 0x60, 0x40, 0x44, 0x3d, 0x75, 0xdf,
	0x67, 0x9e, 0xf7, 0xeb, 0x99, 0x79, 0x5f, 0x37, 0xe0, 0x0e, 0x39, 0x25, 0x71, 0xdf, 0x8e, 0x38,
	0x1b, 0x07, 0x1e, 0xe5, 0x76, 0x48, 0x49, 0x4c, 0xed, 0xf1, 0xa1, 0x1d, 0x53, 0x3e, 0x0e, 0x4e,
	0xa8, 0x15, 0x71, 0x96, 0x30, 0xb8, 0x25, 0x69, 0x56, 0x46, 0xb3, 0x24, 0xcd, 0x1a, 0x1f, 0x6e,
	0x63, 0xe5, 0x3f, 0x20, 0xc3, 0xe0, 0x6b, 0x1a, 0x27, 0xf6, 0xb8, 0xd3, 0xa3, 0x09, 0xe9, 0xd8,
	0x3e, 0x67, 0xa3, 0x48, 0x39, 0x6f, 0xb7, 0x33, 0x0e, 0x3f, 0xa5, 0x89, 0x3d, 0x3e, 0x14, 0x8c,
	0x0f, 0x54, 0x26, 0xcd, 0xd8, 0xf4, 0x99, 0xcf, 0xe4, 0xa7, 0x2d, 0xbe, 0x14, 0x8a, 0x9f, 0x9b,
	0x00, 0x3e, 0x16, 0xac, 0x63, 0x55, 0xcb, 0x71, 0x42, 0x92, 0x51, 0x0c, 0xdf, 0x01, 0x35, 0x32,
	0x26, 0x41, 0x48, 0x7a, 0x21, 0x6d, 0x1a, 0x6d, 0x63, 0xb7, 0xe2, 0x16, 0x00, 0xdc, 0x04, 0x95,
	0x84, 0x25, 0x24, 0x6c, 0x9a, 0xf2, 0x44, 0x19, 0x10, 0x82, 0xf2, 0x88, 0x07, 0x71, 0xb3, 0xd4,
	0x2e, 0xed, 0xd6, 0x5c, 0xf9, 0x0d, 0x6d, 0xb0, 0xc1, 0x7a, 0xa2, 0x4d, 0xea, 0x75, 0x7d, 0x3a,
	0xa4, 0x9c, 0x24, 0x01, 0x1b, 0x36, 0xcb, 0x6d, 0x63, 0xb7, 0xe4, 0xc2, 0xec, 0xe8, 0x61, 0x7e,
	0x02, 0xb7, 0x41, 0x95, 0xd3, 0x28, 0x0c, 0x4e, 0x48, 0xdc, 0xac, 0xc8, 0xe8, 0xb9, 0x0d, 0xef,
	0x81, 0x37, 0x46, 0x91, 0x47, 0x12, 0xea, 0x75, 0x73, 0xce, 0xaa, 0xe4, 0xdc, 0xd4, 0xb8, 0x9b,
	0x51, 0xef, 0x80, 0x1b, 0x9c, 0x12, 0xef, 0x59, 0x41, 0x5c, 0x93, 0xc4, 0x86, 0x44, 0x73, 0xda,
	0x01, 0x80, 0x79, 0x57, 0x05, 0xb5, 0x2a, 0xa9, 0xb7, 0xf2, 0x93, 0x8c, 0x8e, 0xff, 0x30, 0x40,
	0x43, 0x8a, 0xf5, 0xe8, 0x48, 0xeb, 0xb4, 0x07, 0xca, 0x11, 0xe3, 0x89, 0x94, 0xa8, 0xe1, 0x6c,
	0x4d, 0x52, 0x24, 0xed, 0x69, 0x8a, 0xea, 0xcf, 0xc8, 0x20, 0xfc, 0x08, 0x0b, 0x0b, 0xbb, 0x12,
	0x84, 0x5f, 0x80, 0x06, 0xfd, 0x36, 0xa1, 0x7c, 0x48, 0xc2, 0xae, 0xf4, 0x32, 0xa5, 0xd7, 0xbd,
	0x49, 0x8a, 0xe6, 0x0f, 0xa6, 0x29, 0xda, 0x54, 0xee, 0x73, 0x30, 0x76, 0xd7, 0x33, 0xfb, 0x48,
	0xc4, 0x7b, 0x00, 0xaa, 0xf2, 0x12, 0x4f, 0x58, 0xd8, 0x2c, 0xb5, 0x8d, 0xdd, 0x9a, 0x83, 0x26,
	0x29, 0xca, 0xb1, 0x69, 0x8a, 0x6e, 0xea, 0x22, 0x34, 0x82, 0xdd, 0xfc, 0x10, 0xde, 0x06, 0x66,
	0x10, 0xc9, 0x8b, 0xa8, 0x39, 0x1b, 0x93, 0x14, 0x99, 0x41, 0x34, 0x4d, 0x51, 0x4d, 0x39, 0x04,
	0x11, 0x76, 0xcd, 0x20, 0xc2, 0x3f, 0x98, 0x60, 0xe3, 0x33, 0xc6, 0x9f, 0x12, 0xee, 0x51, 0x2e,
	0x72, 0x16, 0x6d, 0xf7, 0x59, 0xac, 0xda, 0xae, 0xa9, 0xb6, 0x85, 0x5d, 0xb4, 0x2d, 0x2c, 0xec,
	0x4a, 0x30, 0xd7, 0xc8, 0xfc, 0x57, 0x1a, 0x95, 0xfe, 0x9b, 0x46, 0x36, 0xa8, 0xc8, 0x96, 0x75,
	0xa7, 0x6f, 0x4f, 0x52, 0xa4, 0x80, 0x69, 0x8a, 0xd6, 0x67, 0xd4, 0xc1, 0xae, 0x82, 0x45, 0xb5,
	0x43, 0x32, 0xa0, 0xf2, 0xf1, 0xe9, 0xd6, 0x84, 0x5d, 0x54, 0x2b, 0x2c, 0xec, 0x4a, 0x10, 0xbf,
	0x32, 0x41, 0x63, 0x7e, 0x70, 0x32, 0x77, 0x63, 0x09, 0x77, 0xe8, 0x81, 0xd5, 0x58, 0xba, 0x49,
	0x6d, 0xea, 0x9d, 0x3d, 0xeb, 0x92, 0x15, 0x60, 0x2d, 0x8e, 0xa8, 0x83, 0x5e, 0xa4, 0x68, 0x65,
	0x92, 0x22, 0x1d, 0x62, 0x9a, 0xa2, 0x86, 0xca, 0xa0, 0x6c, 0xec, 0xea, 0x03, 0x48, 0x40, 0x45,
	0x28, 0xa3, 0x06, 0xb3, 0xde, 0xd9, 0xbf, 0x34, 0xc9, 0x5f, 0xdc, 0xb4, 0xb3, 0xa3, 0xb3, 0xa8,
	0x10, 0x33, 0xa2, 0x09, 0x53, 0x88, 0x26, 0xfe, 0x85, 0x4f, 0x40, 0x29, 0x88, 0xe2, 0x66, 0x59,
	0x26, 0xb8, 0x7b, 0x75, 0x17, 0xd9, 0xec, 0x38, 0x5b, 0x3a, 0xf4, 0xc2, 0xcb, 0x13, 0xb1, 0xf0,
	0x8f, 0x26, 0xd8, 0x38, 0xa6, 0x43, 0xef, 0x73, 0xbd, 0xf5, 0x5c, 0xfa, 0xcd, 0x88, 0xc6, 0x09,
	0xfc, 0x0a, 0x54, 0x65, 0xbc, 0x6e, 0xe0, 0x49, 0x91, 0xeb, 0x9d, 0x1d, 0x9d, 0x4f, 0xed, 0x3e,
	0x4b, 0xef, 0x3e, 0x9d, 0xec, 0x53, 0xe7, 0x5d, 0x9d, 0x66, 0x4d, 0x03, 0xd3, 0x14, 0xdd, 0x50,
	0xb9, 0x34, 0x80, 0xdd, 0x35, 0x19, 0xf1, 0x91, 0x07, 0x7f, 0x32, 0x40, 0x35, 0x5b, 0xb3, 0x4d,
	0x53, 0x76, 0x53, 0x44, 0x57, 0xb0, 0xa5, 0xb7, 0xaf, 0xf5, 0x50, 0x6c, 0x5f, 0x87, 0x8b, 0xe8,
	0x67, 0x29, 0xaa, 0x66, 0x75, 0x8a, 0x09, 0xcc, 0xb8, 0xc5, 0x04, 0x66, 0x08, 0x7e, 0xfe, 0x1b,
	0xfa, 0xd8, 0x0f, 0x92, 0xfe, 0xa8, 0x67, 0x9d, 0xb0, 0x81, 0x2d, 0x63, 0x1f, 0x0c, 0x69, 0xf2,
	0x94, 0xf1, 0x53, 0x6d, 0x91, 0x28, 0xb0, 0x7d, 0xb6, 0xb0, 0xee, 0xad, 0x5c, 0x89, 0x3c, 0x3e,
	0x7e, 0x0b, 0x6c, 0xce, 0x6b, 0x14, 0x47, 0x6c, 0x18, 0x53, 0xfc, 0xb3, 0x01, 0xa0, 0x7e, 0x2d,
	0x8f, 0x99, 0x1f, 0x5f, 0x8b, 0x76, 0x0f, 0x40, 0x55, 0xff, 0x9e, 0xc5, 0x52, 0x3a, 0xbd, 0x8d,
	0x32, 0xac, 0xd0, 0x22, 0x43, 0xb0, 0x9b, 0x1f, 0x62, 0x1f, 0xd4, 0x67, 0xea, 0xfd, 0x67, 0x53,
	0xb4, 0x07, 0xca, 0x21, 0xf3, 0xd5, 0x0c, 0xad, 0x2b, 0xb2, 0xb0, 0x0b, 0xb2, 0xb0, 0xb0, 0x2b,
	0x41, 0x3c, 0x16, 0xaf, 0x6a, 0x46, 0x18, 0x25, 0x18, 0xec, 0xce, 0x14, 0x6f, 0xc8, 0x7b, 0x7f,
	0xef, 0xd2, 0x57, 0x3c, 0xe3, 0xef, 0xec, 0x5c, 0x2d, 0x4e, 0xd1, 0xe0, 0x29, 0x58, 0x3f, 0xee,
	0xd3, 0x30, 0xbc, 0x8e, 0xab, 0xc0, 0xbf, 0x18, 0xe2, 0x5d, 0xcc, 0x2c, 0x8b, 0xd7, 0xff, 0x01,
	0x7c, 0x67, 0x80, 0x37, 0x2f, 0x94, 0xac, 0xaf, 0xc6, 0x5f, 0xb8, 0x9a, 0xbb, 0x7f, 0x77, 0x35,
	0x7a, 0xc1, 0xdc, 0xd6, 0xc5, 0x2f, 0x57, 0x42, 0xe7, 0xd7, 0x32, 0xa8, 0xca, 0xae, 0xdc, 0xa3,
	0x4f, 0xa0, 0xb8, 0xaf, 0x99, 0xc9, 0x82, 0xfb, 0x57, 0xe4, 0x5c, 0x58, 0x52, 0xdb, 0x07, 0x4b,
	0xb2, 0x75, 0x8b, 0xc3, 0x8b, 0xbf, 0x22, 0x07, 0xcb, 0x75, 0x98, 0xa5, 0xb3, 0x96, 0xa5, 0xeb,
	0x7c, 0x62, 0x08, 0x12, 0x4e, 0xc9, 0xe0, 0x3a, 0xb3, 0xde, 0x37, 0x60, 0xff, 0xc2, 0x94, 0x2f,
	0x33, 0x62, 0x59, 0xb6, 0xfd, 0xe5, 0xc8, 0xba, 0xc3, 0x08, 0xdc, 0x9a, 0xeb, 0xf0, 0x7f, 0xce,
	0x77, 0xdf, 0x70, 0x9e, 0xbc, 0x38, 0x6b, 0x19, 0x2f, 0xcf, 0x5a, 0xc6, 0xef, 0x67, 0x2d, 0xe3,
	0xfb, 0xf3, 0xd6, 0xca, 0xcb, 0xf3, 0xd6, 0xca, 0xab, 0xf3, 0xd6, 0xca, 0x97, 0x1f, 0x2e, 0xb7,
	0xef, 0x17, 0xfe, 0x3c, 0xe8, 0xad, 0xca, 0xff, 0x91, 0xbc, 0xff, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3d, 0x85, 0x37, 0x23, 0x40, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeaseRPCClient is the client API for LeaseRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaseRPCClient interface {
	// SendManifest sends manifest to the provider
	SendManifest(ctx context.Context, in *SendManifestRequest, opts ...grpc.CallOption) (*SendManifestResponse, error)
	// ServiceStatus
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error)
	// StreamServiceStatus
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (LeaseRPC_StreamServiceStatusClient, error)
	// ServiceLogs
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (*ServiceLogsResponse, error)
	// StreamServiceLogs
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (LeaseRPC_StreamServiceLogsClient, error)
}

type leaseRPCClient struct {
	cc grpc1.ClientConn
}

func NewLeaseRPCClient(cc grpc1.ClientConn) LeaseRPCClient {
	return &leaseRPCClient{cc}
}

func (c *leaseRPCClient) SendManifest(ctx context.Context, in *SendManifestRequest, opts ...grpc.CallOption) (*SendManifestResponse, error) {
	out := new(SendManifestResponse)
	err := c.cc.Invoke(ctx, "/akash.provider.lease.v1.LeaseRPC/SendManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseRPCClient) ServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (*ServiceStatusResponse, error) {
	out := new(ServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/akash.provider.lease.v1.LeaseRPC/ServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseRPCClient) StreamServiceStatus(ctx context.Context, in *ServiceStatusRequest, opts ...grpc.CallOption) (LeaseRPC_StreamServiceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LeaseRPC_serviceDesc.Streams[0], "/akash.provider.lease.v1.LeaseRPC/StreamServiceStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaseRPCStreamServiceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LeaseRPC_StreamServiceStatusClient interface {
	Recv() (*ServiceStatusResponse, error)
	grpc.ClientStream
}

type leaseRPCStreamServiceStatusClient struct {
	grpc.ClientStream
}

func (x *leaseRPCStreamServiceStatusClient) Recv() (*ServiceStatusResponse, error) {
	m := new(ServiceStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leaseRPCClient) ServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (*ServiceLogsResponse, error) {
	out := new(ServiceLogsResponse)
	err := c.cc.Invoke(ctx, "/akash.provider.lease.v1.LeaseRPC/ServiceLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseRPCClient) StreamServiceLogs(ctx context.Context, in *ServiceLogsRequest, opts ...grpc.CallOption) (LeaseRPC_StreamServiceLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LeaseRPC_serviceDesc.Streams[1], "/akash.provider.lease.v1.LeaseRPC/StreamServiceLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaseRPCStreamServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LeaseRPC_StreamServiceLogsClient interface {
	Recv() (*ServiceLogsResponse, error)
	grpc.ClientStream
}

type leaseRPCStreamServiceLogsClient struct {
	grpc.ClientStream
}

func (x *leaseRPCStreamServiceLogsClient) Recv() (*ServiceLogsResponse, error) {
	m := new(ServiceLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaseRPCServer is the server API for LeaseRPC service.
type LeaseRPCServer interface {
	// SendManifest sends manifest to the provider
	SendManifest(context.Context, *SendManifestRequest) (*SendManifestResponse, error)
	// ServiceStatus
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ServiceStatus(context.Context, *ServiceStatusRequest) (*ServiceStatusResponse, error)
	// StreamServiceStatus
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamServiceStatus(*ServiceStatusRequest, LeaseRPC_StreamServiceStatusServer) error
	// ServiceLogs
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	ServiceLogs(context.Context, *ServiceLogsRequest) (*ServiceLogsResponse, error)
	// StreamServiceLogs
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamServiceLogs(*ServiceLogsRequest, LeaseRPC_StreamServiceLogsServer) error
}

// UnimplementedLeaseRPCServer can be embedded to have forward compatible implementations.
type UnimplementedLeaseRPCServer struct {
}

func (*UnimplementedLeaseRPCServer) SendManifest(ctx context.Context, req *SendManifestRequest) (*SendManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendManifest not implemented")
}
func (*UnimplementedLeaseRPCServer) ServiceStatus(ctx context.Context, req *ServiceStatusRequest) (*ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStatus not implemented")
}
func (*UnimplementedLeaseRPCServer) StreamServiceStatus(req *ServiceStatusRequest, srv LeaseRPC_StreamServiceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServiceStatus not implemented")
}
func (*UnimplementedLeaseRPCServer) ServiceLogs(ctx context.Context, req *ServiceLogsRequest) (*ServiceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceLogs not implemented")
}
func (*UnimplementedLeaseRPCServer) StreamServiceLogs(req *ServiceLogsRequest, srv LeaseRPC_StreamServiceLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamServiceLogs not implemented")
}

func RegisterLeaseRPCServer(s grpc1.Server, srv LeaseRPCServer) {
	s.RegisterService(&_LeaseRPC_serviceDesc, srv)
}

func _LeaseRPC_SendManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseRPCServer).SendManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.provider.lease.v1.LeaseRPC/SendManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseRPCServer).SendManifest(ctx, req.(*SendManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseRPC_ServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseRPCServer).ServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.provider.lease.v1.LeaseRPC/ServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseRPCServer).ServiceStatus(ctx, req.(*ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseRPC_StreamServiceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaseRPCServer).StreamServiceStatus(m, &leaseRPCStreamServiceStatusServer{stream})
}

type LeaseRPC_StreamServiceStatusServer interface {
	Send(*ServiceStatusResponse) error
	grpc.ServerStream
}

type leaseRPCStreamServiceStatusServer struct {
	grpc.ServerStream
}

func (x *leaseRPCStreamServiceStatusServer) Send(m *ServiceStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LeaseRPC_ServiceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseRPCServer).ServiceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.provider.lease.v1.LeaseRPC/ServiceLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseRPCServer).ServiceLogs(ctx, req.(*ServiceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseRPC_StreamServiceLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaseRPCServer).StreamServiceLogs(m, &leaseRPCStreamServiceLogsServer{stream})
}

type LeaseRPC_StreamServiceLogsServer interface {
	Send(*ServiceLogsResponse) error
	grpc.ServerStream
}

type leaseRPCStreamServiceLogsServer struct {
	grpc.ServerStream
}

func (x *leaseRPCStreamServiceLogsServer) Send(m *ServiceLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LeaseRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.provider.lease.v1.LeaseRPC",
	HandlerType: (*LeaseRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendManifest",
			Handler:    _LeaseRPC_SendManifest_Handler,
		},
		{
			MethodName: "ServiceStatus",
			Handler:    _LeaseRPC_ServiceStatus_Handler,
		},
		{
			MethodName: "ServiceLogs",
			Handler:    _LeaseRPC_ServiceLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamServiceStatus",
			Handler:       _LeaseRPC_StreamServiceStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamServiceLogs",
			Handler:       _LeaseRPC_StreamServiceLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "akash/provider/lease/v1/service.proto",
}

func (m *LeaseServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseServiceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvailableReplicas != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.AvailableReplicas))
		i--
		dAtA[i] = 0x40
	}
	if m.ReadyReplicas != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ReadyReplicas))
		i--
		dAtA[i] = 0x38
	}
	if m.UpdatedReplicas != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.UpdatedReplicas))
		i--
		dAtA[i] = 0x30
	}
	if m.Replicas != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Replicas))
		i--
		dAtA[i] = 0x28
	}
	if m.ObservedGeneration != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ObservedGeneration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uris) > 0 {
		for iNdEx := len(m.Uris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Uris[iNdEx])
			copy(dAtA[i:], m.Uris[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Uris[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Total != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Available != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Available))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaseIPStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseIPStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaseIPStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintService(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Protocol) > 0 {
		i -= len(m.Protocol)
		copy(dAtA[i:], m.Protocol)
		i = encodeVarintService(dAtA, i, uint64(len(m.Protocol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExternalPort != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ExternalPort))
		i--
		dAtA[i] = 0x10
	}
	if m.Port != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForwarderPortStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwarderPortStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwarderPortStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Proto) > 0 {
		i -= len(m.Proto)
		copy(dAtA[i:], m.Proto)
		i = encodeVarintService(dAtA, i, uint64(len(m.Proto)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExternalPort != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.ExternalPort))
		i--
		dAtA[i] = 0x18
	}
	if m.Port != 0 {
		i = encodeVarintService(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintService(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ips) > 0 {
		for iNdEx := len(m.Ips) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ips[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendManifestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendManifestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendManifestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Manifest) > 0 {
		for iNdEx := len(m.Manifest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Manifest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LeaseId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SendManifestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendManifestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendManifestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LeaseId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceLogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceLogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceLogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		i -= len(m.Logs)
		copy(dAtA[i:], m.Logs)
		i = encodeVarintService(dAtA, i, uint64(len(m.Logs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintService(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LeaseId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintService(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.LeaseId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintService(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LeaseServiceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available != 0 {
		n += 1 + sovService(uint64(m.Available))
	}
	if m.Total != 0 {
		n += 1 + sovService(uint64(m.Total))
	}
	if len(m.Uris) > 0 {
		for _, s := range m.Uris {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if m.ObservedGeneration != 0 {
		n += 1 + sovService(uint64(m.ObservedGeneration))
	}
	if m.Replicas != 0 {
		n += 1 + sovService(uint64(m.Replicas))
	}
	if m.UpdatedReplicas != 0 {
		n += 1 + sovService(uint64(m.UpdatedReplicas))
	}
	if m.ReadyReplicas != 0 {
		n += 1 + sovService(uint64(m.ReadyReplicas))
	}
	if m.AvailableReplicas != 0 {
		n += 1 + sovService(uint64(m.AvailableReplicas))
	}
	return n
}

func (m *LeaseIPStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovService(uint64(m.Port))
	}
	if m.ExternalPort != 0 {
		n += 1 + sovService(uint64(m.ExternalPort))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ForwarderPortStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovService(uint64(m.Port))
	}
	if m.ExternalPort != 0 {
		n += 1 + sovService(uint64(m.ExternalPort))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = m.Status.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Ips) > 0 {
		for _, e := range m.Ips {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SendManifestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LeaseId.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Manifest) > 0 {
		for _, e := range m.Manifest {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *SendManifestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LeaseId.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceLogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Logs)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	return n
}

func (m *ServiceLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ShellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LeaseId.Size()
	n += 1 + l + sovService(uint64(l))
	return n
}

func (m *ServiceStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LeaseId.Size()
	n += 1 + l + sovService(uint64(l))
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ServiceStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LeaseServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			m.Available = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Available |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uris = append(m.Uris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			m.Replicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedReplicas", wireType)
			}
			m.UpdatedReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyReplicas", wireType)
			}
			m.ReadyReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReplicas", wireType)
			}
			m.AvailableReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseIPStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseIPStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseIPStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			m.ExternalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwarderPortStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwarderPortStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwarderPortStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPort", wireType)
			}
			m.ExternalPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, ForwarderPortStatus{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ips = append(m.Ips, LeaseIPStatus{})
			if err := m.Ips[len(m.Ips)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendManifestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendManifestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendManifestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifest = append(m.Manifest, v2beta2.Group{})
			if err := m.Manifest[len(m.Manifest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendManifestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendManifestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendManifestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceLogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceLogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceLogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs[:0], dAtA[iNdEx:postIndex]...)
			if m.Logs == nil {
				m.Logs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &ServiceLogs{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeaseId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, ServiceStatus{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
