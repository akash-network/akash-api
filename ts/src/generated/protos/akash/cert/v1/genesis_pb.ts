// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/cert/v1/genesis.proto (package akash.cert.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Certificate, CertificateJson } from "./cert_pb.ts";
import { file_akash_cert_v1_cert } from "./cert_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/cert/v1/genesis.proto.
 */
export const file_akash_cert_v1_genesis: GenFile = /*@__PURE__*/
  fileDesc("Chtha2FzaC9jZXJ0L3YxL2dlbmVzaXMucHJvdG8SDWFrYXNoLmNlcnQudjEisgEKEkdlbmVzaXNDZXJ0aWZpY2F0ZRJACgVvd25lchgBIAEoCUIx6t4fBW93bmVy8t4fDHlhbWw6Im93bmVyItK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJaCgtjZXJ0aWZpY2F0ZRgCIAEoCzIaLmFrYXNoLmNlcnQudjEuQ2VydGlmaWNhdGVCKcjeHwDq3h8LY2VydGlmaWNhdGXy3h8SeWFtbDoiY2VydGlmaWNhdGUiIosBCgxHZW5lc2lzU3RhdGUSewoMY2VydGlmaWNhdGVzGAEgAygLMiEuYWthc2guY2VydC52MS5HZW5lc2lzQ2VydGlmaWNhdGVCQsjeHwDq3h8MY2VydGlmaWNhdGVz8t4fE3lhbWw6ImNlcnRpZmljYXRlcyKq3x8TR2VuZXNpc0NlcnRpZmljYXRlc0IdWhtwa2cuYWt0LmRldi9nby9ub2RlL2NlcnQvdjFiBnByb3RvMw", [file_gogoproto_gogo, file_cosmos_proto_cosmos, file_akash_cert_v1_cert]);

/**
 * GenesisCertificate defines certificate entry at genesis.
 *
 * @generated from message akash.cert.v1.GenesisCertificate
 */
export type GenesisCertificate = Message<"akash.cert.v1.GenesisCertificate"> & {
  /**
   * Owner is the account address of the user who owns the certificate.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * Certificate holds the certificate.
   *
   * @generated from field: akash.cert.v1.Certificate certificate = 2;
   */
  certificate?: Certificate;
};

/**
 * GenesisCertificate defines certificate entry at genesis.
 *
 * @generated from message akash.cert.v1.GenesisCertificate
 */
export type GenesisCertificateJson = {
  /**
   * Owner is the account address of the user who owns the certificate.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;

  /**
   * Certificate holds the certificate.
   *
   * @generated from field: akash.cert.v1.Certificate certificate = 2;
   */
  certificate?: CertificateJson;
};

/**
 * Describes the message akash.cert.v1.GenesisCertificate.
 * Use `create(GenesisCertificateSchema)` to create a new message.
 */
export const GenesisCertificateSchema: GenMessage<GenesisCertificate, GenesisCertificateJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_genesis, 0);

/**
 * GenesisState defines the basic genesis state used by cert module.
 *
 * @generated from message akash.cert.v1.GenesisState
 */
export type GenesisState = Message<"akash.cert.v1.GenesisState"> & {
  /**
   * Certificates is a list of genesis certificates.
   *
   * @generated from field: repeated akash.cert.v1.GenesisCertificate certificates = 1;
   */
  certificates: GenesisCertificate[];
};

/**
 * GenesisState defines the basic genesis state used by cert module.
 *
 * @generated from message akash.cert.v1.GenesisState
 */
export type GenesisStateJson = {
  /**
   * Certificates is a list of genesis certificates.
   *
   * @generated from field: repeated akash.cert.v1.GenesisCertificate certificates = 1;
   */
  certificates?: GenesisCertificateJson[];
};

/**
 * Describes the message akash.cert.v1.GenesisState.
 * Use `create(GenesisStateSchema)` to create a new message.
 */
export const GenesisStateSchema: GenMessage<GenesisState, GenesisStateJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_genesis, 1);

