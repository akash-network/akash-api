// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file akash/inventory/v1/cpu.proto (package akash.inventory.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ResourcePair } from './resourcepair_pb.js';

/**
 * CPUInfo reports CPU details
 *
 * @generated from message akash.inventory.v1.CPUInfo
 */
export class CPUInfo extends Message<CPUInfo> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string vendor = 2;
   */
  vendor = '';

  /**
   * @generated from field: string model = 3;
   */
  model = '';

  /**
   * @generated from field: uint32 vcores = 4;
   */
  vcores = 0;

  constructor(data?: PartialMessage<CPUInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.inventory.v1.CPUInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'vendor', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'model', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'vcores', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CPUInfo {
    return new CPUInfo().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CPUInfo {
    return new CPUInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CPUInfo {
    return new CPUInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: CPUInfo | PlainMessage<CPUInfo> | undefined,
    b: CPUInfo | PlainMessage<CPUInfo> | undefined,
  ): boolean {
    return proto3.util.equals(CPUInfo, a, b);
  }
}

/**
 * CPU reports CPU inventory details
 *
 * @generated from message akash.inventory.v1.CPU
 */
export class CPU extends Message<CPU> {
  /**
   * @generated from field: akash.inventory.v1.ResourcePair quantity = 1;
   */
  quantity?: ResourcePair;

  /**
   * @generated from field: repeated akash.inventory.v1.CPUInfo info = 2;
   */
  info: CPUInfo[] = [];

  constructor(data?: PartialMessage<CPU>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.inventory.v1.CPU';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'quantity', kind: 'message', T: ResourcePair },
    { no: 2, name: 'info', kind: 'message', T: CPUInfo, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): CPU {
    return new CPU().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): CPU {
    return new CPU().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): CPU {
    return new CPU().fromJsonString(jsonString, options);
  }

  static equals(
    a: CPU | PlainMessage<CPU> | undefined,
    b: CPU | PlainMessage<CPU> | undefined,
  ): boolean {
    return proto3.util.equals(CPU, a, b);
  }
}
