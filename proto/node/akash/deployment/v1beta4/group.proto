syntax = "proto3";
package akash.deployment.v1beta4;

import "gogoproto/gogo.proto";
import "akash/deployment/v1/group.proto";
import "akash/deployment/v1beta4/groupspec.proto";

option go_package = "pkg.akt.dev/go/node/deployment/v1beta4";

// Group stores group id, state and specifications of a group.
message Group {
  option (gogoproto.equal) = false;

  // State is an enum which refers to state of group
  enum State {
    option (gogoproto.goproto_enum_prefix) = false;

    // Prefix should start with 0 in enum. So declaring dummy state.
    invalid = 0 [
        (gogoproto.enumvalue_customname) = "GroupStateInvalid"
    ];
    // GroupOpen denotes state for group open.
    open = 1 [
        (gogoproto.enumvalue_customname) = "GroupOpen"
    ];
    // GroupOrdered denotes state for group ordered.
    paused = 2 [
        (gogoproto.enumvalue_customname) = "GroupPaused"
    ];
    // GroupInsufficientFunds denotes state for group insufficient_funds.
    insufficient_funds = 3 [
        (gogoproto.enumvalue_customname) = "GroupInsufficientFunds"
    ];
    // GroupClosed denotes state for group closed.
    closed = 4 [
        (gogoproto.enumvalue_customname) = "GroupClosed"
    ];
  }

  // Id is the unique identifier for the group.
  akash.deployment.v1.GroupID id = 1 [
    (gogoproto.customname) = "ID",
    (gogoproto.nullable)   = false,
    (gogoproto.jsontag)    = "id",
    (gogoproto.moretags)   = "yaml:\"id\""
  ];

  // State represents the state of the group.
  State state = 2 [
    (gogoproto.jsontag)  = "state",
    (gogoproto.moretags) = "yaml:\"state\""
  ];

  // GroupSpec holds the specification of a the Group.
  GroupSpec group_spec = 3 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "GroupSpecs",
    (gogoproto.jsontag)      = "spec",
    (gogoproto.moretags)     = "yaml:\"spec\""
  ];

  int64 created_at = 4;
}
