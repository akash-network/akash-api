// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/orm/v1/orm.proto (package cosmos.orm.v1, syntax proto3)
/* eslint-disable */

import type { GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { extDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { MessageOptions } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_descriptor } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/orm/v1/orm.proto.
 */
export const file_cosmos_orm_v1_orm: GenFile = /*@__PURE__*/
  fileDesc("Chdjb3Ntb3Mvb3JtL3YxL29ybS5wcm90bxINY29zbW9zLm9ybS52MSKPAQoPVGFibGVEZXNjcmlwdG9yEjgKC3ByaW1hcnlfa2V5GAEgASgLMiMuY29zbW9zLm9ybS52MS5QcmltYXJ5S2V5RGVzY3JpcHRvchI2CgVpbmRleBgCIAMoCzInLmNvc21vcy5vcm0udjEuU2Vjb25kYXJ5SW5kZXhEZXNjcmlwdG9yEgoKAmlkGAMgASgNIj4KFFByaW1hcnlLZXlEZXNjcmlwdG9yEg4KBmZpZWxkcxgBIAEoCRIWCg5hdXRvX2luY3JlbWVudBgCIAEoCCJGChhTZWNvbmRhcnlJbmRleERlc2NyaXB0b3ISDgoGZmllbGRzGAEgASgJEgoKAmlkGAIgASgNEg4KBnVuaXF1ZRgDIAEoCCIhChNTaW5nbGV0b25EZXNjcmlwdG9yEgoKAmlkGAEgASgNOlgKBXRhYmxlEh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGO6z6jEgASgLMh4uY29zbW9zLm9ybS52MS5UYWJsZURlc2NyaXB0b3JSBXRhYmxlOmQKCXNpbmdsZXRvbhIfLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0aW9ucxjvs+oxIAEoCzIiLmNvc21vcy5vcm0udjEuU2luZ2xldG9uRGVzY3JpcHRvclIJc2luZ2xldG9uYgZwcm90bzM", [file_google_protobuf_descriptor]);

/**
 * TableDescriptor describes an ORM table.
 *
 * @generated from message cosmos.orm.v1.TableDescriptor
 */
export type TableDescriptor = Message<"cosmos.orm.v1.TableDescriptor"> & {
  /**
   * primary_key defines the primary key for the table.
   *
   * @generated from field: cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1;
   */
  primaryKey?: PrimaryKeyDescriptor;

  /**
   * index defines one or more secondary indexes.
   *
   * @generated from field: repeated cosmos.orm.v1.SecondaryIndexDescriptor index = 2;
   */
  index: SecondaryIndexDescriptor[];

  /**
   * id is a non-zero integer ID that must be unique within the
   * tables and singletons in this file. It may be deprecated in the future when this
   * can be auto-generated.
   *
   * @generated from field: uint32 id = 3;
   */
  id: number;
};

/**
 * TableDescriptor describes an ORM table.
 *
 * @generated from message cosmos.orm.v1.TableDescriptor
 */
export type TableDescriptorJson = {
  /**
   * primary_key defines the primary key for the table.
   *
   * @generated from field: cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1;
   */
  primaryKey?: PrimaryKeyDescriptorJson;

  /**
   * index defines one or more secondary indexes.
   *
   * @generated from field: repeated cosmos.orm.v1.SecondaryIndexDescriptor index = 2;
   */
  index?: SecondaryIndexDescriptorJson[];

  /**
   * id is a non-zero integer ID that must be unique within the
   * tables and singletons in this file. It may be deprecated in the future when this
   * can be auto-generated.
   *
   * @generated from field: uint32 id = 3;
   */
  id?: number;
};

/**
 * Describes the message cosmos.orm.v1.TableDescriptor.
 * Use `create(TableDescriptorSchema)` to create a new message.
 */
export const TableDescriptorSchema: GenMessage<TableDescriptor, TableDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_orm_v1_orm, 0);

/**
 * PrimaryKeyDescriptor describes a table primary key.
 *
 * @generated from message cosmos.orm.v1.PrimaryKeyDescriptor
 */
export type PrimaryKeyDescriptor = Message<"cosmos.orm.v1.PrimaryKeyDescriptor"> & {
  /**
   * fields is a comma-separated list of fields in the primary key. Spaces are
   * not allowed. Supported field types, their encodings, and any applicable constraints
   * are described below.
   *   - uint32 are encoded as 2,3,4 or 5 bytes using a compact encoding that
   *     is suitable for sorted iteration (not varint encoding). This type is
   *     well-suited for small integers.
   *   - uint64 are encoded as 2,4,6 or 9 bytes using a compact encoding that
   *     is suitable for sorted iteration (not varint encoding). This type is
   *     well-suited for small integers such as auto-incrementing sequences.
   *   - fixed32, fixed64 are encoded as big-endian fixed width bytes and support
   *   sorted iteration. These types are well-suited for encoding fixed with
   *   decimals as integers.
   *   - string's are encoded as raw bytes in terminal key segments and null-terminated
   *   in non-terminal segments. Null characters are thus forbidden in strings.
   *   string fields support sorted iteration.
   *   - bytes are encoded as raw bytes in terminal segments and length-prefixed
   *   with a 32-bit unsigned varint in non-terminal segments.
   *   - int32, sint32, int64, sint64, sfixed32, sfixed64 are encoded as fixed width bytes with
   *   an encoding that enables sorted iteration.
   *   - google.protobuf.Timestamp and google.protobuf.Duration are encoded
   *   as 12 bytes using an encoding that enables sorted iteration.
   *   - enum fields are encoded using varint encoding and do not support sorted
   *   iteration.
   *   - bool fields are encoded as a single byte 0 or 1.
   *
   * All other fields types are unsupported in keys including repeated and
   * oneof fields.
   *
   * Primary keys are prefixed by the varint encoded table id and the byte 0x0
   * plus any additional prefix specified by the schema.
   *
   * @generated from field: string fields = 1;
   */
  fields: string;

  /**
   * auto_increment specifies that the primary key is generated by an
   * auto-incrementing integer. If this is set to true fields must only
   * contain one field of that is of type uint64.
   *
   * @generated from field: bool auto_increment = 2;
   */
  autoIncrement: boolean;
};

/**
 * PrimaryKeyDescriptor describes a table primary key.
 *
 * @generated from message cosmos.orm.v1.PrimaryKeyDescriptor
 */
export type PrimaryKeyDescriptorJson = {
  /**
   * fields is a comma-separated list of fields in the primary key. Spaces are
   * not allowed. Supported field types, their encodings, and any applicable constraints
   * are described below.
   *   - uint32 are encoded as 2,3,4 or 5 bytes using a compact encoding that
   *     is suitable for sorted iteration (not varint encoding). This type is
   *     well-suited for small integers.
   *   - uint64 are encoded as 2,4,6 or 9 bytes using a compact encoding that
   *     is suitable for sorted iteration (not varint encoding). This type is
   *     well-suited for small integers such as auto-incrementing sequences.
   *   - fixed32, fixed64 are encoded as big-endian fixed width bytes and support
   *   sorted iteration. These types are well-suited for encoding fixed with
   *   decimals as integers.
   *   - string's are encoded as raw bytes in terminal key segments and null-terminated
   *   in non-terminal segments. Null characters are thus forbidden in strings.
   *   string fields support sorted iteration.
   *   - bytes are encoded as raw bytes in terminal segments and length-prefixed
   *   with a 32-bit unsigned varint in non-terminal segments.
   *   - int32, sint32, int64, sint64, sfixed32, sfixed64 are encoded as fixed width bytes with
   *   an encoding that enables sorted iteration.
   *   - google.protobuf.Timestamp and google.protobuf.Duration are encoded
   *   as 12 bytes using an encoding that enables sorted iteration.
   *   - enum fields are encoded using varint encoding and do not support sorted
   *   iteration.
   *   - bool fields are encoded as a single byte 0 or 1.
   *
   * All other fields types are unsupported in keys including repeated and
   * oneof fields.
   *
   * Primary keys are prefixed by the varint encoded table id and the byte 0x0
   * plus any additional prefix specified by the schema.
   *
   * @generated from field: string fields = 1;
   */
  fields?: string;

  /**
   * auto_increment specifies that the primary key is generated by an
   * auto-incrementing integer. If this is set to true fields must only
   * contain one field of that is of type uint64.
   *
   * @generated from field: bool auto_increment = 2;
   */
  autoIncrement?: boolean;
};

/**
 * Describes the message cosmos.orm.v1.PrimaryKeyDescriptor.
 * Use `create(PrimaryKeyDescriptorSchema)` to create a new message.
 */
export const PrimaryKeyDescriptorSchema: GenMessage<PrimaryKeyDescriptor, PrimaryKeyDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_orm_v1_orm, 1);

/**
 * PrimaryKeyDescriptor describes a table secondary index.
 *
 * @generated from message cosmos.orm.v1.SecondaryIndexDescriptor
 */
export type SecondaryIndexDescriptor = Message<"cosmos.orm.v1.SecondaryIndexDescriptor"> & {
  /**
   * fields is a comma-separated list of fields in the index. The supported
   * field types are the same as those for PrimaryKeyDescriptor.fields.
   * Index keys are prefixed by the varint encoded table id and the varint
   * encoded index id plus any additional prefix specified by the schema.
   *
   * In addition the field segments, non-unique index keys are suffixed with
   * any additional primary key fields not present in the index fields so that the
   * primary key can be reconstructed. Unique indexes instead of being suffixed
   * store the remaining primary key fields in the value..
   *
   * @generated from field: string fields = 1;
   */
  fields: string;

  /**
   * id is a non-zero integer ID that must be unique within the indexes for this
   * table and less than 32768. It may be deprecated in the future when this can
   * be auto-generated.
   *
   * @generated from field: uint32 id = 2;
   */
  id: number;

  /**
   * unique specifies that this an unique index.
   *
   * @generated from field: bool unique = 3;
   */
  unique: boolean;
};

/**
 * PrimaryKeyDescriptor describes a table secondary index.
 *
 * @generated from message cosmos.orm.v1.SecondaryIndexDescriptor
 */
export type SecondaryIndexDescriptorJson = {
  /**
   * fields is a comma-separated list of fields in the index. The supported
   * field types are the same as those for PrimaryKeyDescriptor.fields.
   * Index keys are prefixed by the varint encoded table id and the varint
   * encoded index id plus any additional prefix specified by the schema.
   *
   * In addition the field segments, non-unique index keys are suffixed with
   * any additional primary key fields not present in the index fields so that the
   * primary key can be reconstructed. Unique indexes instead of being suffixed
   * store the remaining primary key fields in the value..
   *
   * @generated from field: string fields = 1;
   */
  fields?: string;

  /**
   * id is a non-zero integer ID that must be unique within the indexes for this
   * table and less than 32768. It may be deprecated in the future when this can
   * be auto-generated.
   *
   * @generated from field: uint32 id = 2;
   */
  id?: number;

  /**
   * unique specifies that this an unique index.
   *
   * @generated from field: bool unique = 3;
   */
  unique?: boolean;
};

/**
 * Describes the message cosmos.orm.v1.SecondaryIndexDescriptor.
 * Use `create(SecondaryIndexDescriptorSchema)` to create a new message.
 */
export const SecondaryIndexDescriptorSchema: GenMessage<SecondaryIndexDescriptor, SecondaryIndexDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_orm_v1_orm, 2);

/**
 * TableDescriptor describes an ORM singleton table which has at most one instance.
 *
 * @generated from message cosmos.orm.v1.SingletonDescriptor
 */
export type SingletonDescriptor = Message<"cosmos.orm.v1.SingletonDescriptor"> & {
  /**
   * id is a non-zero integer ID that must be unique within the
   * tables and singletons in this file. It may be deprecated in the future when this
   * can be auto-generated.
   *
   * @generated from field: uint32 id = 1;
   */
  id: number;
};

/**
 * TableDescriptor describes an ORM singleton table which has at most one instance.
 *
 * @generated from message cosmos.orm.v1.SingletonDescriptor
 */
export type SingletonDescriptorJson = {
  /**
   * id is a non-zero integer ID that must be unique within the
   * tables and singletons in this file. It may be deprecated in the future when this
   * can be auto-generated.
   *
   * @generated from field: uint32 id = 1;
   */
  id?: number;
};

/**
 * Describes the message cosmos.orm.v1.SingletonDescriptor.
 * Use `create(SingletonDescriptorSchema)` to create a new message.
 */
export const SingletonDescriptorSchema: GenMessage<SingletonDescriptor, SingletonDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_orm_v1_orm, 3);

/**
 * table specifies that this message will be used as an ORM table. It cannot
 * be used together with the singleton option.
 *
 * @generated from extension: cosmos.orm.v1.TableDescriptor table = 104503790;
 */
export const table: GenExtension<MessageOptions, TableDescriptor> = /*@__PURE__*/
  extDesc(file_cosmos_orm_v1_orm, 0);

/**
 * singleton specifies that this message will be used as an ORM singleton. It cannot
 * be used together with the table option.
 *
 * @generated from extension: cosmos.orm.v1.SingletonDescriptor singleton = 104503791;
 */
export const singleton: GenExtension<MessageOptions, SingletonDescriptor> = /*@__PURE__*/
  extDesc(file_cosmos_orm_v1_orm, 1);

