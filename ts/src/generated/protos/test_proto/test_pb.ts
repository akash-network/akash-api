// Go support for Protocol Buffers - Google's data interchange format
//
// Copyright 2010 The Go Authors.  All rights reserved.
// https://github.com/golang/protobuf
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// A feature-rich test file for the protocol compiler and libraries.

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file test_proto/test.proto (package test_proto, syntax proto2)
/* eslint-disable */

import type { GenEnum, GenExtension, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, extDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file test_proto/test.proto.
 */
export const file_test_proto_test: GenFile = /*@__PURE__*/
  fileDesc("");

/**
 * @generated from message test_proto.GoEnum
 */
export type GoEnum = Message<"test_proto.GoEnum"> & {
  /**
   * @generated from field: required test_proto.FOO foo = 1;
   */
  foo: FOO;
};

/**
 * @generated from message test_proto.GoEnum
 */
export type GoEnumJson = {
  /**
   * @generated from field: required test_proto.FOO foo = 1;
   */
  foo?: FOOJson;
};

/**
 * Describes the message test_proto.GoEnum.
 * Use `create(GoEnumSchema)` to create a new message.
 */
export const GoEnumSchema: GenMessage<GoEnum, GoEnumJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 0);

/**
 * @generated from message test_proto.GoTestField
 */
export type GoTestField = Message<"test_proto.GoTestField"> & {
  /**
   * @generated from field: required string Label = 1;
   */
  Label: string;

  /**
   * @generated from field: required string Type = 2;
   */
  Type: string;
};

/**
 * @generated from message test_proto.GoTestField
 */
export type GoTestFieldJson = {
  /**
   * @generated from field: required string Label = 1;
   */
  Label?: string;

  /**
   * @generated from field: required string Type = 2;
   */
  Type?: string;
};

/**
 * Describes the message test_proto.GoTestField.
 * Use `create(GoTestFieldSchema)` to create a new message.
 */
export const GoTestFieldSchema: GenMessage<GoTestField, GoTestFieldJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 1);

/**
 * @generated from message test_proto.GoTest
 */
export type GoTest = Message<"test_proto.GoTest"> & {
  /**
   * Some typical parameters
   *
   * @generated from field: required test_proto.GoTest.KIND Kind = 1;
   */
  Kind: GoTest_KIND;

  /**
   * @generated from field: optional string Table = 2;
   */
  Table: string;

  /**
   * @generated from field: optional int32 Param = 3;
   */
  Param: number;

  /**
   * Required, repeated and optional foreign fields.
   *
   * @generated from field: required test_proto.GoTestField RequiredField = 4;
   */
  RequiredField?: GoTestField;

  /**
   * @generated from field: repeated test_proto.GoTestField RepeatedField = 5;
   */
  RepeatedField: GoTestField[];

  /**
   * @generated from field: optional test_proto.GoTestField OptionalField = 6;
   */
  OptionalField?: GoTestField;

  /**
   * Required fields of all basic types
   *
   * @generated from field: required bool F_Bool_required = 10;
   */
  FBoolRequired: boolean;

  /**
   * @generated from field: required int32 F_Int32_required = 11;
   */
  FInt32Required: number;

  /**
   * @generated from field: required int64 F_Int64_required = 12;
   */
  FInt64Required: bigint;

  /**
   * @generated from field: required fixed32 F_Fixed32_required = 13;
   */
  FFixed32Required: number;

  /**
   * @generated from field: required fixed64 F_Fixed64_required = 14;
   */
  FFixed64Required: bigint;

  /**
   * @generated from field: required uint32 F_Uint32_required = 15;
   */
  FUint32Required: number;

  /**
   * @generated from field: required uint64 F_Uint64_required = 16;
   */
  FUint64Required: bigint;

  /**
   * @generated from field: required float F_Float_required = 17;
   */
  FFloatRequired: number;

  /**
   * @generated from field: required double F_Double_required = 18;
   */
  FDoubleRequired: number;

  /**
   * @generated from field: required string F_String_required = 19;
   */
  FStringRequired: string;

  /**
   * @generated from field: required bytes F_Bytes_required = 101;
   */
  FBytesRequired: Uint8Array;

  /**
   * @generated from field: required sint32 F_Sint32_required = 102;
   */
  FSint32Required: number;

  /**
   * @generated from field: required sint64 F_Sint64_required = 103;
   */
  FSint64Required: bigint;

  /**
   * @generated from field: required sfixed32 F_Sfixed32_required = 104;
   */
  FSfixed32Required: number;

  /**
   * @generated from field: required sfixed64 F_Sfixed64_required = 105;
   */
  FSfixed64Required: bigint;

  /**
   * Repeated fields of all basic types
   *
   * @generated from field: repeated bool F_Bool_repeated = 20;
   */
  FBoolRepeated: boolean[];

  /**
   * @generated from field: repeated int32 F_Int32_repeated = 21;
   */
  FInt32Repeated: number[];

  /**
   * @generated from field: repeated int64 F_Int64_repeated = 22;
   */
  FInt64Repeated: bigint[];

  /**
   * @generated from field: repeated fixed32 F_Fixed32_repeated = 23;
   */
  FFixed32Repeated: number[];

  /**
   * @generated from field: repeated fixed64 F_Fixed64_repeated = 24;
   */
  FFixed64Repeated: bigint[];

  /**
   * @generated from field: repeated uint32 F_Uint32_repeated = 25;
   */
  FUint32Repeated: number[];

  /**
   * @generated from field: repeated uint64 F_Uint64_repeated = 26;
   */
  FUint64Repeated: bigint[];

  /**
   * @generated from field: repeated float F_Float_repeated = 27;
   */
  FFloatRepeated: number[];

  /**
   * @generated from field: repeated double F_Double_repeated = 28;
   */
  FDoubleRepeated: number[];

  /**
   * @generated from field: repeated string F_String_repeated = 29;
   */
  FStringRepeated: string[];

  /**
   * @generated from field: repeated bytes F_Bytes_repeated = 201;
   */
  FBytesRepeated: Uint8Array[];

  /**
   * @generated from field: repeated sint32 F_Sint32_repeated = 202;
   */
  FSint32Repeated: number[];

  /**
   * @generated from field: repeated sint64 F_Sint64_repeated = 203;
   */
  FSint64Repeated: bigint[];

  /**
   * @generated from field: repeated sfixed32 F_Sfixed32_repeated = 204;
   */
  FSfixed32Repeated: number[];

  /**
   * @generated from field: repeated sfixed64 F_Sfixed64_repeated = 205;
   */
  FSfixed64Repeated: bigint[];

  /**
   * Optional fields of all basic types
   *
   * @generated from field: optional bool F_Bool_optional = 30;
   */
  FBoolOptional: boolean;

  /**
   * @generated from field: optional int32 F_Int32_optional = 31;
   */
  FInt32Optional: number;

  /**
   * @generated from field: optional int64 F_Int64_optional = 32;
   */
  FInt64Optional: bigint;

  /**
   * @generated from field: optional fixed32 F_Fixed32_optional = 33;
   */
  FFixed32Optional: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64_optional = 34;
   */
  FFixed64Optional: bigint;

  /**
   * @generated from field: optional uint32 F_Uint32_optional = 35;
   */
  FUint32Optional: number;

  /**
   * @generated from field: optional uint64 F_Uint64_optional = 36;
   */
  FUint64Optional: bigint;

  /**
   * @generated from field: optional float F_Float_optional = 37;
   */
  FFloatOptional: number;

  /**
   * @generated from field: optional double F_Double_optional = 38;
   */
  FDoubleOptional: number;

  /**
   * @generated from field: optional string F_String_optional = 39;
   */
  FStringOptional: string;

  /**
   * @generated from field: optional bytes F_Bytes_optional = 301;
   */
  FBytesOptional: Uint8Array;

  /**
   * @generated from field: optional sint32 F_Sint32_optional = 302;
   */
  FSint32Optional: number;

  /**
   * @generated from field: optional sint64 F_Sint64_optional = 303;
   */
  FSint64Optional: bigint;

  /**
   * @generated from field: optional sfixed32 F_Sfixed32_optional = 304;
   */
  FSfixed32Optional: number;

  /**
   * @generated from field: optional sfixed64 F_Sfixed64_optional = 305;
   */
  FSfixed64Optional: bigint;

  /**
   * Default-valued fields of all basic types
   *
   * @generated from field: optional bool F_Bool_defaulted = 40 [default = true];
   */
  FBoolDefaulted: boolean;

  /**
   * @generated from field: optional int32 F_Int32_defaulted = 41 [default = 32];
   */
  FInt32Defaulted: number;

  /**
   * @generated from field: optional int64 F_Int64_defaulted = 42 [default = 64];
   */
  FInt64Defaulted: bigint;

  /**
   * @generated from field: optional fixed32 F_Fixed32_defaulted = 43 [default = 320];
   */
  FFixed32Defaulted: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64_defaulted = 44 [default = 640];
   */
  FFixed64Defaulted: bigint;

  /**
   * @generated from field: optional uint32 F_Uint32_defaulted = 45 [default = 3200];
   */
  FUint32Defaulted: number;

  /**
   * @generated from field: optional uint64 F_Uint64_defaulted = 46 [default = 6400];
   */
  FUint64Defaulted: bigint;

  /**
   * @generated from field: optional float F_Float_defaulted = 47 [default = 314159];
   */
  FFloatDefaulted: number;

  /**
   * @generated from field: optional double F_Double_defaulted = 48 [default = 271828];
   */
  FDoubleDefaulted: number;

  /**
   * @generated from field: optional string F_String_defaulted = 49 [default = "hello, \"world!"
   * "];
   */
  FStringDefaulted: string;

  /**
   * @generated from field: optional bytes F_Bytes_defaulted = 401 [default = "Bignose"];
   */
  FBytesDefaulted: Uint8Array;

  /**
   * @generated from field: optional sint32 F_Sint32_defaulted = 402 [default = -32];
   */
  FSint32Defaulted: number;

  /**
   * @generated from field: optional sint64 F_Sint64_defaulted = 403 [default = -64];
   */
  FSint64Defaulted: bigint;

  /**
   * @generated from field: optional sfixed32 F_Sfixed32_defaulted = 404 [default = -32];
   */
  FSfixed32Defaulted: number;

  /**
   * @generated from field: optional sfixed64 F_Sfixed64_defaulted = 405 [default = -64];
   */
  FSfixed64Defaulted: bigint;

  /**
   * Packed repeated fields (no string or bytes).
   *
   * @generated from field: repeated bool F_Bool_repeated_packed = 50 [packed = true];
   */
  FBoolRepeatedPacked: boolean[];

  /**
   * @generated from field: repeated int32 F_Int32_repeated_packed = 51 [packed = true];
   */
  FInt32RepeatedPacked: number[];

  /**
   * @generated from field: repeated int64 F_Int64_repeated_packed = 52 [packed = true];
   */
  FInt64RepeatedPacked: bigint[];

  /**
   * @generated from field: repeated fixed32 F_Fixed32_repeated_packed = 53 [packed = true];
   */
  FFixed32RepeatedPacked: number[];

  /**
   * @generated from field: repeated fixed64 F_Fixed64_repeated_packed = 54 [packed = true];
   */
  FFixed64RepeatedPacked: bigint[];

  /**
   * @generated from field: repeated uint32 F_Uint32_repeated_packed = 55 [packed = true];
   */
  FUint32RepeatedPacked: number[];

  /**
   * @generated from field: repeated uint64 F_Uint64_repeated_packed = 56 [packed = true];
   */
  FUint64RepeatedPacked: bigint[];

  /**
   * @generated from field: repeated float F_Float_repeated_packed = 57 [packed = true];
   */
  FFloatRepeatedPacked: number[];

  /**
   * @generated from field: repeated double F_Double_repeated_packed = 58 [packed = true];
   */
  FDoubleRepeatedPacked: number[];

  /**
   * @generated from field: repeated sint32 F_Sint32_repeated_packed = 502 [packed = true];
   */
  FSint32RepeatedPacked: number[];

  /**
   * @generated from field: repeated sint64 F_Sint64_repeated_packed = 503 [packed = true];
   */
  FSint64RepeatedPacked: bigint[];

  /**
   * @generated from field: repeated sfixed32 F_Sfixed32_repeated_packed = 504 [packed = true];
   */
  FSfixed32RepeatedPacked: number[];

  /**
   * @generated from field: repeated sfixed64 F_Sfixed64_repeated_packed = 505 [packed = true];
   */
  FSfixed64RepeatedPacked: bigint[];

  /**
   * @generated from field: required test_proto.GoTest.RequiredGroup requiredgroup = 70;
   */
  requiredgroup?: GoTest_RequiredGroup;

  /**
   * @generated from field: repeated test_proto.GoTest.RepeatedGroup repeatedgroup = 80;
   */
  repeatedgroup: GoTest_RepeatedGroup[];

  /**
   * @generated from field: optional test_proto.GoTest.OptionalGroup optionalgroup = 90;
   */
  optionalgroup?: GoTest_OptionalGroup;
};

/**
 * @generated from message test_proto.GoTest
 */
export type GoTestJson = {
  /**
   * Some typical parameters
   *
   * @generated from field: required test_proto.GoTest.KIND Kind = 1;
   */
  Kind?: GoTest_KINDJson;

  /**
   * @generated from field: optional string Table = 2;
   */
  Table?: string;

  /**
   * @generated from field: optional int32 Param = 3;
   */
  Param?: number;

  /**
   * Required, repeated and optional foreign fields.
   *
   * @generated from field: required test_proto.GoTestField RequiredField = 4;
   */
  RequiredField?: GoTestFieldJson;

  /**
   * @generated from field: repeated test_proto.GoTestField RepeatedField = 5;
   */
  RepeatedField?: GoTestFieldJson[];

  /**
   * @generated from field: optional test_proto.GoTestField OptionalField = 6;
   */
  OptionalField?: GoTestFieldJson;

  /**
   * Required fields of all basic types
   *
   * @generated from field: required bool F_Bool_required = 10;
   */
  FBoolRequired?: boolean;

  /**
   * @generated from field: required int32 F_Int32_required = 11;
   */
  FInt32Required?: number;

  /**
   * @generated from field: required int64 F_Int64_required = 12;
   */
  FInt64Required?: string;

  /**
   * @generated from field: required fixed32 F_Fixed32_required = 13;
   */
  FFixed32Required?: number;

  /**
   * @generated from field: required fixed64 F_Fixed64_required = 14;
   */
  FFixed64Required?: string;

  /**
   * @generated from field: required uint32 F_Uint32_required = 15;
   */
  FUint32Required?: number;

  /**
   * @generated from field: required uint64 F_Uint64_required = 16;
   */
  FUint64Required?: string;

  /**
   * @generated from field: required float F_Float_required = 17;
   */
  FFloatRequired?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: required double F_Double_required = 18;
   */
  FDoubleRequired?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: required string F_String_required = 19;
   */
  FStringRequired?: string;

  /**
   * @generated from field: required bytes F_Bytes_required = 101;
   */
  FBytesRequired?: string;

  /**
   * @generated from field: required sint32 F_Sint32_required = 102;
   */
  FSint32Required?: number;

  /**
   * @generated from field: required sint64 F_Sint64_required = 103;
   */
  FSint64Required?: string;

  /**
   * @generated from field: required sfixed32 F_Sfixed32_required = 104;
   */
  FSfixed32Required?: number;

  /**
   * @generated from field: required sfixed64 F_Sfixed64_required = 105;
   */
  FSfixed64Required?: string;

  /**
   * Repeated fields of all basic types
   *
   * @generated from field: repeated bool F_Bool_repeated = 20;
   */
  FBoolRepeated?: boolean[];

  /**
   * @generated from field: repeated int32 F_Int32_repeated = 21;
   */
  FInt32Repeated?: number[];

  /**
   * @generated from field: repeated int64 F_Int64_repeated = 22;
   */
  FInt64Repeated?: string[];

  /**
   * @generated from field: repeated fixed32 F_Fixed32_repeated = 23;
   */
  FFixed32Repeated?: number[];

  /**
   * @generated from field: repeated fixed64 F_Fixed64_repeated = 24;
   */
  FFixed64Repeated?: string[];

  /**
   * @generated from field: repeated uint32 F_Uint32_repeated = 25;
   */
  FUint32Repeated?: number[];

  /**
   * @generated from field: repeated uint64 F_Uint64_repeated = 26;
   */
  FUint64Repeated?: string[];

  /**
   * @generated from field: repeated float F_Float_repeated = 27;
   */
  FFloatRepeated?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * @generated from field: repeated double F_Double_repeated = 28;
   */
  FDoubleRepeated?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * @generated from field: repeated string F_String_repeated = 29;
   */
  FStringRepeated?: string[];

  /**
   * @generated from field: repeated bytes F_Bytes_repeated = 201;
   */
  FBytesRepeated?: string[];

  /**
   * @generated from field: repeated sint32 F_Sint32_repeated = 202;
   */
  FSint32Repeated?: number[];

  /**
   * @generated from field: repeated sint64 F_Sint64_repeated = 203;
   */
  FSint64Repeated?: string[];

  /**
   * @generated from field: repeated sfixed32 F_Sfixed32_repeated = 204;
   */
  FSfixed32Repeated?: number[];

  /**
   * @generated from field: repeated sfixed64 F_Sfixed64_repeated = 205;
   */
  FSfixed64Repeated?: string[];

  /**
   * Optional fields of all basic types
   *
   * @generated from field: optional bool F_Bool_optional = 30;
   */
  FBoolOptional?: boolean;

  /**
   * @generated from field: optional int32 F_Int32_optional = 31;
   */
  FInt32Optional?: number;

  /**
   * @generated from field: optional int64 F_Int64_optional = 32;
   */
  FInt64Optional?: string;

  /**
   * @generated from field: optional fixed32 F_Fixed32_optional = 33;
   */
  FFixed32Optional?: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64_optional = 34;
   */
  FFixed64Optional?: string;

  /**
   * @generated from field: optional uint32 F_Uint32_optional = 35;
   */
  FUint32Optional?: number;

  /**
   * @generated from field: optional uint64 F_Uint64_optional = 36;
   */
  FUint64Optional?: string;

  /**
   * @generated from field: optional float F_Float_optional = 37;
   */
  FFloatOptional?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional double F_Double_optional = 38;
   */
  FDoubleOptional?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional string F_String_optional = 39;
   */
  FStringOptional?: string;

  /**
   * @generated from field: optional bytes F_Bytes_optional = 301;
   */
  FBytesOptional?: string;

  /**
   * @generated from field: optional sint32 F_Sint32_optional = 302;
   */
  FSint32Optional?: number;

  /**
   * @generated from field: optional sint64 F_Sint64_optional = 303;
   */
  FSint64Optional?: string;

  /**
   * @generated from field: optional sfixed32 F_Sfixed32_optional = 304;
   */
  FSfixed32Optional?: number;

  /**
   * @generated from field: optional sfixed64 F_Sfixed64_optional = 305;
   */
  FSfixed64Optional?: string;

  /**
   * Default-valued fields of all basic types
   *
   * @generated from field: optional bool F_Bool_defaulted = 40 [default = true];
   */
  FBoolDefaulted?: boolean;

  /**
   * @generated from field: optional int32 F_Int32_defaulted = 41 [default = 32];
   */
  FInt32Defaulted?: number;

  /**
   * @generated from field: optional int64 F_Int64_defaulted = 42 [default = 64];
   */
  FInt64Defaulted?: string;

  /**
   * @generated from field: optional fixed32 F_Fixed32_defaulted = 43 [default = 320];
   */
  FFixed32Defaulted?: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64_defaulted = 44 [default = 640];
   */
  FFixed64Defaulted?: string;

  /**
   * @generated from field: optional uint32 F_Uint32_defaulted = 45 [default = 3200];
   */
  FUint32Defaulted?: number;

  /**
   * @generated from field: optional uint64 F_Uint64_defaulted = 46 [default = 6400];
   */
  FUint64Defaulted?: string;

  /**
   * @generated from field: optional float F_Float_defaulted = 47 [default = 314159];
   */
  FFloatDefaulted?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional double F_Double_defaulted = 48 [default = 271828];
   */
  FDoubleDefaulted?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional string F_String_defaulted = 49 [default = "hello, \"world!"
   * "];
   */
  FStringDefaulted?: string;

  /**
   * @generated from field: optional bytes F_Bytes_defaulted = 401 [default = "Bignose"];
   */
  FBytesDefaulted?: string;

  /**
   * @generated from field: optional sint32 F_Sint32_defaulted = 402 [default = -32];
   */
  FSint32Defaulted?: number;

  /**
   * @generated from field: optional sint64 F_Sint64_defaulted = 403 [default = -64];
   */
  FSint64Defaulted?: string;

  /**
   * @generated from field: optional sfixed32 F_Sfixed32_defaulted = 404 [default = -32];
   */
  FSfixed32Defaulted?: number;

  /**
   * @generated from field: optional sfixed64 F_Sfixed64_defaulted = 405 [default = -64];
   */
  FSfixed64Defaulted?: string;

  /**
   * Packed repeated fields (no string or bytes).
   *
   * @generated from field: repeated bool F_Bool_repeated_packed = 50 [packed = true];
   */
  FBoolRepeatedPacked?: boolean[];

  /**
   * @generated from field: repeated int32 F_Int32_repeated_packed = 51 [packed = true];
   */
  FInt32RepeatedPacked?: number[];

  /**
   * @generated from field: repeated int64 F_Int64_repeated_packed = 52 [packed = true];
   */
  FInt64RepeatedPacked?: string[];

  /**
   * @generated from field: repeated fixed32 F_Fixed32_repeated_packed = 53 [packed = true];
   */
  FFixed32RepeatedPacked?: number[];

  /**
   * @generated from field: repeated fixed64 F_Fixed64_repeated_packed = 54 [packed = true];
   */
  FFixed64RepeatedPacked?: string[];

  /**
   * @generated from field: repeated uint32 F_Uint32_repeated_packed = 55 [packed = true];
   */
  FUint32RepeatedPacked?: number[];

  /**
   * @generated from field: repeated uint64 F_Uint64_repeated_packed = 56 [packed = true];
   */
  FUint64RepeatedPacked?: string[];

  /**
   * @generated from field: repeated float F_Float_repeated_packed = 57 [packed = true];
   */
  FFloatRepeatedPacked?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * @generated from field: repeated double F_Double_repeated_packed = 58 [packed = true];
   */
  FDoubleRepeatedPacked?: (number | "NaN" | "Infinity" | "-Infinity")[];

  /**
   * @generated from field: repeated sint32 F_Sint32_repeated_packed = 502 [packed = true];
   */
  FSint32RepeatedPacked?: number[];

  /**
   * @generated from field: repeated sint64 F_Sint64_repeated_packed = 503 [packed = true];
   */
  FSint64RepeatedPacked?: string[];

  /**
   * @generated from field: repeated sfixed32 F_Sfixed32_repeated_packed = 504 [packed = true];
   */
  FSfixed32RepeatedPacked?: number[];

  /**
   * @generated from field: repeated sfixed64 F_Sfixed64_repeated_packed = 505 [packed = true];
   */
  FSfixed64RepeatedPacked?: string[];

  /**
   * @generated from field: required test_proto.GoTest.RequiredGroup requiredgroup = 70;
   */
  requiredgroup?: GoTest_RequiredGroupJson;

  /**
   * @generated from field: repeated test_proto.GoTest.RepeatedGroup repeatedgroup = 80;
   */
  repeatedgroup?: GoTest_RepeatedGroupJson[];

  /**
   * @generated from field: optional test_proto.GoTest.OptionalGroup optionalgroup = 90;
   */
  optionalgroup?: GoTest_OptionalGroupJson;
};

/**
 * Describes the message test_proto.GoTest.
 * Use `create(GoTestSchema)` to create a new message.
 */
export const GoTestSchema: GenMessage<GoTest, GoTestJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 2);

/**
 * Required, repeated, and optional groups.
 *
 * @generated from message test_proto.GoTest.RequiredGroup
 */
export type GoTest_RequiredGroup = Message<"test_proto.GoTest.RequiredGroup"> & {
  /**
   * @generated from field: required string RequiredField = 71;
   */
  RequiredField: string;
};

/**
 * Required, repeated, and optional groups.
 *
 * @generated from message test_proto.GoTest.RequiredGroup
 */
export type GoTest_RequiredGroupJson = {
  /**
   * @generated from field: required string RequiredField = 71;
   */
  RequiredField?: string;
};

/**
 * Describes the message test_proto.GoTest.RequiredGroup.
 * Use `create(GoTest_RequiredGroupSchema)` to create a new message.
 */
export const GoTest_RequiredGroupSchema: GenMessage<GoTest_RequiredGroup, GoTest_RequiredGroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 2, 0);

/**
 * @generated from message test_proto.GoTest.RepeatedGroup
 */
export type GoTest_RepeatedGroup = Message<"test_proto.GoTest.RepeatedGroup"> & {
  /**
   * @generated from field: required string RequiredField = 81;
   */
  RequiredField: string;
};

/**
 * @generated from message test_proto.GoTest.RepeatedGroup
 */
export type GoTest_RepeatedGroupJson = {
  /**
   * @generated from field: required string RequiredField = 81;
   */
  RequiredField?: string;
};

/**
 * Describes the message test_proto.GoTest.RepeatedGroup.
 * Use `create(GoTest_RepeatedGroupSchema)` to create a new message.
 */
export const GoTest_RepeatedGroupSchema: GenMessage<GoTest_RepeatedGroup, GoTest_RepeatedGroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 2, 1);

/**
 * @generated from message test_proto.GoTest.OptionalGroup
 */
export type GoTest_OptionalGroup = Message<"test_proto.GoTest.OptionalGroup"> & {
  /**
   * @generated from field: required string RequiredField = 91;
   */
  RequiredField: string;
};

/**
 * @generated from message test_proto.GoTest.OptionalGroup
 */
export type GoTest_OptionalGroupJson = {
  /**
   * @generated from field: required string RequiredField = 91;
   */
  RequiredField?: string;
};

/**
 * Describes the message test_proto.GoTest.OptionalGroup.
 * Use `create(GoTest_OptionalGroupSchema)` to create a new message.
 */
export const GoTest_OptionalGroupSchema: GenMessage<GoTest_OptionalGroup, GoTest_OptionalGroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 2, 2);

/**
 * An enum, for completeness.
 *
 * @generated from enum test_proto.GoTest.KIND
 */
export enum GoTest_KIND {
  /**
   * @generated from enum value: VOID = 0;
   */
  VOID = 0,

  /**
   * Basic types
   *
   * @generated from enum value: BOOL = 1;
   */
  BOOL = 1,

  /**
   * @generated from enum value: BYTES = 2;
   */
  BYTES = 2,

  /**
   * @generated from enum value: FINGERPRINT = 3;
   */
  FINGERPRINT = 3,

  /**
   * @generated from enum value: FLOAT = 4;
   */
  FLOAT = 4,

  /**
   * @generated from enum value: INT = 5;
   */
  INT = 5,

  /**
   * @generated from enum value: STRING = 6;
   */
  STRING = 6,

  /**
   * @generated from enum value: TIME = 7;
   */
  TIME = 7,

  /**
   * Groupings
   *
   * @generated from enum value: TUPLE = 8;
   */
  TUPLE = 8,

  /**
   * @generated from enum value: ARRAY = 9;
   */
  ARRAY = 9,

  /**
   * @generated from enum value: MAP = 10;
   */
  MAP = 10,

  /**
   * Table types
   *
   * @generated from enum value: TABLE = 11;
   */
  TABLE = 11,

  /**
   * Functions
   *
   * last tag
   *
   * @generated from enum value: FUNCTION = 12;
   */
  FUNCTION = 12,
}

/**
 * An enum, for completeness.
 *
 * @generated from enum test_proto.GoTest.KIND
 */
export type GoTest_KINDJson = "VOID" | "BOOL" | "BYTES" | "FINGERPRINT" | "FLOAT" | "INT" | "STRING" | "TIME" | "TUPLE" | "ARRAY" | "MAP" | "TABLE" | "FUNCTION";

/**
 * Describes the enum test_proto.GoTest.KIND.
 */
export const GoTest_KINDSchema: GenEnum<GoTest_KIND, GoTest_KINDJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 2, 0);

/**
 * For testing a group containing a required field.
 *
 * @generated from message test_proto.GoTestRequiredGroupField
 */
export type GoTestRequiredGroupField = Message<"test_proto.GoTestRequiredGroupField"> & {
  /**
   * @generated from field: required test_proto.GoTestRequiredGroupField.Group group = 1;
   */
  group?: GoTestRequiredGroupField_Group;
};

/**
 * For testing a group containing a required field.
 *
 * @generated from message test_proto.GoTestRequiredGroupField
 */
export type GoTestRequiredGroupFieldJson = {
  /**
   * @generated from field: required test_proto.GoTestRequiredGroupField.Group group = 1;
   */
  group?: GoTestRequiredGroupField_GroupJson;
};

/**
 * Describes the message test_proto.GoTestRequiredGroupField.
 * Use `create(GoTestRequiredGroupFieldSchema)` to create a new message.
 */
export const GoTestRequiredGroupFieldSchema: GenMessage<GoTestRequiredGroupField, GoTestRequiredGroupFieldJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 3);

/**
 * @generated from message test_proto.GoTestRequiredGroupField.Group
 */
export type GoTestRequiredGroupField_Group = Message<"test_proto.GoTestRequiredGroupField.Group"> & {
  /**
   * @generated from field: required int32 Field = 2;
   */
  Field: number;
};

/**
 * @generated from message test_proto.GoTestRequiredGroupField.Group
 */
export type GoTestRequiredGroupField_GroupJson = {
  /**
   * @generated from field: required int32 Field = 2;
   */
  Field?: number;
};

/**
 * Describes the message test_proto.GoTestRequiredGroupField.Group.
 * Use `create(GoTestRequiredGroupField_GroupSchema)` to create a new message.
 */
export const GoTestRequiredGroupField_GroupSchema: GenMessage<GoTestRequiredGroupField_Group, GoTestRequiredGroupField_GroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 3, 0);

/**
 * For testing skipping of unrecognized fields.
 * Numbers are all big, larger than tag numbers in GoTestField,
 * the message used in the corresponding test.
 *
 * @generated from message test_proto.GoSkipTest
 */
export type GoSkipTest = Message<"test_proto.GoSkipTest"> & {
  /**
   * @generated from field: required int32 skip_int32 = 11;
   */
  skipInt32: number;

  /**
   * @generated from field: required fixed32 skip_fixed32 = 12;
   */
  skipFixed32: number;

  /**
   * @generated from field: required fixed64 skip_fixed64 = 13;
   */
  skipFixed64: bigint;

  /**
   * @generated from field: required string skip_string = 14;
   */
  skipString: string;

  /**
   * @generated from field: required test_proto.GoSkipTest.SkipGroup skipgroup = 15;
   */
  skipgroup?: GoSkipTest_SkipGroup;
};

/**
 * For testing skipping of unrecognized fields.
 * Numbers are all big, larger than tag numbers in GoTestField,
 * the message used in the corresponding test.
 *
 * @generated from message test_proto.GoSkipTest
 */
export type GoSkipTestJson = {
  /**
   * @generated from field: required int32 skip_int32 = 11;
   */
  skipInt32?: number;

  /**
   * @generated from field: required fixed32 skip_fixed32 = 12;
   */
  skipFixed32?: number;

  /**
   * @generated from field: required fixed64 skip_fixed64 = 13;
   */
  skipFixed64?: string;

  /**
   * @generated from field: required string skip_string = 14;
   */
  skipString?: string;

  /**
   * @generated from field: required test_proto.GoSkipTest.SkipGroup skipgroup = 15;
   */
  skipgroup?: GoSkipTest_SkipGroupJson;
};

/**
 * Describes the message test_proto.GoSkipTest.
 * Use `create(GoSkipTestSchema)` to create a new message.
 */
export const GoSkipTestSchema: GenMessage<GoSkipTest, GoSkipTestJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 4);

/**
 * @generated from message test_proto.GoSkipTest.SkipGroup
 */
export type GoSkipTest_SkipGroup = Message<"test_proto.GoSkipTest.SkipGroup"> & {
  /**
   * @generated from field: required int32 group_int32 = 16;
   */
  groupInt32: number;

  /**
   * @generated from field: required string group_string = 17;
   */
  groupString: string;
};

/**
 * @generated from message test_proto.GoSkipTest.SkipGroup
 */
export type GoSkipTest_SkipGroupJson = {
  /**
   * @generated from field: required int32 group_int32 = 16;
   */
  groupInt32?: number;

  /**
   * @generated from field: required string group_string = 17;
   */
  groupString?: string;
};

/**
 * Describes the message test_proto.GoSkipTest.SkipGroup.
 * Use `create(GoSkipTest_SkipGroupSchema)` to create a new message.
 */
export const GoSkipTest_SkipGroupSchema: GenMessage<GoSkipTest_SkipGroup, GoSkipTest_SkipGroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 4, 0);

/**
 * For testing packed/non-packed decoder switching.
 * A serialized instance of one should be deserializable as the other.
 *
 * @generated from message test_proto.NonPackedTest
 */
export type NonPackedTest = Message<"test_proto.NonPackedTest"> & {
  /**
   * @generated from field: repeated int32 a = 1;
   */
  a: number[];
};

/**
 * For testing packed/non-packed decoder switching.
 * A serialized instance of one should be deserializable as the other.
 *
 * @generated from message test_proto.NonPackedTest
 */
export type NonPackedTestJson = {
  /**
   * @generated from field: repeated int32 a = 1;
   */
  a?: number[];
};

/**
 * Describes the message test_proto.NonPackedTest.
 * Use `create(NonPackedTestSchema)` to create a new message.
 */
export const NonPackedTestSchema: GenMessage<NonPackedTest, NonPackedTestJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 5);

/**
 * @generated from message test_proto.PackedTest
 */
export type PackedTest = Message<"test_proto.PackedTest"> & {
  /**
   * @generated from field: repeated int32 b = 1 [packed = true];
   */
  b: number[];
};

/**
 * @generated from message test_proto.PackedTest
 */
export type PackedTestJson = {
  /**
   * @generated from field: repeated int32 b = 1 [packed = true];
   */
  b?: number[];
};

/**
 * Describes the message test_proto.PackedTest.
 * Use `create(PackedTestSchema)` to create a new message.
 */
export const PackedTestSchema: GenMessage<PackedTest, PackedTestJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 6);

/**
 * @generated from message test_proto.MaxTag
 */
export type MaxTag = Message<"test_proto.MaxTag"> & {
  /**
   * Maximum possible tag number.
   *
   * @generated from field: optional string last_field = 536870911;
   */
  lastField: string;
};

/**
 * @generated from message test_proto.MaxTag
 */
export type MaxTagJson = {
  /**
   * Maximum possible tag number.
   *
   * @generated from field: optional string last_field = 536870911;
   */
  lastField?: string;
};

/**
 * Describes the message test_proto.MaxTag.
 * Use `create(MaxTagSchema)` to create a new message.
 */
export const MaxTagSchema: GenMessage<MaxTag, MaxTagJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 7);

/**
 * @generated from message test_proto.OldMessage
 */
export type OldMessage = Message<"test_proto.OldMessage"> & {
  /**
   * @generated from field: optional test_proto.OldMessage.Nested nested = 1;
   */
  nested?: OldMessage_Nested;

  /**
   * @generated from field: optional int32 num = 2;
   */
  num: number;
};

/**
 * @generated from message test_proto.OldMessage
 */
export type OldMessageJson = {
  /**
   * @generated from field: optional test_proto.OldMessage.Nested nested = 1;
   */
  nested?: OldMessage_NestedJson;

  /**
   * @generated from field: optional int32 num = 2;
   */
  num?: number;
};

/**
 * Describes the message test_proto.OldMessage.
 * Use `create(OldMessageSchema)` to create a new message.
 */
export const OldMessageSchema: GenMessage<OldMessage, OldMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 8);

/**
 * @generated from message test_proto.OldMessage.Nested
 */
export type OldMessage_Nested = Message<"test_proto.OldMessage.Nested"> & {
  /**
   * @generated from field: optional string name = 1;
   */
  name: string;
};

/**
 * @generated from message test_proto.OldMessage.Nested
 */
export type OldMessage_NestedJson = {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;
};

/**
 * Describes the message test_proto.OldMessage.Nested.
 * Use `create(OldMessage_NestedSchema)` to create a new message.
 */
export const OldMessage_NestedSchema: GenMessage<OldMessage_Nested, OldMessage_NestedJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 8, 0);

/**
 * NewMessage is wire compatible with OldMessage;
 * imagine it as a future version.
 *
 * @generated from message test_proto.NewMessage
 */
export type NewMessage = Message<"test_proto.NewMessage"> & {
  /**
   * @generated from field: optional test_proto.NewMessage.Nested nested = 1;
   */
  nested?: NewMessage_Nested;

  /**
   * This is an int32 in OldMessage.
   *
   * @generated from field: optional int64 num = 2;
   */
  num: bigint;
};

/**
 * NewMessage is wire compatible with OldMessage;
 * imagine it as a future version.
 *
 * @generated from message test_proto.NewMessage
 */
export type NewMessageJson = {
  /**
   * @generated from field: optional test_proto.NewMessage.Nested nested = 1;
   */
  nested?: NewMessage_NestedJson;

  /**
   * This is an int32 in OldMessage.
   *
   * @generated from field: optional int64 num = 2;
   */
  num?: string;
};

/**
 * Describes the message test_proto.NewMessage.
 * Use `create(NewMessageSchema)` to create a new message.
 */
export const NewMessageSchema: GenMessage<NewMessage, NewMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 9);

/**
 * @generated from message test_proto.NewMessage.Nested
 */
export type NewMessage_Nested = Message<"test_proto.NewMessage.Nested"> & {
  /**
   * @generated from field: optional string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional string food_group = 2;
   */
  foodGroup: string;
};

/**
 * @generated from message test_proto.NewMessage.Nested
 */
export type NewMessage_NestedJson = {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional string food_group = 2;
   */
  foodGroup?: string;
};

/**
 * Describes the message test_proto.NewMessage.Nested.
 * Use `create(NewMessage_NestedSchema)` to create a new message.
 */
export const NewMessage_NestedSchema: GenMessage<NewMessage_Nested, NewMessage_NestedJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 9, 0);

/**
 * @generated from message test_proto.InnerMessage
 */
export type InnerMessage = Message<"test_proto.InnerMessage"> & {
  /**
   * @generated from field: required string host = 1;
   */
  host: string;

  /**
   * @generated from field: optional int32 port = 2 [default = 4000];
   */
  port: number;

  /**
   * @generated from field: optional bool connected = 3;
   */
  connected: boolean;
};

/**
 * @generated from message test_proto.InnerMessage
 */
export type InnerMessageJson = {
  /**
   * @generated from field: required string host = 1;
   */
  host?: string;

  /**
   * @generated from field: optional int32 port = 2 [default = 4000];
   */
  port?: number;

  /**
   * @generated from field: optional bool connected = 3;
   */
  connected?: boolean;
};

/**
 * Describes the message test_proto.InnerMessage.
 * Use `create(InnerMessageSchema)` to create a new message.
 */
export const InnerMessageSchema: GenMessage<InnerMessage, InnerMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 10);

/**
 * @generated from message test_proto.OtherMessage
 */
export type OtherMessage = Message<"test_proto.OtherMessage"> & {
  /**
   * @generated from field: optional int64 key = 1;
   */
  key: bigint;

  /**
   * @generated from field: optional bytes value = 2;
   */
  value: Uint8Array;

  /**
   * @generated from field: optional float weight = 3;
   */
  weight: number;

  /**
   * @generated from field: optional test_proto.InnerMessage inner = 4;
   */
  inner?: InnerMessage;
};

/**
 * @generated from message test_proto.OtherMessage
 */
export type OtherMessageJson = {
  /**
   * @generated from field: optional int64 key = 1;
   */
  key?: string;

  /**
   * @generated from field: optional bytes value = 2;
   */
  value?: string;

  /**
   * @generated from field: optional float weight = 3;
   */
  weight?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional test_proto.InnerMessage inner = 4;
   */
  inner?: InnerMessageJson;
};

/**
 * Describes the message test_proto.OtherMessage.
 * Use `create(OtherMessageSchema)` to create a new message.
 */
export const OtherMessageSchema: GenMessage<OtherMessage, OtherMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 11);

/**
 * @generated from message test_proto.RequiredInnerMessage
 */
export type RequiredInnerMessage = Message<"test_proto.RequiredInnerMessage"> & {
  /**
   * @generated from field: required test_proto.InnerMessage leo_finally_won_an_oscar = 1;
   */
  leoFinallyWonAnOscar?: InnerMessage;
};

/**
 * @generated from message test_proto.RequiredInnerMessage
 */
export type RequiredInnerMessageJson = {
  /**
   * @generated from field: required test_proto.InnerMessage leo_finally_won_an_oscar = 1;
   */
  leoFinallyWonAnOscar?: InnerMessageJson;
};

/**
 * Describes the message test_proto.RequiredInnerMessage.
 * Use `create(RequiredInnerMessageSchema)` to create a new message.
 */
export const RequiredInnerMessageSchema: GenMessage<RequiredInnerMessage, RequiredInnerMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 12);

/**
 * @generated from message test_proto.MyMessage
 */
export type MyMessage = Message<"test_proto.MyMessage"> & {
  /**
   * @generated from field: required int32 count = 1;
   */
  count: number;

  /**
   * @generated from field: optional string name = 2;
   */
  name: string;

  /**
   * @generated from field: optional string quote = 3;
   */
  quote: string;

  /**
   * @generated from field: repeated string pet = 4;
   */
  pet: string[];

  /**
   * @generated from field: optional test_proto.InnerMessage inner = 5;
   */
  inner?: InnerMessage;

  /**
   * @generated from field: repeated test_proto.OtherMessage others = 6;
   */
  others: OtherMessage[];

  /**
   * @generated from field: optional test_proto.RequiredInnerMessage we_must_go_deeper = 13;
   */
  weMustGoDeeper?: RequiredInnerMessage;

  /**
   * @generated from field: repeated test_proto.InnerMessage rep_inner = 12;
   */
  repInner: InnerMessage[];

  /**
   * @generated from field: optional test_proto.MyMessage.Color bikeshed = 7;
   */
  bikeshed: MyMessage_Color;

  /**
   * @generated from field: optional test_proto.MyMessage.SomeGroup somegroup = 8;
   */
  somegroup?: MyMessage_SomeGroup;

  /**
   * This field becomes [][]byte in the generated code.
   *
   * @generated from field: repeated bytes rep_bytes = 10;
   */
  repBytes: Uint8Array[];

  /**
   * @generated from field: optional double bigfloat = 11;
   */
  bigfloat: number;
};

/**
 * @generated from message test_proto.MyMessage
 */
export type MyMessageJson = {
  /**
   * @generated from field: required int32 count = 1;
   */
  count?: number;

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string quote = 3;
   */
  quote?: string;

  /**
   * @generated from field: repeated string pet = 4;
   */
  pet?: string[];

  /**
   * @generated from field: optional test_proto.InnerMessage inner = 5;
   */
  inner?: InnerMessageJson;

  /**
   * @generated from field: repeated test_proto.OtherMessage others = 6;
   */
  others?: OtherMessageJson[];

  /**
   * @generated from field: optional test_proto.RequiredInnerMessage we_must_go_deeper = 13;
   */
  weMustGoDeeper?: RequiredInnerMessageJson;

  /**
   * @generated from field: repeated test_proto.InnerMessage rep_inner = 12;
   */
  repInner?: InnerMessageJson[];

  /**
   * @generated from field: optional test_proto.MyMessage.Color bikeshed = 7;
   */
  bikeshed?: MyMessage_ColorJson;

  /**
   * @generated from field: optional test_proto.MyMessage.SomeGroup somegroup = 8;
   */
  somegroup?: MyMessage_SomeGroupJson;

  /**
   * This field becomes [][]byte in the generated code.
   *
   * @generated from field: repeated bytes rep_bytes = 10;
   */
  repBytes?: string[];

  /**
   * @generated from field: optional double bigfloat = 11;
   */
  bigfloat?: number | "NaN" | "Infinity" | "-Infinity";
};

/**
 * Describes the message test_proto.MyMessage.
 * Use `create(MyMessageSchema)` to create a new message.
 */
export const MyMessageSchema: GenMessage<MyMessage, MyMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 13);

/**
 * @generated from message test_proto.MyMessage.SomeGroup
 */
export type MyMessage_SomeGroup = Message<"test_proto.MyMessage.SomeGroup"> & {
  /**
   * @generated from field: optional int32 group_field = 9;
   */
  groupField: number;
};

/**
 * @generated from message test_proto.MyMessage.SomeGroup
 */
export type MyMessage_SomeGroupJson = {
  /**
   * @generated from field: optional int32 group_field = 9;
   */
  groupField?: number;
};

/**
 * Describes the message test_proto.MyMessage.SomeGroup.
 * Use `create(MyMessage_SomeGroupSchema)` to create a new message.
 */
export const MyMessage_SomeGroupSchema: GenMessage<MyMessage_SomeGroup, MyMessage_SomeGroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 13, 0);

/**
 * @generated from enum test_proto.MyMessage.Color
 */
export enum MyMessage_Color {
  /**
   * @generated from enum value: RED = 0;
   */
  RED = 0,

  /**
   * @generated from enum value: GREEN = 1;
   */
  GREEN = 1,

  /**
   * @generated from enum value: BLUE = 2;
   */
  BLUE = 2,
}

/**
 * @generated from enum test_proto.MyMessage.Color
 */
export type MyMessage_ColorJson = "RED" | "GREEN" | "BLUE";

/**
 * Describes the enum test_proto.MyMessage.Color.
 */
export const MyMessage_ColorSchema: GenEnum<MyMessage_Color, MyMessage_ColorJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 13, 0);

/**
 * @generated from message test_proto.Ext
 */
export type Ext = Message<"test_proto.Ext"> & {
  /**
   * @generated from field: optional string data = 1;
   */
  data: string;

  /**
   * @generated from field: map<int32, int32> map_field = 2;
   */
  mapField: { [key: number]: number };
};

/**
 * @generated from message test_proto.Ext
 */
export type ExtJson = {
  /**
   * @generated from field: optional string data = 1;
   */
  data?: string;

  /**
   * @generated from field: map<int32, int32> map_field = 2;
   */
  mapField?: { [key: number]: number };
};

/**
 * Describes the message test_proto.Ext.
 * Use `create(ExtSchema)` to create a new message.
 */
export const ExtSchema: GenMessage<Ext, ExtJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 14);

/**
 * @generated from extension: optional test_proto.Ext more = 103;
 */
export const Ext_more: GenExtension<MyMessage, Ext> = /*@__PURE__*/
  extDesc(file_test_proto_test, 14, 0);

/**
 * @generated from extension: optional string text = 104;
 */
export const Ext_text: GenExtension<MyMessage, string> = /*@__PURE__*/
  extDesc(file_test_proto_test, 14, 1);

/**
 * @generated from extension: optional int32 number = 105;
 */
export const Ext_number: GenExtension<MyMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 14, 2);

/**
 * @generated from message test_proto.ComplexExtension
 */
export type ComplexExtension = Message<"test_proto.ComplexExtension"> & {
  /**
   * @generated from field: optional int32 first = 1;
   */
  first: number;

  /**
   * @generated from field: optional int32 second = 2;
   */
  second: number;

  /**
   * @generated from field: repeated int32 third = 3;
   */
  third: number[];
};

/**
 * @generated from message test_proto.ComplexExtension
 */
export type ComplexExtensionJson = {
  /**
   * @generated from field: optional int32 first = 1;
   */
  first?: number;

  /**
   * @generated from field: optional int32 second = 2;
   */
  second?: number;

  /**
   * @generated from field: repeated int32 third = 3;
   */
  third?: number[];
};

/**
 * Describes the message test_proto.ComplexExtension.
 * Use `create(ComplexExtensionSchema)` to create a new message.
 */
export const ComplexExtensionSchema: GenMessage<ComplexExtension, ComplexExtensionJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 15);

/**
 * @generated from message test_proto.DefaultsMessage
 */
export type DefaultsMessage = Message<"test_proto.DefaultsMessage"> & {
};

/**
 * @generated from message test_proto.DefaultsMessage
 */
export type DefaultsMessageJson = {
};

/**
 * Describes the message test_proto.DefaultsMessage.
 * Use `create(DefaultsMessageSchema)` to create a new message.
 */
export const DefaultsMessageSchema: GenMessage<DefaultsMessage, DefaultsMessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 16);

/**
 * @generated from enum test_proto.DefaultsMessage.DefaultsEnum
 */
export enum DefaultsMessage_DefaultsEnum {
  /**
   * @generated from enum value: ZERO = 0;
   */
  ZERO = 0,

  /**
   * @generated from enum value: ONE = 1;
   */
  ONE = 1,

  /**
   * @generated from enum value: TWO = 2;
   */
  TWO = 2,
}

/**
 * @generated from enum test_proto.DefaultsMessage.DefaultsEnum
 */
export type DefaultsMessage_DefaultsEnumJson = "ZERO" | "ONE" | "TWO";

/**
 * Describes the enum test_proto.DefaultsMessage.DefaultsEnum.
 */
export const DefaultsMessage_DefaultsEnumSchema: GenEnum<DefaultsMessage_DefaultsEnum, DefaultsMessage_DefaultsEnumJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 16, 0);

/**
 * @generated from message test_proto.Empty
 */
export type Empty = Message<"test_proto.Empty"> & {
};

/**
 * @generated from message test_proto.Empty
 */
export type EmptyJson = {
};

/**
 * Describes the message test_proto.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export const EmptySchema: GenMessage<Empty, EmptyJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 17);

/**
 * @generated from message test_proto.MessageList
 */
export type MessageList = Message<"test_proto.MessageList"> & {
  /**
   * @generated from field: repeated test_proto.MessageList.Message message = 1;
   */
  message: MessageList_Message[];
};

/**
 * @generated from message test_proto.MessageList
 */
export type MessageListJson = {
  /**
   * @generated from field: repeated test_proto.MessageList.Message message = 1;
   */
  message?: MessageList_MessageJson[];
};

/**
 * Describes the message test_proto.MessageList.
 * Use `create(MessageListSchema)` to create a new message.
 */
export const MessageListSchema: GenMessage<MessageList, MessageListJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 18);

/**
 * @generated from message test_proto.MessageList.Message
 */
export type MessageList_Message = Message<"test_proto.MessageList.Message"> & {
  /**
   * @generated from field: required string name = 2;
   */
  name: string;

  /**
   * @generated from field: required int32 count = 3;
   */
  count: number;
};

/**
 * @generated from message test_proto.MessageList.Message
 */
export type MessageList_MessageJson = {
  /**
   * @generated from field: required string name = 2;
   */
  name?: string;

  /**
   * @generated from field: required int32 count = 3;
   */
  count?: number;
};

/**
 * Describes the message test_proto.MessageList.Message.
 * Use `create(MessageList_MessageSchema)` to create a new message.
 */
export const MessageList_MessageSchema: GenMessage<MessageList_Message, MessageList_MessageJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 18, 0);

/**
 * @generated from message test_proto.Strings
 */
export type Strings = Message<"test_proto.Strings"> & {
  /**
   * @generated from field: optional string string_field = 1;
   */
  stringField: string;

  /**
   * @generated from field: optional bytes bytes_field = 2;
   */
  bytesField: Uint8Array;
};

/**
 * @generated from message test_proto.Strings
 */
export type StringsJson = {
  /**
   * @generated from field: optional string string_field = 1;
   */
  stringField?: string;

  /**
   * @generated from field: optional bytes bytes_field = 2;
   */
  bytesField?: string;
};

/**
 * Describes the message test_proto.Strings.
 * Use `create(StringsSchema)` to create a new message.
 */
export const StringsSchema: GenMessage<Strings, StringsJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 19);

/**
 * @generated from message test_proto.Defaults
 */
export type Defaults = Message<"test_proto.Defaults"> & {
  /**
   * Default-valued fields of all basic types.
   * Same as GoTest, but copied here to make testing easier.
   *
   * @generated from field: optional bool F_Bool = 1 [default = true];
   */
  FBool: boolean;

  /**
   * @generated from field: optional int32 F_Int32 = 2 [default = 32];
   */
  FInt32: number;

  /**
   * @generated from field: optional int64 F_Int64 = 3 [default = 64];
   */
  FInt64: bigint;

  /**
   * @generated from field: optional fixed32 F_Fixed32 = 4 [default = 320];
   */
  FFixed32: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64 = 5 [default = 640];
   */
  FFixed64: bigint;

  /**
   * @generated from field: optional uint32 F_Uint32 = 6 [default = 3200];
   */
  FUint32: number;

  /**
   * @generated from field: optional uint64 F_Uint64 = 7 [default = 6400];
   */
  FUint64: bigint;

  /**
   * @generated from field: optional float F_Float = 8 [default = 314159];
   */
  FFloat: number;

  /**
   * @generated from field: optional double F_Double = 9 [default = 271828];
   */
  FDouble: number;

  /**
   * @generated from field: optional string F_String = 10 [default = "hello, \"world!"
   * "];
   */
  FString: string;

  /**
   * @generated from field: optional bytes F_Bytes = 11 [default = "Bignose"];
   */
  FBytes: Uint8Array;

  /**
   * @generated from field: optional sint32 F_Sint32 = 12 [default = -32];
   */
  FSint32: number;

  /**
   * @generated from field: optional sint64 F_Sint64 = 13 [default = -64];
   */
  FSint64: bigint;

  /**
   * @generated from field: optional test_proto.Defaults.Color F_Enum = 14 [default = GREEN];
   */
  FEnum: Defaults_Color;

  /**
   * More fields with crazy defaults.
   *
   * @generated from field: optional float F_Pinf = 15 [default = inf];
   */
  FPinf: number;

  /**
   * @generated from field: optional float F_Ninf = 16 [default = -inf];
   */
  FNinf: number;

  /**
   * @generated from field: optional float F_Nan = 17 [default = nan];
   */
  FNan: number;

  /**
   * Sub-message.
   *
   * @generated from field: optional test_proto.SubDefaults sub = 18;
   */
  sub?: SubDefaults;

  /**
   * Redundant but explicit defaults.
   *
   * @generated from field: optional string str_zero = 19 [default = ""];
   */
  strZero: string;
};

/**
 * @generated from message test_proto.Defaults
 */
export type DefaultsJson = {
  /**
   * Default-valued fields of all basic types.
   * Same as GoTest, but copied here to make testing easier.
   *
   * @generated from field: optional bool F_Bool = 1 [default = true];
   */
  FBool?: boolean;

  /**
   * @generated from field: optional int32 F_Int32 = 2 [default = 32];
   */
  FInt32?: number;

  /**
   * @generated from field: optional int64 F_Int64 = 3 [default = 64];
   */
  FInt64?: string;

  /**
   * @generated from field: optional fixed32 F_Fixed32 = 4 [default = 320];
   */
  FFixed32?: number;

  /**
   * @generated from field: optional fixed64 F_Fixed64 = 5 [default = 640];
   */
  FFixed64?: string;

  /**
   * @generated from field: optional uint32 F_Uint32 = 6 [default = 3200];
   */
  FUint32?: number;

  /**
   * @generated from field: optional uint64 F_Uint64 = 7 [default = 6400];
   */
  FUint64?: string;

  /**
   * @generated from field: optional float F_Float = 8 [default = 314159];
   */
  FFloat?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional double F_Double = 9 [default = 271828];
   */
  FDouble?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional string F_String = 10 [default = "hello, \"world!"
   * "];
   */
  FString?: string;

  /**
   * @generated from field: optional bytes F_Bytes = 11 [default = "Bignose"];
   */
  FBytes?: string;

  /**
   * @generated from field: optional sint32 F_Sint32 = 12 [default = -32];
   */
  FSint32?: number;

  /**
   * @generated from field: optional sint64 F_Sint64 = 13 [default = -64];
   */
  FSint64?: string;

  /**
   * @generated from field: optional test_proto.Defaults.Color F_Enum = 14 [default = GREEN];
   */
  FEnum?: Defaults_ColorJson;

  /**
   * More fields with crazy defaults.
   *
   * @generated from field: optional float F_Pinf = 15 [default = inf];
   */
  FPinf?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional float F_Ninf = 16 [default = -inf];
   */
  FNinf?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional float F_Nan = 17 [default = nan];
   */
  FNan?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * Sub-message.
   *
   * @generated from field: optional test_proto.SubDefaults sub = 18;
   */
  sub?: SubDefaultsJson;

  /**
   * Redundant but explicit defaults.
   *
   * @generated from field: optional string str_zero = 19 [default = ""];
   */
  strZero?: string;
};

/**
 * Describes the message test_proto.Defaults.
 * Use `create(DefaultsSchema)` to create a new message.
 */
export const DefaultsSchema: GenMessage<Defaults, DefaultsJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 20);

/**
 * @generated from enum test_proto.Defaults.Color
 */
export enum Defaults_Color {
  /**
   * @generated from enum value: RED = 0;
   */
  RED = 0,

  /**
   * @generated from enum value: GREEN = 1;
   */
  GREEN = 1,

  /**
   * @generated from enum value: BLUE = 2;
   */
  BLUE = 2,
}

/**
 * @generated from enum test_proto.Defaults.Color
 */
export type Defaults_ColorJson = "RED" | "GREEN" | "BLUE";

/**
 * Describes the enum test_proto.Defaults.Color.
 */
export const Defaults_ColorSchema: GenEnum<Defaults_Color, Defaults_ColorJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 20, 0);

/**
 * @generated from message test_proto.SubDefaults
 */
export type SubDefaults = Message<"test_proto.SubDefaults"> & {
  /**
   * @generated from field: optional int64 n = 1 [default = 7];
   */
  n: bigint;
};

/**
 * @generated from message test_proto.SubDefaults
 */
export type SubDefaultsJson = {
  /**
   * @generated from field: optional int64 n = 1 [default = 7];
   */
  n?: string;
};

/**
 * Describes the message test_proto.SubDefaults.
 * Use `create(SubDefaultsSchema)` to create a new message.
 */
export const SubDefaultsSchema: GenMessage<SubDefaults, SubDefaultsJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 21);

/**
 * @generated from message test_proto.RepeatedEnum
 */
export type RepeatedEnum = Message<"test_proto.RepeatedEnum"> & {
  /**
   * @generated from field: repeated test_proto.RepeatedEnum.Color color = 1;
   */
  color: RepeatedEnum_Color[];
};

/**
 * @generated from message test_proto.RepeatedEnum
 */
export type RepeatedEnumJson = {
  /**
   * @generated from field: repeated test_proto.RepeatedEnum.Color color = 1;
   */
  color?: RepeatedEnum_ColorJson[];
};

/**
 * Describes the message test_proto.RepeatedEnum.
 * Use `create(RepeatedEnumSchema)` to create a new message.
 */
export const RepeatedEnumSchema: GenMessage<RepeatedEnum, RepeatedEnumJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 22);

/**
 * @generated from enum test_proto.RepeatedEnum.Color
 */
export enum RepeatedEnum_Color {
  /**
   * @generated from enum value: RED = 1;
   */
  RED = 1,
}

/**
 * @generated from enum test_proto.RepeatedEnum.Color
 */
export type RepeatedEnum_ColorJson = "RED";

/**
 * Describes the enum test_proto.RepeatedEnum.Color.
 */
export const RepeatedEnum_ColorSchema: GenEnum<RepeatedEnum_Color, RepeatedEnum_ColorJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 22, 0);

/**
 * @generated from message test_proto.MoreRepeated
 */
export type MoreRepeated = Message<"test_proto.MoreRepeated"> & {
  /**
   * @generated from field: repeated bool bools = 1;
   */
  bools: boolean[];

  /**
   * @generated from field: repeated bool bools_packed = 2 [packed = true];
   */
  boolsPacked: boolean[];

  /**
   * @generated from field: repeated int32 ints = 3;
   */
  ints: number[];

  /**
   * @generated from field: repeated int32 ints_packed = 4 [packed = true];
   */
  intsPacked: number[];

  /**
   * @generated from field: repeated int64 int64s_packed = 7 [packed = true];
   */
  int64sPacked: bigint[];

  /**
   * @generated from field: repeated string strings = 5;
   */
  strings: string[];

  /**
   * @generated from field: repeated fixed32 fixeds = 6;
   */
  fixeds: number[];
};

/**
 * @generated from message test_proto.MoreRepeated
 */
export type MoreRepeatedJson = {
  /**
   * @generated from field: repeated bool bools = 1;
   */
  bools?: boolean[];

  /**
   * @generated from field: repeated bool bools_packed = 2 [packed = true];
   */
  boolsPacked?: boolean[];

  /**
   * @generated from field: repeated int32 ints = 3;
   */
  ints?: number[];

  /**
   * @generated from field: repeated int32 ints_packed = 4 [packed = true];
   */
  intsPacked?: number[];

  /**
   * @generated from field: repeated int64 int64s_packed = 7 [packed = true];
   */
  int64sPacked?: string[];

  /**
   * @generated from field: repeated string strings = 5;
   */
  strings?: string[];

  /**
   * @generated from field: repeated fixed32 fixeds = 6;
   */
  fixeds?: number[];
};

/**
 * Describes the message test_proto.MoreRepeated.
 * Use `create(MoreRepeatedSchema)` to create a new message.
 */
export const MoreRepeatedSchema: GenMessage<MoreRepeated, MoreRepeatedJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 23);

/**
 * @generated from message test_proto.GroupOld
 */
export type GroupOld = Message<"test_proto.GroupOld"> & {
  /**
   * @generated from field: optional test_proto.GroupOld.G g = 101;
   */
  g?: GroupOld_G;
};

/**
 * @generated from message test_proto.GroupOld
 */
export type GroupOldJson = {
  /**
   * @generated from field: optional test_proto.GroupOld.G g = 101;
   */
  g?: GroupOld_GJson;
};

/**
 * Describes the message test_proto.GroupOld.
 * Use `create(GroupOldSchema)` to create a new message.
 */
export const GroupOldSchema: GenMessage<GroupOld, GroupOldJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 24);

/**
 * @generated from message test_proto.GroupOld.G
 */
export type GroupOld_G = Message<"test_proto.GroupOld.G"> & {
  /**
   * @generated from field: optional int32 x = 2;
   */
  x: number;
};

/**
 * @generated from message test_proto.GroupOld.G
 */
export type GroupOld_GJson = {
  /**
   * @generated from field: optional int32 x = 2;
   */
  x?: number;
};

/**
 * Describes the message test_proto.GroupOld.G.
 * Use `create(GroupOld_GSchema)` to create a new message.
 */
export const GroupOld_GSchema: GenMessage<GroupOld_G, GroupOld_GJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 24, 0);

/**
 * @generated from message test_proto.GroupNew
 */
export type GroupNew = Message<"test_proto.GroupNew"> & {
  /**
   * @generated from field: optional test_proto.GroupNew.G g = 101;
   */
  g?: GroupNew_G;
};

/**
 * @generated from message test_proto.GroupNew
 */
export type GroupNewJson = {
  /**
   * @generated from field: optional test_proto.GroupNew.G g = 101;
   */
  g?: GroupNew_GJson;
};

/**
 * Describes the message test_proto.GroupNew.
 * Use `create(GroupNewSchema)` to create a new message.
 */
export const GroupNewSchema: GenMessage<GroupNew, GroupNewJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 25);

/**
 * @generated from message test_proto.GroupNew.G
 */
export type GroupNew_G = Message<"test_proto.GroupNew.G"> & {
  /**
   * @generated from field: optional int32 x = 2;
   */
  x: number;

  /**
   * @generated from field: optional int32 y = 3;
   */
  y: number;
};

/**
 * @generated from message test_proto.GroupNew.G
 */
export type GroupNew_GJson = {
  /**
   * @generated from field: optional int32 x = 2;
   */
  x?: number;

  /**
   * @generated from field: optional int32 y = 3;
   */
  y?: number;
};

/**
 * Describes the message test_proto.GroupNew.G.
 * Use `create(GroupNew_GSchema)` to create a new message.
 */
export const GroupNew_GSchema: GenMessage<GroupNew_G, GroupNew_GJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 25, 0);

/**
 * @generated from message test_proto.FloatingPoint
 */
export type FloatingPoint = Message<"test_proto.FloatingPoint"> & {
  /**
   * @generated from field: required double f = 1;
   */
  f: number;

  /**
   * @generated from field: optional bool exact = 2;
   */
  exact: boolean;
};

/**
 * @generated from message test_proto.FloatingPoint
 */
export type FloatingPointJson = {
  /**
   * @generated from field: required double f = 1;
   */
  f?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: optional bool exact = 2;
   */
  exact?: boolean;
};

/**
 * Describes the message test_proto.FloatingPoint.
 * Use `create(FloatingPointSchema)` to create a new message.
 */
export const FloatingPointSchema: GenMessage<FloatingPoint, FloatingPointJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 26);

/**
 * @generated from message test_proto.MessageWithMap
 */
export type MessageWithMap = Message<"test_proto.MessageWithMap"> & {
  /**
   * @generated from field: map<int32, string> name_mapping = 1;
   */
  nameMapping: { [key: number]: string };

  /**
   * @generated from field: map<sint64, test_proto.FloatingPoint> msg_mapping = 2;
   */
  msgMapping: { [key: string]: FloatingPoint };

  /**
   * @generated from field: map<bool, bytes> byte_mapping = 3;
   */
  byteMapping: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<string, string> str_to_str = 4;
   */
  strToStr: { [key: string]: string };
};

/**
 * @generated from message test_proto.MessageWithMap
 */
export type MessageWithMapJson = {
  /**
   * @generated from field: map<int32, string> name_mapping = 1;
   */
  nameMapping?: { [key: number]: string };

  /**
   * @generated from field: map<sint64, test_proto.FloatingPoint> msg_mapping = 2;
   */
  msgMapping?: { [key: string]: FloatingPointJson };

  /**
   * @generated from field: map<bool, bytes> byte_mapping = 3;
   */
  byteMapping?: { [key: string]: string };

  /**
   * @generated from field: map<string, string> str_to_str = 4;
   */
  strToStr?: { [key: string]: string };
};

/**
 * Describes the message test_proto.MessageWithMap.
 * Use `create(MessageWithMapSchema)` to create a new message.
 */
export const MessageWithMapSchema: GenMessage<MessageWithMap, MessageWithMapJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 27);

/**
 * @generated from message test_proto.Oneof
 */
export type Oneof = Message<"test_proto.Oneof"> & {
  /**
   * @generated from oneof test_proto.Oneof.union
   */
  union: {
    /**
     * @generated from field: bool F_Bool = 1;
     */
    value: boolean;
    case: "FBool";
  } | {
    /**
     * @generated from field: int32 F_Int32 = 2;
     */
    value: number;
    case: "FInt32";
  } | {
    /**
     * @generated from field: int64 F_Int64 = 3;
     */
    value: bigint;
    case: "FInt64";
  } | {
    /**
     * @generated from field: fixed32 F_Fixed32 = 4;
     */
    value: number;
    case: "FFixed32";
  } | {
    /**
     * @generated from field: fixed64 F_Fixed64 = 5;
     */
    value: bigint;
    case: "FFixed64";
  } | {
    /**
     * @generated from field: uint32 F_Uint32 = 6;
     */
    value: number;
    case: "FUint32";
  } | {
    /**
     * @generated from field: uint64 F_Uint64 = 7;
     */
    value: bigint;
    case: "FUint64";
  } | {
    /**
     * @generated from field: float F_Float = 8;
     */
    value: number;
    case: "FFloat";
  } | {
    /**
     * @generated from field: double F_Double = 9;
     */
    value: number;
    case: "FDouble";
  } | {
    /**
     * @generated from field: string F_String = 10;
     */
    value: string;
    case: "FString";
  } | {
    /**
     * @generated from field: bytes F_Bytes = 11;
     */
    value: Uint8Array;
    case: "FBytes";
  } | {
    /**
     * @generated from field: sint32 F_Sint32 = 12;
     */
    value: number;
    case: "FSint32";
  } | {
    /**
     * @generated from field: sint64 F_Sint64 = 13;
     */
    value: bigint;
    case: "FSint64";
  } | {
    /**
     * @generated from field: test_proto.MyMessage.Color F_Enum = 14;
     */
    value: MyMessage_Color;
    case: "FEnum";
  } | {
    /**
     * @generated from field: test_proto.GoTestField F_Message = 15;
     */
    value: GoTestField;
    case: "FMessage";
  } | {
    /**
     * @generated from field: test_proto.Oneof.F_Group f_group = 16;
     */
    value: Oneof_F_Group;
    case: "fGroup";
  } | {
    /**
     * @generated from field: int32 F_Largest_Tag = 536870911;
     */
    value: number;
    case: "FLargestTag";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from oneof test_proto.Oneof.tormato
   */
  tormato: {
    /**
     * @generated from field: int32 value = 100;
     */
    value: number;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message test_proto.Oneof
 */
export type OneofJson = {
  /**
   * @generated from field: bool F_Bool = 1;
   */
  FBool?: boolean;

  /**
   * @generated from field: int32 F_Int32 = 2;
   */
  FInt32?: number;

  /**
   * @generated from field: int64 F_Int64 = 3;
   */
  FInt64?: string;

  /**
   * @generated from field: fixed32 F_Fixed32 = 4;
   */
  FFixed32?: number;

  /**
   * @generated from field: fixed64 F_Fixed64 = 5;
   */
  FFixed64?: string;

  /**
   * @generated from field: uint32 F_Uint32 = 6;
   */
  FUint32?: number;

  /**
   * @generated from field: uint64 F_Uint64 = 7;
   */
  FUint64?: string;

  /**
   * @generated from field: float F_Float = 8;
   */
  FFloat?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: double F_Double = 9;
   */
  FDouble?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: string F_String = 10;
   */
  FString?: string;

  /**
   * @generated from field: bytes F_Bytes = 11;
   */
  FBytes?: string;

  /**
   * @generated from field: sint32 F_Sint32 = 12;
   */
  FSint32?: number;

  /**
   * @generated from field: sint64 F_Sint64 = 13;
   */
  FSint64?: string;

  /**
   * @generated from field: test_proto.MyMessage.Color F_Enum = 14;
   */
  FEnum?: MyMessage_ColorJson;

  /**
   * @generated from field: test_proto.GoTestField F_Message = 15;
   */
  FMessage?: GoTestFieldJson;

  /**
   * @generated from field: test_proto.Oneof.F_Group f_group = 16;
   */
  fGroup?: Oneof_F_GroupJson;

  /**
   * @generated from field: int32 F_Largest_Tag = 536870911;
   */
  FLargestTag?: number;

  /**
   * @generated from field: int32 value = 100;
   */
  value?: number;
};

/**
 * Describes the message test_proto.Oneof.
 * Use `create(OneofSchema)` to create a new message.
 */
export const OneofSchema: GenMessage<Oneof, OneofJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 28);

/**
 * @generated from message test_proto.Oneof.F_Group
 */
export type Oneof_F_Group = Message<"test_proto.Oneof.F_Group"> & {
  /**
   * @generated from field: optional int32 x = 17;
   */
  x: number;
};

/**
 * @generated from message test_proto.Oneof.F_Group
 */
export type Oneof_F_GroupJson = {
  /**
   * @generated from field: optional int32 x = 17;
   */
  x?: number;
};

/**
 * Describes the message test_proto.Oneof.F_Group.
 * Use `create(Oneof_F_GroupSchema)` to create a new message.
 */
export const Oneof_F_GroupSchema: GenMessage<Oneof_F_Group, Oneof_F_GroupJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 28, 0);

/**
 * @generated from message test_proto.Communique
 */
export type Communique = Message<"test_proto.Communique"> & {
  /**
   * @generated from field: optional bool make_me_cry = 1;
   */
  makeMeCry: boolean;

  /**
   * This is a oneof, called "union".
   *
   * @generated from oneof test_proto.Communique.union
   */
  union: {
    /**
     * @generated from field: int32 number = 5;
     */
    value: number;
    case: "number";
  } | {
    /**
     * @generated from field: string name = 6;
     */
    value: string;
    case: "name";
  } | {
    /**
     * @generated from field: bytes data = 7;
     */
    value: Uint8Array;
    case: "data";
  } | {
    /**
     * @generated from field: double temp_c = 8;
     */
    value: number;
    case: "tempC";
  } | {
    /**
     * @generated from field: test_proto.MyMessage.Color col = 9;
     */
    value: MyMessage_Color;
    case: "col";
  } | {
    /**
     * @generated from field: test_proto.Strings msg = 10;
     */
    value: Strings;
    case: "msg";
  } | { case: undefined; value?: undefined };
};

/**
 * @generated from message test_proto.Communique
 */
export type CommuniqueJson = {
  /**
   * @generated from field: optional bool make_me_cry = 1;
   */
  makeMeCry?: boolean;

  /**
   * @generated from field: int32 number = 5;
   */
  number?: number;

  /**
   * @generated from field: string name = 6;
   */
  name?: string;

  /**
   * @generated from field: bytes data = 7;
   */
  data?: string;

  /**
   * @generated from field: double temp_c = 8;
   */
  tempC?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * @generated from field: test_proto.MyMessage.Color col = 9;
   */
  col?: MyMessage_ColorJson;

  /**
   * @generated from field: test_proto.Strings msg = 10;
   */
  msg?: StringsJson;
};

/**
 * Describes the message test_proto.Communique.
 * Use `create(CommuniqueSchema)` to create a new message.
 */
export const CommuniqueSchema: GenMessage<Communique, CommuniqueJson> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 29);

/**
 * @generated from message test_proto.TestUTF8
 */
export type TestUTF8 = Message<"test_proto.TestUTF8"> & {
  /**
   * @generated from field: optional string scalar = 1;
   */
  scalar: string;

  /**
   * @generated from field: repeated string vector = 2;
   */
  vector: string[];

  /**
   * @generated from oneof test_proto.TestUTF8.oneof
   */
  oneof: {
    /**
     * @generated from field: string field = 3;
     */
    value: string;
    case: "field";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: map<string, int64> map_key = 4;
   */
  mapKey: { [key: string]: bigint };

  /**
   * @generated from field: map<int64, string> map_value = 5;
   */
  mapValue: { [key: string]: string };
};

/**
 * @generated from message test_proto.TestUTF8
 */
export type TestUTF8Json = {
  /**
   * @generated from field: optional string scalar = 1;
   */
  scalar?: string;

  /**
   * @generated from field: repeated string vector = 2;
   */
  vector?: string[];

  /**
   * @generated from field: string field = 3;
   */
  field?: string;

  /**
   * @generated from field: map<string, int64> map_key = 4;
   */
  mapKey?: { [key: string]: string };

  /**
   * @generated from field: map<int64, string> map_value = 5;
   */
  mapValue?: { [key: string]: string };
};

/**
 * Describes the message test_proto.TestUTF8.
 * Use `create(TestUTF8Schema)` to create a new message.
 */
export const TestUTF8Schema: GenMessage<TestUTF8, TestUTF8Json> = /*@__PURE__*/
  messageDesc(file_test_proto_test, 30);

/**
 * @generated from enum test_proto.FOO
 */
export enum FOO {
  /**
   * @generated from enum value: FOO1 = 1;
   */
  FOO1 = 1,
}

/**
 * @generated from enum test_proto.FOO
 */
export type FOOJson = "FOO1";

/**
 * Describes the enum test_proto.FOO.
 */
export const FOOSchema: GenEnum<FOO, FOOJson> = /*@__PURE__*/
  enumDesc(file_test_proto_test, 0);

/**
 * leave field 200 unregistered for testing
 *
 * @generated from extension: repeated string greeting = 106;
 */
export const greeting: GenExtension<MyMessage, string[]> = /*@__PURE__*/
  extDesc(file_test_proto_test, 0);

/**
 * @generated from extension: optional test_proto.ComplexExtension complex = 200;
 */
export const complex: GenExtension<OtherMessage, ComplexExtension> = /*@__PURE__*/
  extDesc(file_test_proto_test, 1);

/**
 * @generated from extension: repeated test_proto.ComplexExtension r_complex = 201;
 */
export const r_complex: GenExtension<OtherMessage, ComplexExtension[]> = /*@__PURE__*/
  extDesc(file_test_proto_test, 2);

/**
 * @generated from extension: optional double no_default_double = 101;
 */
export const no_default_double: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 3);

/**
 * @generated from extension: optional float no_default_float = 102;
 */
export const no_default_float: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 4);

/**
 * @generated from extension: optional int32 no_default_int32 = 103;
 */
export const no_default_int32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 5);

/**
 * @generated from extension: optional int64 no_default_int64 = 104;
 */
export const no_default_int64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 6);

/**
 * @generated from extension: optional uint32 no_default_uint32 = 105;
 */
export const no_default_uint32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 7);

/**
 * @generated from extension: optional uint64 no_default_uint64 = 106;
 */
export const no_default_uint64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 8);

/**
 * @generated from extension: optional sint32 no_default_sint32 = 107;
 */
export const no_default_sint32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 9);

/**
 * @generated from extension: optional sint64 no_default_sint64 = 108;
 */
export const no_default_sint64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 10);

/**
 * @generated from extension: optional fixed32 no_default_fixed32 = 109;
 */
export const no_default_fixed32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 11);

/**
 * @generated from extension: optional fixed64 no_default_fixed64 = 110;
 */
export const no_default_fixed64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 12);

/**
 * @generated from extension: optional sfixed32 no_default_sfixed32 = 111;
 */
export const no_default_sfixed32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 13);

/**
 * @generated from extension: optional sfixed64 no_default_sfixed64 = 112;
 */
export const no_default_sfixed64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 14);

/**
 * @generated from extension: optional bool no_default_bool = 113;
 */
export const no_default_bool: GenExtension<DefaultsMessage, boolean> = /*@__PURE__*/
  extDesc(file_test_proto_test, 15);

/**
 * @generated from extension: optional string no_default_string = 114;
 */
export const no_default_string: GenExtension<DefaultsMessage, string> = /*@__PURE__*/
  extDesc(file_test_proto_test, 16);

/**
 * @generated from extension: optional bytes no_default_bytes = 115;
 */
export const no_default_bytes: GenExtension<DefaultsMessage, Uint8Array> = /*@__PURE__*/
  extDesc(file_test_proto_test, 17);

/**
 * @generated from extension: optional test_proto.DefaultsMessage.DefaultsEnum no_default_enum = 116;
 */
export const no_default_enum: GenExtension<DefaultsMessage, DefaultsMessage_DefaultsEnum> = /*@__PURE__*/
  extDesc(file_test_proto_test, 18);

/**
 * @generated from extension: optional double default_double = 201 [default = 3.1415];
 */
export const default_double: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 19);

/**
 * @generated from extension: optional float default_float = 202 [default = 3.14];
 */
export const default_float: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 20);

/**
 * @generated from extension: optional int32 default_int32 = 203 [default = 42];
 */
export const default_int32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 21);

/**
 * @generated from extension: optional int64 default_int64 = 204 [default = 43];
 */
export const default_int64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 22);

/**
 * @generated from extension: optional uint32 default_uint32 = 205 [default = 44];
 */
export const default_uint32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 23);

/**
 * @generated from extension: optional uint64 default_uint64 = 206 [default = 45];
 */
export const default_uint64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 24);

/**
 * @generated from extension: optional sint32 default_sint32 = 207 [default = 46];
 */
export const default_sint32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 25);

/**
 * @generated from extension: optional sint64 default_sint64 = 208 [default = 47];
 */
export const default_sint64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 26);

/**
 * @generated from extension: optional fixed32 default_fixed32 = 209 [default = 48];
 */
export const default_fixed32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 27);

/**
 * @generated from extension: optional fixed64 default_fixed64 = 210 [default = 49];
 */
export const default_fixed64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 28);

/**
 * @generated from extension: optional sfixed32 default_sfixed32 = 211 [default = 50];
 */
export const default_sfixed32: GenExtension<DefaultsMessage, number> = /*@__PURE__*/
  extDesc(file_test_proto_test, 29);

/**
 * @generated from extension: optional sfixed64 default_sfixed64 = 212 [default = 51];
 */
export const default_sfixed64: GenExtension<DefaultsMessage, bigint> = /*@__PURE__*/
  extDesc(file_test_proto_test, 30);

/**
 * @generated from extension: optional bool default_bool = 213 [default = true];
 */
export const default_bool: GenExtension<DefaultsMessage, boolean> = /*@__PURE__*/
  extDesc(file_test_proto_test, 31);

/**
 * @generated from extension: optional string default_string = 214 [default = "Hello, string,def=foo"];
 */
export const default_string: GenExtension<DefaultsMessage, string> = /*@__PURE__*/
  extDesc(file_test_proto_test, 32);

/**
 * @generated from extension: optional bytes default_bytes = 215 [default = "Hello, bytes"];
 */
export const default_bytes: GenExtension<DefaultsMessage, Uint8Array> = /*@__PURE__*/
  extDesc(file_test_proto_test, 33);

/**
 * @generated from extension: optional test_proto.DefaultsMessage.DefaultsEnum default_enum = 216 [default = ONE];
 */
export const default_enum: GenExtension<DefaultsMessage, DefaultsMessage_DefaultsEnum> = /*@__PURE__*/
  extDesc(file_test_proto_test, 34);

