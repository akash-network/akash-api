// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file akash/provider/lease/v1/service.proto (package akash.provider.lease.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { LeaseID } from '../../../market/v1beta4/lease_pb.js';
import { Group } from '../../../manifest/v2beta2/group_pb.js';

/**
 * LeaseServiceStatus
 *
 * @generated from message akash.provider.lease.v1.LeaseServiceStatus
 */
export class LeaseServiceStatus extends Message<LeaseServiceStatus> {
  /**
   * @generated from field: int32 available = 1;
   */
  available = 0;

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  /**
   * @generated from field: repeated string uris = 3;
   */
  uris: string[] = [];

  /**
   * @generated from field: int64 observed_generation = 4;
   */
  observedGeneration = protoInt64.zero;

  /**
   * @generated from field: int32 replicas = 5;
   */
  replicas = 0;

  /**
   * @generated from field: int32 updated_replicas = 6;
   */
  updatedReplicas = 0;

  /**
   * @generated from field: int32 ready_replicas = 7;
   */
  readyReplicas = 0;

  /**
   * @generated from field: int32 available_replicas = 8;
   */
  availableReplicas = 0;

  constructor(data?: PartialMessage<LeaseServiceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.LeaseServiceStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'available', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'total', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    {
      no: 3,
      name: 'uris',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 4,
      name: 'observed_generation',
      kind: 'scalar',
      T: 3 /* ScalarType.INT64 */,
    },
    { no: 5, name: 'replicas', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    {
      no: 6,
      name: 'updated_replicas',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
    {
      no: 7,
      name: 'ready_replicas',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
    {
      no: 8,
      name: 'available_replicas',
      kind: 'scalar',
      T: 5 /* ScalarType.INT32 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LeaseServiceStatus {
    return new LeaseServiceStatus().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LeaseServiceStatus {
    return new LeaseServiceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LeaseServiceStatus {
    return new LeaseServiceStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: LeaseServiceStatus | PlainMessage<LeaseServiceStatus> | undefined,
    b: LeaseServiceStatus | PlainMessage<LeaseServiceStatus> | undefined,
  ): boolean {
    return proto3.util.equals(LeaseServiceStatus, a, b);
  }
}

/**
 * LeaseIPStatus
 *
 * @generated from message akash.provider.lease.v1.LeaseIPStatus
 */
export class LeaseIPStatus extends Message<LeaseIPStatus> {
  /**
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * @generated from field: uint32 external_port = 2;
   */
  externalPort = 0;

  /**
   * @generated from field: string protocol = 3;
   */
  protocol = '';

  /**
   * @generated from field: string ip = 4;
   */
  ip = '';

  constructor(data?: PartialMessage<LeaseIPStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.LeaseIPStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'port', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    {
      no: 2,
      name: 'external_port',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 3, name: 'protocol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LeaseIPStatus {
    return new LeaseIPStatus().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LeaseIPStatus {
    return new LeaseIPStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LeaseIPStatus {
    return new LeaseIPStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: LeaseIPStatus | PlainMessage<LeaseIPStatus> | undefined,
    b: LeaseIPStatus | PlainMessage<LeaseIPStatus> | undefined,
  ): boolean {
    return proto3.util.equals(LeaseIPStatus, a, b);
  }
}

/**
 * ForwarderPortStatus
 *
 * @generated from message akash.provider.lease.v1.ForwarderPortStatus
 */
export class ForwarderPortStatus extends Message<ForwarderPortStatus> {
  /**
   * @generated from field: string host = 1;
   */
  host = '';

  /**
   * @generated from field: uint32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: uint32 external_port = 3;
   */
  externalPort = 0;

  /**
   * @generated from field: string proto = 4;
   */
  proto = '';

  /**
   * @generated from field: string name = 5;
   */
  name = '';

  constructor(data?: PartialMessage<ForwarderPortStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ForwarderPortStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'host', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'port', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    {
      no: 3,
      name: 'external_port',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 4, name: 'proto', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ForwarderPortStatus {
    return new ForwarderPortStatus().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ForwarderPortStatus {
    return new ForwarderPortStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ForwarderPortStatus {
    return new ForwarderPortStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: ForwarderPortStatus | PlainMessage<ForwarderPortStatus> | undefined,
    b: ForwarderPortStatus | PlainMessage<ForwarderPortStatus> | undefined,
  ): boolean {
    return proto3.util.equals(ForwarderPortStatus, a, b);
  }
}

/**
 * ServiceStatus
 *
 * @generated from message akash.provider.lease.v1.ServiceStatus
 */
export class ServiceStatus extends Message<ServiceStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: akash.provider.lease.v1.LeaseServiceStatus status = 2;
   */
  status?: LeaseServiceStatus;

  /**
   * @generated from field: repeated akash.provider.lease.v1.ForwarderPortStatus ports = 3;
   */
  ports: ForwarderPortStatus[] = [];

  /**
   * @generated from field: repeated akash.provider.lease.v1.LeaseIPStatus ips = 4;
   */
  ips: LeaseIPStatus[] = [];

  constructor(data?: PartialMessage<ServiceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'status', kind: 'message', T: LeaseServiceStatus },
    {
      no: 3,
      name: 'ports',
      kind: 'message',
      T: ForwarderPortStatus,
      repeated: true,
    },
    { no: 4, name: 'ips', kind: 'message', T: LeaseIPStatus, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceStatus {
    return new ServiceStatus().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatus {
    return new ServiceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatus {
    return new ServiceStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceStatus | PlainMessage<ServiceStatus> | undefined,
    b: ServiceStatus | PlainMessage<ServiceStatus> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceStatus, a, b);
  }
}

/**
 * SendManifestRequest is request type for the SendManifest Providers RPC method
 *
 * @generated from message akash.provider.lease.v1.SendManifestRequest
 */
export class SendManifestRequest extends Message<SendManifestRequest> {
  /**
   * @generated from field: akash.market.v1beta4.LeaseID lease_id = 1;
   */
  leaseId?: LeaseID;

  /**
   * @generated from field: repeated akash.manifest.v2beta2.Group manifest = 2;
   */
  manifest: Group[] = [];

  constructor(data?: PartialMessage<SendManifestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.SendManifestRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lease_id', kind: 'message', T: LeaseID },
    { no: 2, name: 'manifest', kind: 'message', T: Group, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendManifestRequest {
    return new SendManifestRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendManifestRequest {
    return new SendManifestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendManifestRequest {
    return new SendManifestRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendManifestRequest | PlainMessage<SendManifestRequest> | undefined,
    b: SendManifestRequest | PlainMessage<SendManifestRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendManifestRequest, a, b);
  }
}

/**
 * SendManifestResponse is response type for the SendManifest Providers RPC method
 *
 * @generated from message akash.provider.lease.v1.SendManifestResponse
 */
export class SendManifestResponse extends Message<SendManifestResponse> {
  constructor(data?: PartialMessage<SendManifestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.SendManifestResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SendManifestResponse {
    return new SendManifestResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SendManifestResponse {
    return new SendManifestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SendManifestResponse {
    return new SendManifestResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendManifestResponse | PlainMessage<SendManifestResponse> | undefined,
    b: SendManifestResponse | PlainMessage<SendManifestResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SendManifestResponse, a, b);
  }
}

/**
 * ServiceLogsRequest
 *
 * @generated from message akash.provider.lease.v1.ServiceLogsRequest
 */
export class ServiceLogsRequest extends Message<ServiceLogsRequest> {
  /**
   * @generated from field: akash.market.v1beta4.LeaseID lease_id = 1;
   */
  leaseId?: LeaseID;

  /**
   * @generated from field: repeated string services = 2;
   */
  services: string[] = [];

  constructor(data?: PartialMessage<ServiceLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceLogsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lease_id', kind: 'message', T: LeaseID },
    {
      no: 2,
      name: 'services',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceLogsRequest {
    return new ServiceLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogsRequest {
    return new ServiceLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogsRequest {
    return new ServiceLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceLogsRequest | PlainMessage<ServiceLogsRequest> | undefined,
    b: ServiceLogsRequest | PlainMessage<ServiceLogsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceLogsRequest, a, b);
  }
}

/**
 * ServiceLogs
 *
 * @generated from message akash.provider.lease.v1.ServiceLogs
 */
export class ServiceLogs extends Message<ServiceLogs> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: bytes logs = 2;
   */
  logs = new Uint8Array(0);

  constructor(data?: PartialMessage<ServiceLogs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceLogs';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'logs', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceLogs {
    return new ServiceLogs().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogs {
    return new ServiceLogs().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogs {
    return new ServiceLogs().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceLogs | PlainMessage<ServiceLogs> | undefined,
    b: ServiceLogs | PlainMessage<ServiceLogs> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceLogs, a, b);
  }
}

/**
 * ServiceLogsResponse
 *
 * @generated from message akash.provider.lease.v1.ServiceLogsResponse
 */
export class ServiceLogsResponse extends Message<ServiceLogsResponse> {
  /**
   * @generated from field: repeated akash.provider.lease.v1.ServiceLogs services = 1;
   */
  services: ServiceLogs[] = [];

  constructor(data?: PartialMessage<ServiceLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceLogsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'services',
      kind: 'message',
      T: ServiceLogs,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceLogsResponse {
    return new ServiceLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogsResponse {
    return new ServiceLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceLogsResponse {
    return new ServiceLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceLogsResponse | PlainMessage<ServiceLogsResponse> | undefined,
    b: ServiceLogsResponse | PlainMessage<ServiceLogsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceLogsResponse, a, b);
  }
}

/**
 * ShellRequest
 *
 * @generated from message akash.provider.lease.v1.ShellRequest
 */
export class ShellRequest extends Message<ShellRequest> {
  /**
   * @generated from field: akash.market.v1beta4.LeaseID lease_id = 1;
   */
  leaseId?: LeaseID;

  constructor(data?: PartialMessage<ShellRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ShellRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lease_id', kind: 'message', T: LeaseID },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ShellRequest {
    return new ShellRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ShellRequest {
    return new ShellRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ShellRequest {
    return new ShellRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ShellRequest | PlainMessage<ShellRequest> | undefined,
    b: ShellRequest | PlainMessage<ShellRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ShellRequest, a, b);
  }
}

/**
 * ServiceStatusRequest
 *
 * @generated from message akash.provider.lease.v1.ServiceStatusRequest
 */
export class ServiceStatusRequest extends Message<ServiceStatusRequest> {
  /**
   * @generated from field: akash.market.v1beta4.LeaseID lease_id = 1;
   */
  leaseId?: LeaseID;

  /**
   * @generated from field: repeated string services = 2;
   */
  services: string[] = [];

  constructor(data?: PartialMessage<ServiceStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceStatusRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'lease_id', kind: 'message', T: LeaseID },
    {
      no: 2,
      name: 'services',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceStatusRequest {
    return new ServiceStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatusRequest {
    return new ServiceStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatusRequest {
    return new ServiceStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceStatusRequest | PlainMessage<ServiceStatusRequest> | undefined,
    b: ServiceStatusRequest | PlainMessage<ServiceStatusRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceStatusRequest, a, b);
  }
}

/**
 * ServiceStatusResponse
 *
 * @generated from message akash.provider.lease.v1.ServiceStatusResponse
 */
export class ServiceStatusResponse extends Message<ServiceStatusResponse> {
  /**
   * @generated from field: repeated akash.provider.lease.v1.ServiceStatus services = 1;
   */
  services: ServiceStatus[] = [];

  constructor(data?: PartialMessage<ServiceStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.provider.lease.v1.ServiceStatusResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'services',
      kind: 'message',
      T: ServiceStatus,
      repeated: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceStatusResponse {
    return new ServiceStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatusResponse {
    return new ServiceStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceStatusResponse {
    return new ServiceStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceStatusResponse | PlainMessage<ServiceStatusResponse> | undefined,
    b: ServiceStatusResponse | PlainMessage<ServiceStatusResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceStatusResponse, a, b);
  }
}
