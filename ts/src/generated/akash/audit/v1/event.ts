// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/audit/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { messageTypeRegistry } from "../../../typeRegistry";

/** EventTrustedAuditorCreated defines an SDK message for signing a provider attributes */
export interface EventTrustedAuditorCreated {
  $type: "akash.audit.v1.EventTrustedAuditorCreated";
  owner: string;
  auditor: string;
}

/** EventTrustedAuditorCreated defines an SDK message for signing a provider attributes */
export interface EventTrustedAuditorDeleted {
  $type: "akash.audit.v1.EventTrustedAuditorDeleted";
  owner: string;
  auditor: string;
}

function createBaseEventTrustedAuditorCreated(): EventTrustedAuditorCreated {
  return {
    $type: "akash.audit.v1.EventTrustedAuditorCreated",
    owner: "",
    auditor: "",
  };
}

export const EventTrustedAuditorCreated: MessageFns<
  EventTrustedAuditorCreated,
  "akash.audit.v1.EventTrustedAuditorCreated"
> = {
  $type: "akash.audit.v1.EventTrustedAuditorCreated" as const,

  encode(
    message: EventTrustedAuditorCreated,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.auditor !== "") {
      writer.uint32(18).string(message.auditor);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventTrustedAuditorCreated {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTrustedAuditorCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.auditor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTrustedAuditorCreated {
    return {
      $type: EventTrustedAuditorCreated.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
    };
  },

  toJSON(message: EventTrustedAuditorCreated): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    return obj;
  },

  create(
    base?: DeepPartial<EventTrustedAuditorCreated>,
  ): EventTrustedAuditorCreated {
    return EventTrustedAuditorCreated.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EventTrustedAuditorCreated>,
  ): EventTrustedAuditorCreated {
    const message = createBaseEventTrustedAuditorCreated();
    message.owner = object.owner ?? "";
    message.auditor = object.auditor ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EventTrustedAuditorCreated.$type,
  EventTrustedAuditorCreated,
);

function createBaseEventTrustedAuditorDeleted(): EventTrustedAuditorDeleted {
  return {
    $type: "akash.audit.v1.EventTrustedAuditorDeleted",
    owner: "",
    auditor: "",
  };
}

export const EventTrustedAuditorDeleted: MessageFns<
  EventTrustedAuditorDeleted,
  "akash.audit.v1.EventTrustedAuditorDeleted"
> = {
  $type: "akash.audit.v1.EventTrustedAuditorDeleted" as const,

  encode(
    message: EventTrustedAuditorDeleted,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.auditor !== "") {
      writer.uint32(18).string(message.auditor);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventTrustedAuditorDeleted {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventTrustedAuditorDeleted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.auditor = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventTrustedAuditorDeleted {
    return {
      $type: EventTrustedAuditorDeleted.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
    };
  },

  toJSON(message: EventTrustedAuditorDeleted): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    return obj;
  },

  create(
    base?: DeepPartial<EventTrustedAuditorDeleted>,
  ): EventTrustedAuditorDeleted {
    return EventTrustedAuditorDeleted.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EventTrustedAuditorDeleted>,
  ): EventTrustedAuditorDeleted {
    const message = createBaseEventTrustedAuditorDeleted();
    message.owner = object.owner ?? "";
    message.auditor = object.auditor ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  EventTrustedAuditorDeleted.$type,
  EventTrustedAuditorDeleted,
);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
