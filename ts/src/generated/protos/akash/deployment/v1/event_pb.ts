// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file akash/deployment/v1/event.proto (package akash.deployment.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { DeploymentID, DeploymentIDJson } from "./deployment_pb";
import { file_akash_deployment_v1_deployment } from "./deployment_pb";
import type { GroupID, GroupIDJson } from "./group_pb";
import { file_akash_deployment_v1_group } from "./group_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/deployment/v1/event.proto.
 */
export const file_akash_deployment_v1_event: GenFile = /*@__PURE__*/
  fileDesc("Ch9ha2FzaC9kZXBsb3ltZW50L3YxL2V2ZW50LnByb3RvEhNha2FzaC5kZXBsb3ltZW50LnYxIpMBChZFdmVudERlcGxveW1lbnRDcmVhdGVkEkwKAmlkGAEgASgLMiEuYWthc2guZGVwbG95bWVudC52MS5EZXBsb3ltZW50SURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiEiUKBGhhc2gYAiABKAxCF+reHwRoYXNo8t4fC3lhbWw6Imhhc2giOgTooB8AIpMBChZFdmVudERlcGxveW1lbnRVcGRhdGVkEkwKAmlkGAEgASgLMiEuYWthc2guZGVwbG95bWVudC52MS5EZXBsb3ltZW50SURCHcjeHwDi3h8CSUTq3h8CaWTy3h8JeWFtbDoiaWQiEiUKBGhhc2gYAiABKAxCF+reHwRoYXNo8t4fC3lhbWw6Imhhc2giOgTooB8AImsKFUV2ZW50RGVwbG95bWVudENsb3NlZBJMCgJpZBgBIAEoCzIhLmFrYXNoLmRlcGxveW1lbnQudjEuRGVwbG95bWVudElEQh3I3h8A4t4fAklE6t4fAmlk8t4fCXlhbWw6ImlkIjoE6KAfACJiChFFdmVudEdyb3VwU3RhcnRlZBJHCgJpZBgBIAEoCzIcLmFrYXNoLmRlcGxveW1lbnQudjEuR3JvdXBJREIdyN4fAOLeHwJJROreHwJpZPLeHwl5YW1sOiJpZCI6BOigHwAiYQoQRXZlbnRHcm91cFBhdXNlZBJHCgJpZBgBIAEoCzIcLmFrYXNoLmRlcGxveW1lbnQudjEuR3JvdXBJREIdyN4fAOLeHwJJROreHwJpZPLeHwl5YW1sOiJpZCI6BOigHwAiYQoQRXZlbnRHcm91cENsb3NlZBJHCgJpZBgBIAEoCzIcLmFrYXNoLmRlcGxveW1lbnQudjEuR3JvdXBJREIdyN4fAOLeHwJJROreHwJpZPLeHwl5YW1sOiJpZCI6BOigHwBCI1ohcGtnLmFrdC5kZXYvZ28vbm9kZS9kZXBsb3ltZW50L3YxYgZwcm90bzM", [file_gogoproto_gogo, file_akash_deployment_v1_deployment, file_akash_deployment_v1_group]);

/**
 * EventDeploymentCreated event is triggered when deployment is created on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentCreated
 */
export type EventDeploymentCreated = Message<"akash.deployment.v1.EventDeploymentCreated"> & {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentID;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 2;
   */
  hash: Uint8Array;
};

/**
 * EventDeploymentCreated event is triggered when deployment is created on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentCreated
 */
export type EventDeploymentCreatedJson = {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentIDJson;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 2;
   */
  hash?: string;
};

/**
 * Describes the message akash.deployment.v1.EventDeploymentCreated.
 * Use `create(EventDeploymentCreatedSchema)` to create a new message.
 */
export const EventDeploymentCreatedSchema: GenMessage<EventDeploymentCreated, EventDeploymentCreatedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 0);

/**
 * EventDeploymentUpdated is triggered when deployment is updated on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentUpdated
 */
export type EventDeploymentUpdated = Message<"akash.deployment.v1.EventDeploymentUpdated"> & {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentID;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 2;
   */
  hash: Uint8Array;
};

/**
 * EventDeploymentUpdated is triggered when deployment is updated on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentUpdated
 */
export type EventDeploymentUpdatedJson = {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentIDJson;

  /**
   * Hash is an hashed representation of the deployment.
   *
   * @generated from field: bytes hash = 2;
   */
  hash?: string;
};

/**
 * Describes the message akash.deployment.v1.EventDeploymentUpdated.
 * Use `create(EventDeploymentUpdatedSchema)` to create a new message.
 */
export const EventDeploymentUpdatedSchema: GenMessage<EventDeploymentUpdated, EventDeploymentUpdatedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 1);

/**
 * EventDeploymentClosed is triggered when deployment is closed on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentClosed
 */
export type EventDeploymentClosed = Message<"akash.deployment.v1.EventDeploymentClosed"> & {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentID;
};

/**
 * EventDeploymentClosed is triggered when deployment is closed on chain.
 * It contains all the information required to identify a deployment.
 *
 * @generated from message akash.deployment.v1.EventDeploymentClosed
 */
export type EventDeploymentClosedJson = {
  /**
   * ID is the unique identifier of the deployment.
   *
   * @generated from field: akash.deployment.v1.DeploymentID id = 1;
   */
  id?: DeploymentIDJson;
};

/**
 * Describes the message akash.deployment.v1.EventDeploymentClosed.
 * Use `create(EventDeploymentClosedSchema)` to create a new message.
 */
export const EventDeploymentClosedSchema: GenMessage<EventDeploymentClosed, EventDeploymentClosedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 2);

/**
 * EventGroupStarted is triggered when deployment group is started.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupStarted
 */
export type EventGroupStarted = Message<"akash.deployment.v1.EventGroupStarted"> & {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupID;
};

/**
 * EventGroupStarted is triggered when deployment group is started.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupStarted
 */
export type EventGroupStartedJson = {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupIDJson;
};

/**
 * Describes the message akash.deployment.v1.EventGroupStarted.
 * Use `create(EventGroupStartedSchema)` to create a new message.
 */
export const EventGroupStartedSchema: GenMessage<EventGroupStarted, EventGroupStartedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 3);

/**
 * EventGroupPaused is triggered when deployment group is paused.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupPaused
 */
export type EventGroupPaused = Message<"akash.deployment.v1.EventGroupPaused"> & {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupID;
};

/**
 * EventGroupPaused is triggered when deployment group is paused.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupPaused
 */
export type EventGroupPausedJson = {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupIDJson;
};

/**
 * Describes the message akash.deployment.v1.EventGroupPaused.
 * Use `create(EventGroupPausedSchema)` to create a new message.
 */
export const EventGroupPausedSchema: GenMessage<EventGroupPaused, EventGroupPausedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 4);

/**
 * EventGroupClosed is triggered when deployment group is closed.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupClosed
 */
export type EventGroupClosed = Message<"akash.deployment.v1.EventGroupClosed"> & {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupID;
};

/**
 * EventGroupClosed is triggered when deployment group is closed.
 * It contains all the information required to identify a group.
 *
 * @generated from message akash.deployment.v1.EventGroupClosed
 */
export type EventGroupClosedJson = {
  /**
   * ID is the unique identifier of the group.
   *
   * @generated from field: akash.deployment.v1.GroupID id = 1;
   */
  id?: GroupIDJson;
};

/**
 * Describes the message akash.deployment.v1.EventGroupClosed.
 * Use `create(EventGroupClosedSchema)` to create a new message.
 */
export const EventGroupClosedSchema: GenMessage<EventGroupClosed, EventGroupClosedJson> = /*@__PURE__*/
  messageDesc(file_akash_deployment_v1_event, 5);

