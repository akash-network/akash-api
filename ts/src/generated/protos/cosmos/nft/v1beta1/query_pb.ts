// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/nft/v1beta1/query.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../base/query/v1beta1/pagination_pb";
import { file_cosmos_base_query_v1beta1_pagination } from "../../base/query/v1beta1/pagination_pb";
import { file_google_api_annotations } from "../../../google/api/annotations_pb";
import type { Class, ClassJson, NFT, NFTJson } from "./nft_pb";
import { file_cosmos_nft_v1beta1_nft } from "./nft_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/nft/v1beta1/query.proto.
 */
export const file_cosmos_nft_v1beta1_query: GenFile = /*@__PURE__*/
  fileDesc("Ch5jb3Ntb3MvbmZ0L3YxYmV0YTEvcXVlcnkucHJvdG8SEmNvc21vcy5uZnQudjFiZXRhMSI2ChNRdWVyeUJhbGFuY2VSZXF1ZXN0EhAKCGNsYXNzX2lkGAEgASgJEg0KBW93bmVyGAIgASgJIiYKFFF1ZXJ5QmFsYW5jZVJlc3BvbnNlEg4KBmFtb3VudBgBIAEoBCIxChFRdWVyeU93bmVyUmVxdWVzdBIQCghjbGFzc19pZBgBIAEoCRIKCgJpZBgCIAEoCSIjChJRdWVyeU93bmVyUmVzcG9uc2USDQoFb3duZXIYASABKAkiJgoSUXVlcnlTdXBwbHlSZXF1ZXN0EhAKCGNsYXNzX2lkGAEgASgJIiUKE1F1ZXJ5U3VwcGx5UmVzcG9uc2USDgoGYW1vdW50GAEgASgEIm8KEFF1ZXJ5TkZUc1JlcXVlc3QSEAoIY2xhc3NfaWQYASABKAkSDQoFb3duZXIYAiABKAkSOgoKcGFnaW5hdGlvbhgDIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QidwoRUXVlcnlORlRzUmVzcG9uc2USJQoEbmZ0cxgBIAMoCzIXLmNvc21vcy5uZnQudjFiZXRhMS5ORlQSOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlIi8KD1F1ZXJ5TkZUUmVxdWVzdBIQCghjbGFzc19pZBgBIAEoCRIKCgJpZBgCIAEoCSI4ChBRdWVyeU5GVFJlc3BvbnNlEiQKA25mdBgBIAEoCzIXLmNvc21vcy5uZnQudjFiZXRhMS5ORlQiJQoRUXVlcnlDbGFzc1JlcXVlc3QSEAoIY2xhc3NfaWQYASABKAkiPgoSUXVlcnlDbGFzc1Jlc3BvbnNlEigKBWNsYXNzGAEgASgLMhkuY29zbW9zLm5mdC52MWJldGExLkNsYXNzIlEKE1F1ZXJ5Q2xhc3Nlc1JlcXVlc3QSOgoKcGFnaW5hdGlvbhgBIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QifwoUUXVlcnlDbGFzc2VzUmVzcG9uc2USKgoHY2xhc3NlcxgBIAMoCzIZLmNvc21vcy5uZnQudjFiZXRhMS5DbGFzcxI7CgpwYWdpbmF0aW9uGAIgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2UyvgcKBVF1ZXJ5EpQBCgdCYWxhbmNlEicuY29zbW9zLm5mdC52MWJldGExLlF1ZXJ5QmFsYW5jZVJlcXVlc3QaKC5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlCYWxhbmNlUmVzcG9uc2UiNoLT5JMCMBIuL2Nvc21vcy9uZnQvdjFiZXRhMS9iYWxhbmNlL3tvd25lcn0ve2NsYXNzX2lkfRKJAQoFT3duZXISJS5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlPd25lclJlcXVlc3QaJi5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlPd25lclJlc3BvbnNlIjGC0+STAisSKS9jb3Ntb3MvbmZ0L3YxYmV0YTEvb3duZXIve2NsYXNzX2lkfS97aWR9EogBCgZTdXBwbHkSJi5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlTdXBwbHlSZXF1ZXN0GicuY29zbW9zLm5mdC52MWJldGExLlF1ZXJ5U3VwcGx5UmVzcG9uc2UiLYLT5JMCJxIlL2Nvc21vcy9uZnQvdjFiZXRhMS9zdXBwbHkve2NsYXNzX2lkfRJ1CgRORlRzEiQuY29zbW9zLm5mdC52MWJldGExLlF1ZXJ5TkZUc1JlcXVlc3QaJS5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlORlRzUmVzcG9uc2UiIILT5JMCGhIYL2Nvc21vcy9uZnQvdjFiZXRhMS9uZnRzEoIBCgNORlQSIy5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlORlRSZXF1ZXN0GiQuY29zbW9zLm5mdC52MWJldGExLlF1ZXJ5TkZUUmVzcG9uc2UiMILT5JMCKhIoL2Nvc21vcy9uZnQvdjFiZXRhMS9uZnRzL3tjbGFzc19pZH0ve2lkfRKGAQoFQ2xhc3MSJS5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlDbGFzc1JlcXVlc3QaJi5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlDbGFzc1Jlc3BvbnNlIi6C0+STAigSJi9jb3Ntb3MvbmZ0L3YxYmV0YTEvY2xhc3Nlcy97Y2xhc3NfaWR9EoEBCgdDbGFzc2VzEicuY29zbW9zLm5mdC52MWJldGExLlF1ZXJ5Q2xhc3Nlc1JlcXVlc3QaKC5jb3Ntb3MubmZ0LnYxYmV0YTEuUXVlcnlDbGFzc2VzUmVzcG9uc2UiI4LT5JMCHRIbL2Nvc21vcy9uZnQvdjFiZXRhMS9jbGFzc2VzQiRaImdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsveC9uZnRiBnByb3RvMw", [file_cosmos_base_query_v1beta1_pagination, file_google_api_annotations, file_cosmos_nft_v1beta1_nft]);

/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceRequest
 */
export type QueryBalanceRequest = Message<"cosmos.nft.v1beta1.QueryBalanceRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 2;
   */
  owner: string;
};

/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceRequest
 */
export type QueryBalanceRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 2;
   */
  owner?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryBalanceRequest.
 * Use `create(QueryBalanceRequestSchema)` to create a new message.
 */
export const QueryBalanceRequestSchema: GenMessage<QueryBalanceRequest, QueryBalanceRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 0);

/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceResponse
 */
export type QueryBalanceResponse = Message<"cosmos.nft.v1beta1.QueryBalanceResponse"> & {
  /**
   * amount is the number of all NFTs of a given class owned by the owner
   *
   * @generated from field: uint64 amount = 1;
   */
  amount: bigint;
};

/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryBalanceResponse
 */
export type QueryBalanceResponseJson = {
  /**
   * amount is the number of all NFTs of a given class owned by the owner
   *
   * @generated from field: uint64 amount = 1;
   */
  amount?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryBalanceResponse.
 * Use `create(QueryBalanceResponseSchema)` to create a new message.
 */
export const QueryBalanceResponseSchema: GenMessage<QueryBalanceResponse, QueryBalanceResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 1);

/**
 * QueryOwnerRequest is the request type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerRequest
 */
export type QueryOwnerRequest = Message<"cosmos.nft.v1beta1.QueryOwnerRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * id is a unique identifier of the NFT
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * QueryOwnerRequest is the request type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerRequest
 */
export type QueryOwnerRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * id is a unique identifier of the NFT
   *
   * @generated from field: string id = 2;
   */
  id?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryOwnerRequest.
 * Use `create(QueryOwnerRequestSchema)` to create a new message.
 */
export const QueryOwnerRequestSchema: GenMessage<QueryOwnerRequest, QueryOwnerRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 2);

/**
 * QueryOwnerResponse is the response type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerResponse
 */
export type QueryOwnerResponse = Message<"cosmos.nft.v1beta1.QueryOwnerResponse"> & {
  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 1;
   */
  owner: string;
};

/**
 * QueryOwnerResponse is the response type for the Query/Owner RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryOwnerResponse
 */
export type QueryOwnerResponseJson = {
  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 1;
   */
  owner?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryOwnerResponse.
 * Use `create(QueryOwnerResponseSchema)` to create a new message.
 */
export const QueryOwnerResponseSchema: GenMessage<QueryOwnerResponse, QueryOwnerResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 3);

/**
 * QuerySupplyRequest is the request type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyRequest
 */
export type QuerySupplyRequest = Message<"cosmos.nft.v1beta1.QuerySupplyRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;
};

/**
 * QuerySupplyRequest is the request type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyRequest
 */
export type QuerySupplyRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QuerySupplyRequest.
 * Use `create(QuerySupplyRequestSchema)` to create a new message.
 */
export const QuerySupplyRequestSchema: GenMessage<QuerySupplyRequest, QuerySupplyRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 4);

/**
 * QuerySupplyResponse is the response type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyResponse
 */
export type QuerySupplyResponse = Message<"cosmos.nft.v1beta1.QuerySupplyResponse"> & {
  /**
   * amount is the number of all NFTs from the given class
   *
   * @generated from field: uint64 amount = 1;
   */
  amount: bigint;
};

/**
 * QuerySupplyResponse is the response type for the Query/Supply RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QuerySupplyResponse
 */
export type QuerySupplyResponseJson = {
  /**
   * amount is the number of all NFTs from the given class
   *
   * @generated from field: uint64 amount = 1;
   */
  amount?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QuerySupplyResponse.
 * Use `create(QuerySupplyResponseSchema)` to create a new message.
 */
export const QuerySupplyResponseSchema: GenMessage<QuerySupplyResponse, QuerySupplyResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 5);

/**
 * QueryNFTstRequest is the request type for the Query/NFTs RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsRequest
 */
export type QueryNFTsRequest = Message<"cosmos.nft.v1beta1.QueryNFTsRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;
};

/**
 * QueryNFTstRequest is the request type for the Query/NFTs RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsRequest
 */
export type QueryNFTsRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 2;
   */
  owner?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryNFTsRequest.
 * Use `create(QueryNFTsRequestSchema)` to create a new message.
 */
export const QueryNFTsRequestSchema: GenMessage<QueryNFTsRequest, QueryNFTsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 6);

/**
 * QueryNFTsResponse is the response type for the Query/NFTs RPC methods
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsResponse
 */
export type QueryNFTsResponse = Message<"cosmos.nft.v1beta1.QueryNFTsResponse"> & {
  /**
   * NFT defines the NFT
   *
   * @generated from field: repeated cosmos.nft.v1beta1.NFT nfts = 1;
   */
  nfts: NFT[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryNFTsResponse is the response type for the Query/NFTs RPC methods
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTsResponse
 */
export type QueryNFTsResponseJson = {
  /**
   * NFT defines the NFT
   *
   * @generated from field: repeated cosmos.nft.v1beta1.NFT nfts = 1;
   */
  nfts?: NFTJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryNFTsResponse.
 * Use `create(QueryNFTsResponseSchema)` to create a new message.
 */
export const QueryNFTsResponseSchema: GenMessage<QueryNFTsResponse, QueryNFTsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 7);

/**
 * QueryNFTRequest is the request type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTRequest
 */
export type QueryNFTRequest = Message<"cosmos.nft.v1beta1.QueryNFTRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * id is a unique identifier of the NFT
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * QueryNFTRequest is the request type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTRequest
 */
export type QueryNFTRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * id is a unique identifier of the NFT
   *
   * @generated from field: string id = 2;
   */
  id?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryNFTRequest.
 * Use `create(QueryNFTRequestSchema)` to create a new message.
 */
export const QueryNFTRequestSchema: GenMessage<QueryNFTRequest, QueryNFTRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 8);

/**
 * QueryNFTResponse is the response type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTResponse
 */
export type QueryNFTResponse = Message<"cosmos.nft.v1beta1.QueryNFTResponse"> & {
  /**
   * owner is the owner address of the nft
   *
   * @generated from field: cosmos.nft.v1beta1.NFT nft = 1;
   */
  nft?: NFT;
};

/**
 * QueryNFTResponse is the response type for the Query/NFT RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryNFTResponse
 */
export type QueryNFTResponseJson = {
  /**
   * owner is the owner address of the nft
   *
   * @generated from field: cosmos.nft.v1beta1.NFT nft = 1;
   */
  nft?: NFTJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryNFTResponse.
 * Use `create(QueryNFTResponseSchema)` to create a new message.
 */
export const QueryNFTResponseSchema: GenMessage<QueryNFTResponse, QueryNFTResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 9);

/**
 * QueryClassRequest is the request type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassRequest
 */
export type QueryClassRequest = Message<"cosmos.nft.v1beta1.QueryClassRequest"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;
};

/**
 * QueryClassRequest is the request type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassRequest
 */
export type QueryClassRequestJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryClassRequest.
 * Use `create(QueryClassRequestSchema)` to create a new message.
 */
export const QueryClassRequestSchema: GenMessage<QueryClassRequest, QueryClassRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 10);

/**
 * QueryClassResponse is the response type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassResponse
 */
export type QueryClassResponse = Message<"cosmos.nft.v1beta1.QueryClassResponse"> & {
  /**
   * class defines the class of the nft type.
   *
   * @generated from field: cosmos.nft.v1beta1.Class class = 1;
   */
  class?: Class;
};

/**
 * QueryClassResponse is the response type for the Query/Class RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassResponse
 */
export type QueryClassResponseJson = {
  /**
   * class defines the class of the nft type.
   *
   * @generated from field: cosmos.nft.v1beta1.Class class = 1;
   */
  class?: ClassJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryClassResponse.
 * Use `create(QueryClassResponseSchema)` to create a new message.
 */
export const QueryClassResponseSchema: GenMessage<QueryClassResponse, QueryClassResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 11);

/**
 * QueryClassesRequest is the request type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesRequest
 */
export type QueryClassesRequest = Message<"cosmos.nft.v1beta1.QueryClassesRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;
};

/**
 * QueryClassesRequest is the request type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesRequest
 */
export type QueryClassesRequestJson = {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryClassesRequest.
 * Use `create(QueryClassesRequestSchema)` to create a new message.
 */
export const QueryClassesRequestSchema: GenMessage<QueryClassesRequest, QueryClassesRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 12);

/**
 * QueryClassesResponse is the response type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesResponse
 */
export type QueryClassesResponse = Message<"cosmos.nft.v1beta1.QueryClassesResponse"> & {
  /**
   * class defines the class of the nft type.
   *
   * @generated from field: repeated cosmos.nft.v1beta1.Class classes = 1;
   */
  classes: Class[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryClassesResponse is the response type for the Query/Classes RPC method
 *
 * @generated from message cosmos.nft.v1beta1.QueryClassesResponse
 */
export type QueryClassesResponseJson = {
  /**
   * class defines the class of the nft type.
   *
   * @generated from field: repeated cosmos.nft.v1beta1.Class classes = 1;
   */
  classes?: ClassJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.nft.v1beta1.QueryClassesResponse.
 * Use `create(QueryClassesResponseSchema)` to create a new message.
 */
export const QueryClassesResponseSchema: GenMessage<QueryClassesResponse, QueryClassesResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_query, 13);

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service cosmos.nft.v1beta1.Query
 */
export const Query: GenService<{
  /**
   * Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.Balance
   */
  balance: {
    methodKind: "unary";
    input: typeof QueryBalanceRequestSchema;
    output: typeof QueryBalanceResponseSchema;
  },
  /**
   * Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.Owner
   */
  owner: {
    methodKind: "unary";
    input: typeof QueryOwnerRequestSchema;
    output: typeof QueryOwnerResponseSchema;
  },
  /**
   * Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.Supply
   */
  supply: {
    methodKind: "unary";
    input: typeof QuerySupplyRequestSchema;
    output: typeof QuerySupplyResponseSchema;
  },
  /**
   * NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
   * ERC721Enumerable
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.NFTs
   */
  nFTs: {
    methodKind: "unary";
    input: typeof QueryNFTsRequestSchema;
    output: typeof QueryNFTsResponseSchema;
  },
  /**
   * NFT queries an NFT based on its class and id.
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.NFT
   */
  nFT: {
    methodKind: "unary";
    input: typeof QueryNFTRequestSchema;
    output: typeof QueryNFTResponseSchema;
  },
  /**
   * Class queries an NFT class based on its id
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.Class
   */
  class: {
    methodKind: "unary";
    input: typeof QueryClassRequestSchema;
    output: typeof QueryClassResponseSchema;
  },
  /**
   * Classes queries all NFT classes
   *
   * @generated from rpc cosmos.nft.v1beta1.Query.Classes
   */
  classes: {
    methodKind: "unary";
    input: typeof QueryClassesRequestSchema;
    output: typeof QueryClassesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_nft_v1beta1_query, 0);

