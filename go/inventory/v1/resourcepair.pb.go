// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inventory/v1/resourcepair.proto

package v1

import (
	fmt "fmt"
	v1beta3 "github.com/akash-network/akash-api/go/node/types/v1beta3"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	resource "k8s.io/apimachinery/pkg/api/resource"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResourcePair struct {
	Allocatable resource.Quantity   `protobuf:"bytes,1,opt,name=allocatable,proto3" json:"allocatable" yaml:"allocatable"`
	Allocated   resource.Quantity   `protobuf:"bytes,2,opt,name=allocated,proto3" json:"allocated" yaml:"allocated"`
	Attributes  []v1beta3.Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" yaml:"attributes,omitempty"`
}

func (m *ResourcePair) Reset()         { *m = ResourcePair{} }
func (m *ResourcePair) String() string { return proto.CompactTextString(m) }
func (*ResourcePair) ProtoMessage()    {}
func (*ResourcePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_995cee7bf7b692e7, []int{0}
}
func (m *ResourcePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcePair.Merge(m, src)
}
func (m *ResourcePair) XXX_Size() int {
	return m.Size()
}
func (m *ResourcePair) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcePair.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcePair proto.InternalMessageInfo

func (m *ResourcePair) GetAllocatable() resource.Quantity {
	if m != nil {
		return m.Allocatable
	}
	return resource.Quantity{}
}

func (m *ResourcePair) GetAllocated() resource.Quantity {
	if m != nil {
		return m.Allocated
	}
	return resource.Quantity{}
}

func (m *ResourcePair) GetAttributes() []v1beta3.Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourcePair)(nil), "akash.inventory.v1.ResourcePair")
}

func init() {
	proto.RegisterFile("akash/inventory/v1/resourcepair.proto", fileDescriptor_995cee7bf7b692e7)
}

var fileDescriptor_995cee7bf7b692e7 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x3d, 0xef, 0x93, 0x40,
	0x18, 0x07, 0x6b, 0x4c, 0xfe, 0xe0, 0x60, 0x48, 0x87, 0xa6, 0x46, 0xae, 0x21, 0x31, 0xe9, 0xa0,
	0x77, 0x29, 0x75, 0x68, 0xea, 0xd4, 0x7e, 0x82, 0xca, 0xe8, 0x76, 0xd0, 0x0b, 0xbd, 0xf0, 0x72,
	0xe4, 0x38, 0x30, 0x38, 0x39, 0x3b, 0x39, 0x3a, 0xf6, 0xe3, 0x74, 0xec, 0xe8, 0x74, 0x31, 0xb0,
	0x98, 0x8e, 0xfd, 0x04, 0x86, 0x97, 0x16, 0x9a, 0x38, 0xb9, 0xdd, 0xf3, 0x3c, 0xbf, 0xb7, 0xf0,
	0x43, 0x7b, 0x8b, 0x03, 0x9c, 0x1e, 0x10, 0x8d, 0x73, 0x12, 0x0b, 0xc6, 0x0b, 0x94, 0x2f, 0x10,
	0x27, 0x29, 0xcb, 0xb8, 0x47, 0x12, 0x4c, 0x39, 0x4c, 0x38, 0x13, 0xcc, 0x30, 0x1a, 0x18, 0xbc,
	0xc3, 0x60, 0xbe, 0x98, 0x5a, 0x2d, 0xd5, 0xc5, 0x29, 0x41, 0xf9, 0xc2, 0x25, 0x02, 0x2f, 0x11,
	0x16, 0x82, 0x53, 0x37, 0x13, 0xa4, 0xe5, 0x4d, 0xc7, 0x3e, 0xf3, 0x59, 0xf3, 0x44, 0xf5, 0xab,
	0xdb, 0x7e, 0x08, 0x56, 0x29, 0xa4, 0x0c, 0xe1, 0x84, 0x46, 0xd8, 0x3b, 0xd0, 0x98, 0xf0, 0x02,
	0x25, 0x81, 0x5f, 0x2f, 0xee, 0xee, 0xc8, 0x27, 0x31, 0xe1, 0x58, 0x90, 0x7d, 0xcb, 0xb2, 0x8e,
	0x23, 0xed, 0xa5, 0xd3, 0x1d, 0x77, 0x98, 0x72, 0xe3, 0xbb, 0xaa, 0xe9, 0x38, 0x0c, 0x99, 0x87,
	0x05, 0x76, 0x43, 0x32, 0x51, 0x67, 0xea, 0x5c, 0xb7, 0x21, 0x6c, 0xd5, 0xe1, 0x50, 0x1d, 0x26,
	0x81, 0x5f, 0x2f, 0xe0, 0x4d, 0x1d, 0x7e, 0xca, 0x70, 0x2c, 0xa8, 0x28, 0xb6, 0xab, 0x93, 0x04,
	0x4a, 0x29, 0x81, 0xbe, 0xe9, 0xa5, 0x2e, 0x12, 0x0c, 0x95, 0xaf, 0x12, 0x18, 0x05, 0x8e, 0xc2,
	0xb5, 0x35, 0x58, 0x5a, 0xce, 0x10, 0x62, 0x7c, 0x53, 0xb5, 0xa7, 0x6e, 0x26, 0xfb, 0xc9, 0xb3,
	0xff, 0x8a, 0x62, 0x77, 0x51, 0x9e, 0x36, 0x37, 0xa1, 0x8b, 0x04, 0xbd, 0xea, 0x55, 0x82, 0x57,
	0x0f, 0x31, 0xc8, 0xde, 0x72, 0xfa, 0xb3, 0xf1, 0x55, 0xd3, 0xee, 0xdf, 0x3f, 0x9d, 0x8c, 0x66,
	0xa3, 0xb9, 0x6e, 0xbf, 0x81, 0x6d, 0x73, 0x75, 0x4b, 0xb0, 0x6b, 0x09, 0x6e, 0x6e, 0xa8, 0xed,
	0xc7, 0xda, 0xf1, 0x22, 0xc1, 0xb8, 0x27, 0xbe, 0x63, 0x11, 0x15, 0x24, 0x4a, 0x44, 0x71, 0x95,
	0xe0, 0x75, 0xe7, 0xf7, 0x8f, 0xab, 0xe5, 0x0c, 0xdc, 0xd6, 0xcf, 0xff, 0x1c, 0x81, 0xb2, 0xdd,
	0x9d, 0x4a, 0x53, 0x3d, 0x97, 0xa6, 0xfa, 0xbb, 0x34, 0xd5, 0x1f, 0x95, 0xa9, 0xfc, 0xac, 0x4c,
	0xe5, 0x5c, 0x99, 0xca, 0xaf, 0xca, 0x54, 0x3e, 0xdb, 0x3e, 0x15, 0x87, 0xcc, 0x85, 0x1e, 0x8b,
	0x50, 0x93, 0xea, 0x7d, 0x4c, 0xc4, 0x17, 0xc6, 0x83, 0x6e, 0xaa, 0xdb, 0xf7, 0xd9, 0xc3, 0xbf,
	0xe8, 0xbe, 0x68, 0xba, 0x5f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x13, 0xd9, 0x6a, 0x62, 0xa8,
	0x02, 0x00, 0x00,
}

func (m *ResourcePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResourcepair(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Allocated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResourcepair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Allocatable.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResourcepair(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintResourcepair(dAtA []byte, offset int, v uint64) int {
	offset -= sovResourcepair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourcePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Allocatable.Size()
	n += 1 + l + sovResourcepair(uint64(l))
	l = m.Allocated.Size()
	n += 1 + l + sovResourcepair(uint64(l))
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovResourcepair(uint64(l))
		}
	}
	return n
}

func sovResourcepair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResourcepair(x uint64) (n int) {
	return sovResourcepair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourcePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourcepair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocatable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocatable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourcepair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourcepair
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResourcepair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1beta3.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourcepair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResourcepair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourcepair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourcepair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcepair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourcepair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResourcepair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResourcepair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResourcepair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResourcepair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourcepair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResourcepair = fmt.Errorf("proto: unexpected end of group")
)
