// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	client "github.com/cosmos/cosmos-sdk/client"
	mock "github.com/stretchr/testify/mock"

	v1beta2 "github.com/akash-network/akash-api/go/node/client/v1beta2"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// ClientContext provides a mock function with given fields:
func (_m *Client) ClientContext() client.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientContext")
	}

	var r0 client.Context
	if rf, ok := ret.Get(0).(func() client.Context); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.Context)
	}

	return r0
}

// Client_ClientContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientContext'
type Client_ClientContext_Call struct {
	*mock.Call
}

// ClientContext is a helper method to define mock.On call
func (_e *Client_Expecter) ClientContext() *Client_ClientContext_Call {
	return &Client_ClientContext_Call{Call: _e.mock.On("ClientContext")}
}

func (_c *Client_ClientContext_Call) Run(run func()) *Client_ClientContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ClientContext_Call) Return(_a0 client.Context) *Client_ClientContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_ClientContext_Call) RunAndReturn(run func() client.Context) *Client_ClientContext_Call {
	_c.Call.Return(run)
	return _c
}

// Node provides a mock function with given fields:
func (_m *Client) Node() v1beta2.NodeClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Node")
	}

	var r0 v1beta2.NodeClient
	if rf, ok := ret.Get(0).(func() v1beta2.NodeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.NodeClient)
		}
	}

	return r0
}

// Client_Node_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Node'
type Client_Node_Call struct {
	*mock.Call
}

// Node is a helper method to define mock.On call
func (_e *Client_Expecter) Node() *Client_Node_Call {
	return &Client_Node_Call{Call: _e.mock.On("Node")}
}

func (_c *Client_Node_Call) Run(run func()) *Client_Node_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Node_Call) Return(_a0 v1beta2.NodeClient) *Client_Node_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Node_Call) RunAndReturn(run func() v1beta2.NodeClient) *Client_Node_Call {
	_c.Call.Return(run)
	return _c
}

// PrintMessage provides a mock function with given fields: _a0
func (_m *Client) PrintMessage(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrintMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PrintMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrintMessage'
type Client_PrintMessage_Call struct {
	*mock.Call
}

// PrintMessage is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *Client_Expecter) PrintMessage(_a0 interface{}) *Client_PrintMessage_Call {
	return &Client_PrintMessage_Call{Call: _e.mock.On("PrintMessage", _a0)}
}

func (_c *Client_PrintMessage_Call) Run(run func(_a0 interface{})) *Client_PrintMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Client_PrintMessage_Call) Return(_a0 error) *Client_PrintMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PrintMessage_Call) RunAndReturn(run func(interface{}) error) *Client_PrintMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *Client) Query() v1beta2.QueryClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 v1beta2.QueryClient
	if rf, ok := ret.Get(0).(func() v1beta2.QueryClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.QueryClient)
		}
	}

	return r0
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *Client_Expecter) Query() *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *Client_Query_Call) Run(run func()) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Query_Call) Return(_a0 v1beta2.QueryClient) *Client_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func() v1beta2.QueryClient) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields:
func (_m *Client) Tx() v1beta2.TxClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tx")
	}

	var r0 v1beta2.TxClient
	if rf, ok := ret.Get(0).(func() v1beta2.TxClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.TxClient)
		}
	}

	return r0
}

// Client_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type Client_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
func (_e *Client_Expecter) Tx() *Client_Tx_Call {
	return &Client_Tx_Call{Call: _e.mock.On("Tx")}
}

func (_c *Client_Tx_Call) Run(run func()) *Client_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Tx_Call) Return(_a0 v1beta2.TxClient) *Client_Tx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Tx_Call) RunAndReturn(run func() v1beta2.TxClient) *Client_Tx_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
