syntax = "proto3";
package akash.market.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "pkg.akt.dev/go/node/market/v1";

// OrderState is an enum which refers to state of order
enum OrderState {
  option (gogoproto.goproto_enum_prefix) = false;

  // Prefix should start with 0 in enum. So declaring dummy state
  order_invalid = 0 [
    (gogoproto.enumvalue_customname) = "OrderStateInvalid"
  ];
  // OrderOpen denotes state for order open
  order_open = 1 [
    (gogoproto.enumvalue_customname) = "OrderOpen"
  ];
  // OrderMatched denotes state for order matched
  order_active = 2 [
    (gogoproto.enumvalue_customname) = "OrderActive"
  ];
  // OrderClosed denotes state for order lost
  order_closed = 3 [
    (gogoproto.enumvalue_customname) = "OrderClosed"
  ];
}

// OrderID stores owner and all other seq numbers
message OrderID {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;

  string owner = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.jsontag)   = "owner",
    (gogoproto.moretags)  = "yaml:\"owner\""
  ];
  uint64 dseq  = 2 [
    (gogoproto.customname) = "DSeq",
    (gogoproto.jsontag)    = "dseq",
    (gogoproto.moretags)   = "yaml:\"dseq\""
  ];
  uint32 gseq = 3 [
    (gogoproto.customname) = "GSeq",
    (gogoproto.jsontag)    = "gseq",
    (gogoproto.moretags)   = "yaml:\"gseq\""
  ];
  uint32 oseq = 4 [
    (gogoproto.customname) = "OSeq",
    (gogoproto.jsontag)    = "oseq",
    (gogoproto.moretags)   = "yaml:\"oseq\""
  ];
}
