// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/app/v1alpha1/config.proto (package cosmos.app.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, AnyJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/app/v1alpha1/config.proto.
 */
export const file_cosmos_app_v1alpha1_config: GenFile = /*@__PURE__*/
  fileDesc("CiBjb3Ntb3MvYXBwL3YxYWxwaGExL2NvbmZpZy5wcm90bxITY29zbW9zLmFwcC52MWFscGhhMSJ5CgZDb25maWcSMgoHbW9kdWxlcxgBIAMoCzIhLmNvc21vcy5hcHAudjFhbHBoYTEuTW9kdWxlQ29uZmlnEjsKD2dvbGFuZ19iaW5kaW5ncxgCIAMoCzIiLmNvc21vcy5hcHAudjFhbHBoYTEuR29sYW5nQmluZGluZyJ/CgxNb2R1bGVDb25maWcSDAoEbmFtZRgBIAEoCRIkCgZjb25maWcYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55EjsKD2dvbGFuZ19iaW5kaW5ncxgDIAMoCzIiLmNvc21vcy5hcHAudjFhbHBoYTEuR29sYW5nQmluZGluZyI/Cg1Hb2xhbmdCaW5kaW5nEhYKDmludGVyZmFjZV90eXBlGAEgASgJEhYKDmltcGxlbWVudGF0aW9uGAIgASgJYgZwcm90bzM", [file_google_protobuf_any]);

/**
 * Config represents the configuration for a Cosmos SDK ABCI app.
 * It is intended that all state machine logic including the version of
 * baseapp and tx handlers (and possibly even Tendermint) that an app needs
 * can be described in a config object. For compatibility, the framework should
 * allow a mixture of declarative and imperative app wiring, however, apps
 * that strive for the maximum ease of maintainability should be able to describe
 * their state machine with a config object alone.
 *
 * @generated from message cosmos.app.v1alpha1.Config
 */
export type Config = Message<"cosmos.app.v1alpha1.Config"> & {
  /**
   * modules are the module configurations for the app.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.ModuleConfig modules = 1;
   */
  modules: ModuleConfig[];

  /**
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is global (not module specific).
   *
   * @generated from field: repeated cosmos.app.v1alpha1.GolangBinding golang_bindings = 2;
   */
  golangBindings: GolangBinding[];
};

/**
 * Config represents the configuration for a Cosmos SDK ABCI app.
 * It is intended that all state machine logic including the version of
 * baseapp and tx handlers (and possibly even Tendermint) that an app needs
 * can be described in a config object. For compatibility, the framework should
 * allow a mixture of declarative and imperative app wiring, however, apps
 * that strive for the maximum ease of maintainability should be able to describe
 * their state machine with a config object alone.
 *
 * @generated from message cosmos.app.v1alpha1.Config
 */
export type ConfigJson = {
  /**
   * modules are the module configurations for the app.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.ModuleConfig modules = 1;
   */
  modules?: ModuleConfigJson[];

  /**
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is global (not module specific).
   *
   * @generated from field: repeated cosmos.app.v1alpha1.GolangBinding golang_bindings = 2;
   */
  golangBindings?: GolangBindingJson[];
};

/**
 * Describes the message cosmos.app.v1alpha1.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export const ConfigSchema: GenMessage<Config, ConfigJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_config, 0);

/**
 * ModuleConfig is a module configuration for an app.
 *
 * @generated from message cosmos.app.v1alpha1.ModuleConfig
 */
export type ModuleConfig = Message<"cosmos.app.v1alpha1.ModuleConfig"> & {
  /**
   * name is the unique name of the module within the app. It should be a name
   * that persists between different versions of a module so that modules
   * can be smoothly upgraded to new versions.
   *
   * For example, for the module cosmos.bank.module.v1.Module, we may chose
   * to simply name the module "bank" in the app. When we upgrade to
   * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
   * and the framework knows that the v2 module should receive all the same state
   * that the v1 module had. Note: modules should provide info on which versions
   * they can migrate from in the ModuleDescriptor.can_migration_from field.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * config is the config object for the module. Module config messages should
   * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
   *
   * @generated from field: google.protobuf.Any config = 2;
   */
  config?: Any;

  /**
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is module specific.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.GolangBinding golang_bindings = 3;
   */
  golangBindings: GolangBinding[];
};

/**
 * ModuleConfig is a module configuration for an app.
 *
 * @generated from message cosmos.app.v1alpha1.ModuleConfig
 */
export type ModuleConfigJson = {
  /**
   * name is the unique name of the module within the app. It should be a name
   * that persists between different versions of a module so that modules
   * can be smoothly upgraded to new versions.
   *
   * For example, for the module cosmos.bank.module.v1.Module, we may chose
   * to simply name the module "bank" in the app. When we upgrade to
   * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
   * and the framework knows that the v2 module should receive all the same state
   * that the v1 module had. Note: modules should provide info on which versions
   * they can migrate from in the ModuleDescriptor.can_migration_from field.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * config is the config object for the module. Module config messages should
   * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
   *
   * @generated from field: google.protobuf.Any config = 2;
   */
  config?: AnyJson;

  /**
   * golang_bindings specifies explicit interface to implementation type bindings which
   * depinject uses to resolve interface inputs to provider functions.  The scope of this
   * field's configuration is module specific.
   *
   * @generated from field: repeated cosmos.app.v1alpha1.GolangBinding golang_bindings = 3;
   */
  golangBindings?: GolangBindingJson[];
};

/**
 * Describes the message cosmos.app.v1alpha1.ModuleConfig.
 * Use `create(ModuleConfigSchema)` to create a new message.
 */
export const ModuleConfigSchema: GenMessage<ModuleConfig, ModuleConfigJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_config, 1);

/**
 * GolangBinding is an explicit interface type to implementing type binding for dependency injection.
 *
 * @generated from message cosmos.app.v1alpha1.GolangBinding
 */
export type GolangBinding = Message<"cosmos.app.v1alpha1.GolangBinding"> & {
  /**
   * interface_type is the interface type which will be bound to a specific implementation type
   *
   * @generated from field: string interface_type = 1;
   */
  interfaceType: string;

  /**
   * implementation is the implementing type which will be supplied when an input of type interface is requested
   *
   * @generated from field: string implementation = 2;
   */
  implementation: string;
};

/**
 * GolangBinding is an explicit interface type to implementing type binding for dependency injection.
 *
 * @generated from message cosmos.app.v1alpha1.GolangBinding
 */
export type GolangBindingJson = {
  /**
   * interface_type is the interface type which will be bound to a specific implementation type
   *
   * @generated from field: string interface_type = 1;
   */
  interfaceType?: string;

  /**
   * implementation is the implementing type which will be supplied when an input of type interface is requested
   *
   * @generated from field: string implementation = 2;
   */
  implementation?: string;
};

/**
 * Describes the message cosmos.app.v1alpha1.GolangBinding.
 * Use `create(GolangBindingSchema)` to create a new message.
 */
export const GolangBindingSchema: GenMessage<GolangBinding, GolangBindingJson> = /*@__PURE__*/
  messageDesc(file_cosmos_app_v1alpha1_config, 2);

