// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/audit/v1/audit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { messageTypeRegistry } from "../../../typeRegistry";
import { Attribute } from "../../base/attributes/v1/attribute";

/** Provider stores owner auditor and attributes details */
export interface AuditedProvider {
  $type: "akash.audit.v1.AuditedProvider";
  owner: string;
  auditor: string;
  attributes: Attribute[];
}

/** Attributes */
export interface AuditedAttributesStore {
  $type: "akash.audit.v1.AuditedAttributesStore";
  attributes: Attribute[];
}

/** AttributesFilters defines filters used to filter deployments */
export interface AttributesFilters {
  $type: "akash.audit.v1.AttributesFilters";
  auditors: string[];
  owners: string[];
}

function createBaseAuditedProvider(): AuditedProvider {
  return {
    $type: "akash.audit.v1.AuditedProvider",
    owner: "",
    auditor: "",
    attributes: [],
  };
}

export const AuditedProvider: MessageFns<
  AuditedProvider,
  "akash.audit.v1.AuditedProvider"
> = {
  $type: "akash.audit.v1.AuditedProvider" as const,

  encode(
    message: AuditedProvider,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.auditor !== "") {
      writer.uint32(18).string(message.auditor);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditedProvider {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditedProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.auditor = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditedProvider {
    return {
      $type: AuditedProvider.$type,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AuditedProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AuditedProvider>): AuditedProvider {
    return AuditedProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuditedProvider>): AuditedProvider {
    const message = createBaseAuditedProvider();
    message.owner = object.owner ?? "";
    message.auditor = object.auditor ?? "";
    message.attributes =
      object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(AuditedProvider.$type, AuditedProvider);

function createBaseAuditedAttributesStore(): AuditedAttributesStore {
  return { $type: "akash.audit.v1.AuditedAttributesStore", attributes: [] };
}

export const AuditedAttributesStore: MessageFns<
  AuditedAttributesStore,
  "akash.audit.v1.AuditedAttributesStore"
> = {
  $type: "akash.audit.v1.AuditedAttributesStore" as const,

  encode(
    message: AuditedAttributesStore,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AuditedAttributesStore {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditedAttributesStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditedAttributesStore {
    return {
      $type: AuditedAttributesStore.$type,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AuditedAttributesStore): unknown {
    const obj: any = {};
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AuditedAttributesStore>): AuditedAttributesStore {
    return AuditedAttributesStore.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AuditedAttributesStore>,
  ): AuditedAttributesStore {
    const message = createBaseAuditedAttributesStore();
    message.attributes =
      object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(AuditedAttributesStore.$type, AuditedAttributesStore);

function createBaseAttributesFilters(): AttributesFilters {
  return {
    $type: "akash.audit.v1.AttributesFilters",
    auditors: [],
    owners: [],
  };
}

export const AttributesFilters: MessageFns<
  AttributesFilters,
  "akash.audit.v1.AttributesFilters"
> = {
  $type: "akash.audit.v1.AttributesFilters" as const,

  encode(
    message: AttributesFilters,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.auditors) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.owners) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AttributesFilters {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttributesFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.auditors.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.owners.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AttributesFilters {
    return {
      $type: AttributesFilters.$type,
      auditors: globalThis.Array.isArray(object?.auditors)
        ? object.auditors.map((e: any) => globalThis.String(e))
        : [],
      owners: globalThis.Array.isArray(object?.owners)
        ? object.owners.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AttributesFilters): unknown {
    const obj: any = {};
    if (message.auditors?.length) {
      obj.auditors = message.auditors;
    }
    if (message.owners?.length) {
      obj.owners = message.owners;
    }
    return obj;
  },

  create(base?: DeepPartial<AttributesFilters>): AttributesFilters {
    return AttributesFilters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AttributesFilters>): AttributesFilters {
    const message = createBaseAttributesFilters();
    message.auditors = object.auditors?.map((e) => e) || [];
    message.owners = object.owners?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(AttributesFilters.$type, AttributesFilters);

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Long
    ? string | number | Long
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends {}
          ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
          : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
