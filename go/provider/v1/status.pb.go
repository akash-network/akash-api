// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/provider/v1/status.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	resource "k8s.io/apimachinery/pkg/api/resource"
	math "math"
	math_bits "math/bits"
	v1 "pkg.akt.dev/go/inventory/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ResourceMetrics
type ResourcesMetric struct {
	CPU              *resource.Quantity `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu" yaml:"cpu"`
	Memory           *resource.Quantity `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory" yaml:"memory"`
	GPU              *resource.Quantity `protobuf:"bytes,3,opt,name=gpu,proto3,castrepeated=GPUs" json:"gpu" yaml:"gpu"`
	EphemeralStorage *resource.Quantity `protobuf:"bytes,4,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage" yaml:"ephemeral_storage"`
	Storage          Storage            `protobuf:"bytes,5,rep,name=storage,proto3,casttype=Storage" json:"storage" yaml:"storage" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ResourcesMetric) Reset()         { *m = ResourcesMetric{} }
func (m *ResourcesMetric) String() string { return proto.CompactTextString(m) }
func (*ResourcesMetric) ProtoMessage()    {}
func (*ResourcesMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{0}
}
func (m *ResourcesMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourcesMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourcesMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourcesMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourcesMetric.Merge(m, src)
}
func (m *ResourcesMetric) XXX_Size() int {
	return m.Size()
}
func (m *ResourcesMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourcesMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ResourcesMetric proto.InternalMessageInfo

func (m *ResourcesMetric) GetCPU() *resource.Quantity {
	if m != nil {
		return m.CPU
	}
	return nil
}

func (m *ResourcesMetric) GetMemory() *resource.Quantity {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ResourcesMetric) GetGPU() *resource.Quantity {
	if m != nil {
		return m.GPU
	}
	return nil
}

func (m *ResourcesMetric) GetEphemeralStorage() *resource.Quantity {
	if m != nil {
		return m.EphemeralStorage
	}
	return nil
}

func (m *ResourcesMetric) GetStorage() Storage {
	if m != nil {
		return m.Storage
	}
	return nil
}

// Leases
type Leases struct {
	Active uint32 `protobuf:"varint,1,opt,name=active,proto3" json:"active" yaml:"active"`
}

func (m *Leases) Reset()         { *m = Leases{} }
func (m *Leases) String() string { return proto.CompactTextString(m) }
func (*Leases) ProtoMessage()    {}
func (*Leases) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{1}
}
func (m *Leases) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Leases) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Leases.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Leases) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Leases.Merge(m, src)
}
func (m *Leases) XXX_Size() int {
	return m.Size()
}
func (m *Leases) XXX_DiscardUnknown() {
	xxx_messageInfo_Leases.DiscardUnknown(m)
}

var xxx_messageInfo_Leases proto.InternalMessageInfo

func (m *Leases) GetActive() uint32 {
	if m != nil {
		return m.Active
	}
	return 0
}

// ReservationsMetric
type ReservationsMetric struct {
	Count     uint32          `protobuf:"varint,1,opt,name=count,proto3" json:"count" yaml:"count"`
	Resources ResourcesMetric `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources" yaml:"resources"`
}

func (m *ReservationsMetric) Reset()         { *m = ReservationsMetric{} }
func (m *ReservationsMetric) String() string { return proto.CompactTextString(m) }
func (*ReservationsMetric) ProtoMessage()    {}
func (*ReservationsMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{2}
}
func (m *ReservationsMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReservationsMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReservationsMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReservationsMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservationsMetric.Merge(m, src)
}
func (m *ReservationsMetric) XXX_Size() int {
	return m.Size()
}
func (m *ReservationsMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservationsMetric.DiscardUnknown(m)
}

var xxx_messageInfo_ReservationsMetric proto.InternalMessageInfo

func (m *ReservationsMetric) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReservationsMetric) GetResources() ResourcesMetric {
	if m != nil {
		return m.Resources
	}
	return ResourcesMetric{}
}

// Reservations
type Reservations struct {
	Pending ReservationsMetric `protobuf:"bytes,1,opt,name=pending,proto3" json:"pending" yaml:"pending"`
	Active  ReservationsMetric `protobuf:"bytes,2,opt,name=active,proto3" json:"active" yaml:"active"`
}

func (m *Reservations) Reset()         { *m = Reservations{} }
func (m *Reservations) String() string { return proto.CompactTextString(m) }
func (*Reservations) ProtoMessage()    {}
func (*Reservations) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{3}
}
func (m *Reservations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reservations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reservations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reservations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reservations.Merge(m, src)
}
func (m *Reservations) XXX_Size() int {
	return m.Size()
}
func (m *Reservations) XXX_DiscardUnknown() {
	xxx_messageInfo_Reservations.DiscardUnknown(m)
}

var xxx_messageInfo_Reservations proto.InternalMessageInfo

func (m *Reservations) GetPending() ReservationsMetric {
	if m != nil {
		return m.Pending
	}
	return ReservationsMetric{}
}

func (m *Reservations) GetActive() ReservationsMetric {
	if m != nil {
		return m.Active
	}
	return ReservationsMetric{}
}

// Inventory
type Inventory struct {
	Cluster      v1.Cluster   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster" yaml:"cluster"`
	Reservations Reservations `protobuf:"bytes,2,opt,name=reservations,proto3" json:"reservations" yaml:"reservations"`
}

func (m *Inventory) Reset()         { *m = Inventory{} }
func (m *Inventory) String() string { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()    {}
func (*Inventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{4}
}
func (m *Inventory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inventory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inventory.Merge(m, src)
}
func (m *Inventory) XXX_Size() int {
	return m.Size()
}
func (m *Inventory) XXX_DiscardUnknown() {
	xxx_messageInfo_Inventory.DiscardUnknown(m)
}

var xxx_messageInfo_Inventory proto.InternalMessageInfo

func (m *Inventory) GetCluster() v1.Cluster {
	if m != nil {
		return m.Cluster
	}
	return v1.Cluster{}
}

func (m *Inventory) GetReservations() Reservations {
	if m != nil {
		return m.Reservations
	}
	return Reservations{}
}

// ClusterStatus
type ClusterStatus struct {
	Leases    Leases    `protobuf:"bytes,1,opt,name=leases,proto3" json:"leases" yaml:"leases"`
	Inventory Inventory `protobuf:"bytes,2,opt,name=inventory,proto3" json:"inventory" yaml:"inventory"`
}

func (m *ClusterStatus) Reset()         { *m = ClusterStatus{} }
func (m *ClusterStatus) String() string { return proto.CompactTextString(m) }
func (*ClusterStatus) ProtoMessage()    {}
func (*ClusterStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{5}
}
func (m *ClusterStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterStatus.Merge(m, src)
}
func (m *ClusterStatus) XXX_Size() int {
	return m.Size()
}
func (m *ClusterStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterStatus proto.InternalMessageInfo

func (m *ClusterStatus) GetLeases() Leases {
	if m != nil {
		return m.Leases
	}
	return Leases{}
}

func (m *ClusterStatus) GetInventory() Inventory {
	if m != nil {
		return m.Inventory
	}
	return Inventory{}
}

// BidEngineStatus
type BidEngineStatus struct {
	Orders uint32 `protobuf:"varint,1,opt,name=orders,proto3" json:"orders" yaml:"orders"`
}

func (m *BidEngineStatus) Reset()         { *m = BidEngineStatus{} }
func (m *BidEngineStatus) String() string { return proto.CompactTextString(m) }
func (*BidEngineStatus) ProtoMessage()    {}
func (*BidEngineStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{6}
}
func (m *BidEngineStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidEngineStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidEngineStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidEngineStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidEngineStatus.Merge(m, src)
}
func (m *BidEngineStatus) XXX_Size() int {
	return m.Size()
}
func (m *BidEngineStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BidEngineStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BidEngineStatus proto.InternalMessageInfo

func (m *BidEngineStatus) GetOrders() uint32 {
	if m != nil {
		return m.Orders
	}
	return 0
}

// ManifestStatus
type ManifestStatus struct {
	Deployments uint32 `protobuf:"varint,1,opt,name=deployments,proto3" json:"deployments" yaml:"deployments"`
}

func (m *ManifestStatus) Reset()         { *m = ManifestStatus{} }
func (m *ManifestStatus) String() string { return proto.CompactTextString(m) }
func (*ManifestStatus) ProtoMessage()    {}
func (*ManifestStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{7}
}
func (m *ManifestStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestStatus.Merge(m, src)
}
func (m *ManifestStatus) XXX_Size() int {
	return m.Size()
}
func (m *ManifestStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestStatus proto.InternalMessageInfo

func (m *ManifestStatus) GetDeployments() uint32 {
	if m != nil {
		return m.Deployments
	}
	return 0
}

// Status
type Status struct {
	Errors          []string         `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty" yaml:"errors,omitempty"`
	Cluster         *ClusterStatus   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty" yaml:"cluster,omitempty"`
	BidEngine       *BidEngineStatus `protobuf:"bytes,3,opt,name=bid_engine,json=bidEngine,proto3" json:"bid_engine,omitempty" yaml:"bid_engine,omitempty"`
	Manifest        *ManifestStatus  `protobuf:"bytes,4,opt,name=manifest,proto3" json:"manifest,omitempty" yaml:"manifest,omitempty"`
	PublicHostnames []string         `protobuf:"bytes,5,rep,name=public_hostnames,json=publicHostnames,proto3" json:"public_hostnames" yaml:"public_hostnames"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ba712d181b7fc9b, []int{8}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *Status) GetCluster() *ClusterStatus {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *Status) GetBidEngine() *BidEngineStatus {
	if m != nil {
		return m.BidEngine
	}
	return nil
}

func (m *Status) GetManifest() *ManifestStatus {
	if m != nil {
		return m.Manifest
	}
	return nil
}

func (m *Status) GetPublicHostnames() []string {
	if m != nil {
		return m.PublicHostnames
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourcesMetric)(nil), "akash.provider.v1.ResourcesMetric")
	proto.RegisterMapType((Storage)(nil), "akash.provider.v1.ResourcesMetric.StorageEntry")
	proto.RegisterType((*Leases)(nil), "akash.provider.v1.Leases")
	proto.RegisterType((*ReservationsMetric)(nil), "akash.provider.v1.ReservationsMetric")
	proto.RegisterType((*Reservations)(nil), "akash.provider.v1.Reservations")
	proto.RegisterType((*Inventory)(nil), "akash.provider.v1.Inventory")
	proto.RegisterType((*ClusterStatus)(nil), "akash.provider.v1.ClusterStatus")
	proto.RegisterType((*BidEngineStatus)(nil), "akash.provider.v1.BidEngineStatus")
	proto.RegisterType((*ManifestStatus)(nil), "akash.provider.v1.ManifestStatus")
	proto.RegisterType((*Status)(nil), "akash.provider.v1.Status")
}

func init() { proto.RegisterFile("akash/provider/v1/status.proto", fileDescriptor_1ba712d181b7fc9b) }

var fileDescriptor_1ba712d181b7fc9b = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6b, 0x1b, 0x47,
	0x14, 0xf6, 0x5a, 0xb6, 0x14, 0x8d, 0xed, 0x58, 0x9e, 0x06, 0x2a, 0x3b, 0x45, 0xe3, 0x0e, 0x04,
	0x1c, 0x08, 0x2b, 0x62, 0xe7, 0xe0, 0xa6, 0x04, 0xda, 0x75, 0x8c, 0x13, 0xa8, 0xa9, 0x33, 0x21,
	0x3d, 0x94, 0x82, 0x59, 0x4b, 0xd3, 0xd5, 0x46, 0xda, 0x1f, 0xdd, 0x9d, 0x15, 0x08, 0x4a, 0x29,
	0xbd, 0xf6, 0xd2, 0xbf, 0xa2, 0x87, 0xfe, 0x1d, 0x3d, 0xf8, 0x98, 0x63, 0xa1, 0x74, 0x5a, 0xe4,
	0x43, 0xa9, 0x8e, 0xea, 0xad, 0xa7, 0x32, 0x3b, 0x6f, 0x7f, 0x48, 0x16, 0x84, 0xf8, 0xb6, 0xf3,
	0xbe, 0x99, 0xef, 0xfb, 0xde, 0xbc, 0x37, 0x33, 0x8b, 0x5a, 0x76, 0xdf, 0x8e, 0x7b, 0xed, 0x30,
	0x0a, 0x86, 0x6e, 0x97, 0x47, 0xed, 0xe1, 0xc3, 0x76, 0x2c, 0x6c, 0x91, 0xc4, 0x66, 0x18, 0x05,
	0x22, 0xc0, 0x5b, 0x29, 0x6e, 0x66, 0xb8, 0x39, 0x7c, 0xb8, 0x73, 0xc7, 0x09, 0x9c, 0x20, 0x45,
	0xdb, 0xea, 0x4b, 0x4f, 0xdc, 0xd9, 0xd5, 0x44, 0xae, 0x3f, 0xe4, 0xbe, 0x08, 0xa2, 0x91, 0x62,
	0xea, 0x0c, 0x92, 0x58, 0xf0, 0x08, 0x66, 0x3c, 0xea, 0x1f, 0xc6, 0x6d, 0x37, 0x68, 0xdb, 0xa1,
	0xeb, 0xd9, 0x9d, 0x9e, 0xeb, 0xf3, 0x68, 0xd4, 0x0e, 0xfb, 0x8e, 0x0a, 0xb4, 0x23, 0x1e, 0x07,
	0x49, 0xd4, 0xe1, 0x6d, 0x87, 0xfb, 0x3c, 0xb2, 0x05, 0xef, 0xea, 0x55, 0xf4, 0x9f, 0x55, 0xb4,
	0xc9, 0x00, 0x8c, 0x4f, 0xb9, 0x88, 0xdc, 0x0e, 0xbe, 0x40, 0x95, 0x4e, 0x98, 0x34, 0x8d, 0x5d,
	0x63, 0x6f, 0x6d, 0xdf, 0x34, 0xfb, 0x87, 0xb1, 0xe9, 0x06, 0x66, 0x99, 0xd7, 0x0c, 0xfb, 0x8e,
	0x0a, 0x98, 0x19, 0xaf, 0xf9, 0x22, 0xb1, 0x7d, 0xe1, 0x8a, 0x91, 0xb5, 0x7b, 0x29, 0x89, 0x31,
	0x96, 0xa4, 0x72, 0x74, 0xf6, 0x6a, 0x22, 0x89, 0x62, 0x9a, 0x4a, 0x82, 0x46, 0xb6, 0x37, 0x78,
	0x4c, 0x3b, 0x61, 0x42, 0x99, 0x0a, 0xe1, 0x6f, 0x50, 0xd5, 0xe3, 0x5e, 0x10, 0x8d, 0x9a, 0xcb,
	0x37, 0x92, 0xb9, 0x0f, 0x32, 0xd5, 0xd3, 0x94, 0x65, 0x22, 0x09, 0xf0, 0x4d, 0x25, 0xd9, 0xd0,
	0x62, 0x7a, 0x4c, 0x19, 0x00, 0xf8, 0x35, 0xaa, 0x38, 0x61, 0xd2, 0xac, 0xdc, 0x48, 0x6f, 0x2f,
	0x4b, 0xeb, 0x44, 0xa7, 0xe5, 0x94, 0xd3, 0x72, 0xc2, 0x84, 0xfe, 0xf2, 0x27, 0x59, 0x39, 0x39,
	0x7b, 0x15, 0x33, 0x05, 0xe1, 0x9f, 0x0d, 0xb4, 0xc5, 0xc3, 0x1e, 0xf7, 0x78, 0x64, 0x0f, 0xce,
	0x63, 0x11, 0x44, 0xb6, 0xc3, 0x9b, 0x2b, 0x37, 0x92, 0x7e, 0x0e, 0xd2, 0x8d, 0xe3, 0x8c, 0xf0,
	0xa5, 0xe6, 0x9b, 0x48, 0x72, 0x5d, 0x64, 0x2a, 0x49, 0x53, 0xbb, 0xba, 0x06, 0x51, 0xd6, 0xe0,
	0x73, 0x14, 0xf8, 0x3b, 0x54, 0xcb, 0xdc, 0xad, 0xee, 0x56, 0xf6, 0xd6, 0xf6, 0xdb, 0xe6, 0xb5,
	0x96, 0x34, 0xe7, 0x1a, 0xc4, 0x84, 0xc5, 0xc7, 0xbe, 0x88, 0x46, 0xd6, 0xc1, 0x58, 0x92, 0x5a,
	0xe1, 0xa8, 0x56, 0xf8, 0xb8, 0xad, 0x7d, 0x64, 0xea, 0xff, 0x15, 0xf3, 0x58, 0x36, 0x6b, 0xe7,
	0x35, 0x5a, 0x2f, 0xb3, 0xe1, 0x06, 0xaa, 0xf4, 0xf9, 0x28, 0xed, 0xbd, 0x3a, 0x53, 0x9f, 0xf8,
	0x29, 0x5a, 0x1d, 0xda, 0x83, 0x84, 0xdf, 0xac, 0x51, 0x98, 0x5e, 0xfc, 0x78, 0xf9, 0xd0, 0xa0,
	0x27, 0xa8, 0xfa, 0x19, 0xb7, 0x63, 0x1e, 0xe3, 0x27, 0xa8, 0x6a, 0x77, 0x84, 0x3b, 0xe4, 0xa9,
	0xd0, 0x86, 0x75, 0x4f, 0x75, 0xd2, 0xa7, 0x69, 0x44, 0x75, 0x92, 0xc6, 0x8a, 0x4e, 0xd2, 0x63,
	0xca, 0x00, 0xa0, 0xbf, 0x1a, 0x08, 0x33, 0x1e, 0xf3, 0x68, 0x68, 0x0b, 0x37, 0xf0, 0xb3, 0x73,
	0x73, 0x88, 0x56, 0x3b, 0x41, 0xe2, 0x0b, 0x20, 0xa5, 0x63, 0x49, 0x56, 0x8f, 0x54, 0x60, 0x22,
	0x89, 0x46, 0xa6, 0x92, 0xac, 0xc3, 0x49, 0x50, 0x43, 0xca, 0x74, 0x18, 0x0b, 0x54, 0xcf, 0x9c,
	0xc7, 0x90, 0x27, 0x7d, 0x7b, 0x1d, 0xac, 0xfd, 0x4b, 0x49, 0x96, 0xc6, 0x92, 0xd4, 0x73, 0x60,
	0x22, 0x49, 0xc1, 0x34, 0x95, 0xa4, 0xa1, 0xd5, 0xf2, 0x10, 0x65, 0x05, 0x4c, 0xff, 0x36, 0xd0,
	0x7a, 0x39, 0x0d, 0xec, 0xa1, 0x5a, 0xc8, 0xfd, 0xae, 0xeb, 0x3b, 0x70, 0xf8, 0xef, 0x2d, 0x36,
	0x31, 0x97, 0xb8, 0xf5, 0x00, 0x7c, 0xd4, 0xce, 0xf4, 0x6a, 0xd5, 0x06, 0x40, 0x54, 0xb4, 0x01,
	0x04, 0x28, 0xcb, 0x20, 0xdc, 0xcb, 0xab, 0xb0, 0xfc, 0x2e, 0x6a, 0xf7, 0x41, 0xed, 0x1d, 0x0a,
	0xf6, 0xaf, 0x81, 0xea, 0xcf, 0xb3, 0xab, 0x13, 0x77, 0x50, 0x0d, 0xae, 0x4e, 0x48, 0xf3, 0x2e,
	0x08, 0xe7, 0xb7, 0xab, 0x52, 0x3e, 0xd2, 0x53, 0x8a, 0xe4, 0x20, 0xa0, 0x92, 0x83, 0xe5, 0x45,
	0x72, 0x10, 0xa0, 0x2c, 0x83, 0xf0, 0xf7, 0x06, 0x5a, 0x8f, 0x4a, 0xe6, 0x21, 0x47, 0xf2, 0x96,
	0x1c, 0xad, 0x8f, 0x41, 0x6e, 0xa6, 0x32, 0x13, 0x49, 0x66, 0xc8, 0xa6, 0x92, 0xbc, 0x97, 0x57,
	0x36, 0x8f, 0x52, 0x36, 0x33, 0x89, 0xfe, 0x61, 0xa0, 0x0d, 0x30, 0xfd, 0x32, 0x7d, 0x74, 0xf0,
	0x57, 0xa8, 0x3a, 0x48, 0x4f, 0x00, 0x24, 0xbe, 0xbd, 0xc0, 0x8d, 0x3e, 0x22, 0xc5, 0x2e, 0xeb,
	0xb1, 0xda, 0x65, 0xbd, 0xb4, 0xd8, 0x65, 0x3d, 0xa6, 0x0c, 0x00, 0xec, 0xa3, 0x7a, 0xbe, 0x83,
	0x90, 0xee, 0x07, 0x0b, 0x04, 0xf2, 0x42, 0x14, 0xfd, 0x9b, 0x87, 0x54, 0xff, 0xe6, 0x1c, 0x45,
	0xff, 0xe6, 0x21, 0xca, 0x0a, 0x98, 0x9e, 0xa1, 0x4d, 0xcb, 0xed, 0x1e, 0xfb, 0x8e, 0xeb, 0x73,
	0x48, 0xf0, 0x09, 0xaa, 0x06, 0x51, 0x97, 0x47, 0x71, 0xf9, 0x60, 0x7f, 0x9e, 0x46, 0x54, 0x06,
	0x1a, 0x2b, 0x32, 0xd0, 0x63, 0xca, 0x00, 0xa0, 0x3d, 0x74, 0xfb, 0xd4, 0xf6, 0xdd, 0xaf, 0x79,
	0x2c, 0x80, 0xf0, 0x0b, 0xb4, 0xd6, 0xe5, 0xe1, 0x20, 0x18, 0x79, 0xdc, 0x17, 0x19, 0xeb, 0xa3,
	0xb1, 0x24, 0x6b, 0x4f, 0x8b, 0xf0, 0x44, 0x92, 0xf2, 0xac, 0xa9, 0x24, 0x58, 0xf3, 0x97, 0x82,
	0x94, 0x95, 0xa7, 0xd0, 0xdf, 0x57, 0x50, 0x15, 0x24, 0x5e, 0xa0, 0x2a, 0x8f, 0xa2, 0x20, 0xf5,
	0x5c, 0xd9, 0xab, 0x5b, 0x1f, 0x29, 0xcf, 0xc7, 0x69, 0x64, 0x22, 0x49, 0x43, 0x63, 0x0f, 0x02,
	0xcf, 0x15, 0xdc, 0x0b, 0x85, 0xda, 0x95, 0xf7, 0xe1, 0x82, 0x9f, 0x43, 0x28, 0x03, 0x22, 0xfc,
	0x6d, 0xd1, 0xe1, 0xba, 0x0e, 0xbb, 0x0b, 0xea, 0x30, 0xd3, 0x1a, 0xd6, 0x27, 0xf0, 0xca, 0x94,
	0xda, 0x7c, 0x0b, 0x38, 0x66, 0xb4, 0x9b, 0x33, 0x0d, 0x5f, 0x16, 0xcf, 0x5b, 0xff, 0x47, 0x03,
	0xa1, 0x0b, 0xb7, 0x7b, 0xce, 0xd3, 0xca, 0xc0, 0x83, 0xbb, 0xe8, 0x3e, 0x9b, 0xab, 0x9e, 0xf5,
	0x0c, 0x3c, 0xd4, 0x73, 0x60, 0x22, 0xc9, 0x9d, 0x82, 0x6a, 0xc6, 0xc8, 0x5d, 0x6d, 0x64, 0x11,
	0x4a, 0x59, 0xfd, 0x22, 0x63, 0xc0, 0x3f, 0x18, 0xe8, 0x96, 0x07, 0x45, 0x85, 0x17, 0xf8, 0xc3,
	0x05, 0x5e, 0x66, 0xeb, 0x6e, 0x1d, 0x81, 0x95, 0x5b, 0x59, 0x7c, 0x22, 0x09, 0xce, 0x68, 0x66,
	0x7c, 0x6c, 0xc3, 0xdf, 0xc6, 0x35, 0x8c, 0xb2, 0x5c, 0x17, 0x7b, 0xa8, 0x11, 0x26, 0x17, 0x03,
	0xb7, 0x73, 0xde, 0x0b, 0x62, 0xe1, 0xdb, 0x1e, 0x8f, 0xd3, 0xf7, 0xb6, 0x6e, 0x59, 0x63, 0x49,
	0x36, 0xcf, 0x52, 0xec, 0x59, 0x06, 0xa9, 0xb2, 0xcf, 0x4f, 0x2f, 0xca, 0x3e, 0x8f, 0x50, 0xb6,
	0x19, 0xce, 0xae, 0xb7, 0x0e, 0x2e, 0xc7, 0x2d, 0xe3, 0xcd, 0xb8, 0x65, 0xfc, 0x35, 0x6e, 0x19,
	0x3f, 0x5d, 0xb5, 0x96, 0xde, 0x5c, 0xb5, 0x96, 0x7e, 0xbb, 0x6a, 0x2d, 0x7d, 0xb9, 0x9d, 0xbe,
	0x94, 0x7d, 0x61, 0xba, 0xea, 0xf7, 0xb2, 0xfc, 0x63, 0x7a, 0x51, 0x4d, 0xff, 0x08, 0x0f, 0xfe,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0x29, 0x5d, 0x6c, 0xba, 0xb4, 0x0a, 0x00, 0x00,
}

func (m *ResourcesMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourcesMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Storage) > 0 {
		for k := range m.Storage {
			v := m.Storage[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStatus(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EphemeralStorage != nil {
		{
			size, err := m.EphemeralStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GPU != nil {
		{
			size, err := m.GPU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Memory != nil {
		{
			size, err := m.Memory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CPU != nil {
		{
			size, err := m.CPU.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Leases) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Leases) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Leases) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReservationsMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservationsMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReservationsMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Count != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reservations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reservations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reservations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Active.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Pending.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Inventory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inventory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inventory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reservations.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClusterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Inventory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Leases.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStatus(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BidEngineStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidEngineStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidEngineStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orders != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Orders))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManifestStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deployments != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Deployments))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicHostnames) > 0 {
		for iNdEx := len(m.PublicHostnames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PublicHostnames[iNdEx])
			copy(dAtA[i:], m.PublicHostnames[iNdEx])
			i = encodeVarintStatus(dAtA, i, uint64(len(m.PublicHostnames[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Manifest != nil {
		{
			size, err := m.Manifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BidEngine != nil {
		{
			size, err := m.BidEngine.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Errors[iNdEx])
			copy(dAtA[i:], m.Errors[iNdEx])
			i = encodeVarintStatus(dAtA, i, uint64(len(m.Errors[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourcesMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CPU != nil {
		l = m.CPU.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Memory != nil {
		l = m.Memory.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.GPU != nil {
		l = m.GPU.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.EphemeralStorage != nil {
		l = m.EphemeralStorage.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if len(m.Storage) > 0 {
		for k, v := range m.Storage {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStatus(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovStatus(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStatus(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Leases) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active != 0 {
		n += 1 + sovStatus(uint64(m.Active))
	}
	return n
}

func (m *ReservationsMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovStatus(uint64(m.Count))
	}
	l = m.Resources.Size()
	n += 1 + l + sovStatus(uint64(l))
	return n
}

func (m *Reservations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pending.Size()
	n += 1 + l + sovStatus(uint64(l))
	l = m.Active.Size()
	n += 1 + l + sovStatus(uint64(l))
	return n
}

func (m *Inventory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cluster.Size()
	n += 1 + l + sovStatus(uint64(l))
	l = m.Reservations.Size()
	n += 1 + l + sovStatus(uint64(l))
	return n
}

func (m *ClusterStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Leases.Size()
	n += 1 + l + sovStatus(uint64(l))
	l = m.Inventory.Size()
	n += 1 + l + sovStatus(uint64(l))
	return n
}

func (m *BidEngineStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orders != 0 {
		n += 1 + sovStatus(uint64(m.Orders))
	}
	return n
}

func (m *ManifestStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deployments != 0 {
		n += 1 + sovStatus(uint64(m.Deployments))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for _, s := range m.Errors {
			l = len(s)
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.BidEngine != nil {
		l = m.BidEngine.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Manifest != nil {
		l = m.Manifest.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if len(m.PublicHostnames) > 0 {
		for _, s := range m.PublicHostnames {
			l = len(s)
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourcesMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CPU == nil {
				m.CPU = &resource.Quantity{}
			}
			if err := m.CPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memory == nil {
				m.Memory = &resource.Quantity{}
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GPU == nil {
				m.GPU = &resource.Quantity{}
			}
			if err := m.GPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EphemeralStorage == nil {
				m.EphemeralStorage = &resource.Quantity{}
			}
			if err := m.EphemeralStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage == nil {
				m.Storage = make(Storage)
			}
			var mapkey string
			var mapvalue *resource.Quantity
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStatus
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStatus
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Storage[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Leases) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leases: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leases: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservationsMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservationsMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservationsMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reservations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reservations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reservations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pending.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inventory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inventory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inventory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reservations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leases.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inventory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidEngineStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidEngineStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidEngineStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			m.Orders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Orders |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			m.Deployments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deployments |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &ClusterStatus{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidEngine", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidEngine == nil {
				m.BidEngine = &BidEngineStatus{}
			}
			if err := m.BidEngine.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Manifest == nil {
				m.Manifest = &ManifestStatus{}
			}
			if err := m.Manifest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicHostnames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicHostnames = append(m.PublicHostnames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
