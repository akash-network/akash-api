// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file tendermint/types/types.proto (package tendermint.types, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../gogoproto/gogo_pb";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Proof, ProofJson } from "../crypto/proof_pb";
import { file_tendermint_crypto_proof } from "../crypto/proof_pb";
import type { Consensus, ConsensusJson } from "../version/types_pb";
import { file_tendermint_version_types } from "../version/types_pb";
import type { ValidatorSet, ValidatorSetJson } from "./validator_pb";
import { file_tendermint_types_validator } from "./validator_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tendermint/types/types.proto.
 */
export const file_tendermint_types_types: GenFile = /*@__PURE__*/
  fileDesc("Chx0ZW5kZXJtaW50L3R5cGVzL3R5cGVzLnByb3RvEhB0ZW5kZXJtaW50LnR5cGVzIiwKDVBhcnRTZXRIZWFkZXISDQoFdG90YWwYASABKA0SDAoEaGFzaBgCIAEoDCJTCgRQYXJ0Eg0KBWluZGV4GAEgASgNEg0KBWJ5dGVzGAIgASgMEi0KBXByb29mGAMgASgLMhgudGVuZGVybWludC5jcnlwdG8uUHJvb2ZCBMjeHwAiVwoHQmxvY2tJRBIMCgRoYXNoGAEgASgMEj4KD3BhcnRfc2V0X2hlYWRlchgCIAEoCzIfLnRlbmRlcm1pbnQudHlwZXMuUGFydFNldEhlYWRlckIEyN4fACKzAwoGSGVhZGVyEjQKB3ZlcnNpb24YASABKAsyHS50ZW5kZXJtaW50LnZlcnNpb24uQ29uc2Vuc3VzQgTI3h8AEh0KCGNoYWluX2lkGAIgASgJQgvi3h8HQ2hhaW5JRBIOCgZoZWlnaHQYAyABKAMSMgoEdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCMjeHwCQ3x8BEjYKDWxhc3RfYmxvY2tfaWQYBSABKAsyGS50ZW5kZXJtaW50LnR5cGVzLkJsb2NrSURCBMjeHwASGAoQbGFzdF9jb21taXRfaGFzaBgGIAEoDBIRCglkYXRhX2hhc2gYByABKAwSFwoPdmFsaWRhdG9yc19oYXNoGAggASgMEhwKFG5leHRfdmFsaWRhdG9yc19oYXNoGAkgASgMEhYKDmNvbnNlbnN1c19oYXNoGAogASgMEhAKCGFwcF9oYXNoGAsgASgMEhkKEWxhc3RfcmVzdWx0c19oYXNoGAwgASgMEhUKDWV2aWRlbmNlX2hhc2gYDSABKAwSGAoQcHJvcG9zZXJfYWRkcmVzcxgOIAEoDCITCgREYXRhEgsKA3R4cxgBIAMoDCKSAgoEVm90ZRItCgR0eXBlGAEgASgOMh8udGVuZGVybWludC50eXBlcy5TaWduZWRNc2dUeXBlEg4KBmhlaWdodBgCIAEoAxINCgVyb3VuZBgDIAEoBRI8CghibG9ja19pZBgEIAEoCzIZLnRlbmRlcm1pbnQudHlwZXMuQmxvY2tJREIPyN4fAOLeHwdCbG9ja0lEEjcKCXRpbWVzdGFtcBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCMjeHwCQ3x8BEhkKEXZhbGlkYXRvcl9hZGRyZXNzGAYgASgMEhcKD3ZhbGlkYXRvcl9pbmRleBgHIAEoBRIRCglzaWduYXR1cmUYCCABKAwinAEKBkNvbW1pdBIOCgZoZWlnaHQYASABKAMSDQoFcm91bmQYAiABKAUSPAoIYmxvY2tfaWQYAyABKAsyGS50ZW5kZXJtaW50LnR5cGVzLkJsb2NrSURCD8jeHwDi3h8HQmxvY2tJRBI1CgpzaWduYXR1cmVzGAQgAygLMhsudGVuZGVybWludC50eXBlcy5Db21taXRTaWdCBMjeHwAiqAEKCUNvbW1pdFNpZxI0Cg1ibG9ja19pZF9mbGFnGAEgASgOMh0udGVuZGVybWludC50eXBlcy5CbG9ja0lERmxhZxIZChF2YWxpZGF0b3JfYWRkcmVzcxgCIAEoDBI3Cgl0aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgjI3h8AkN8fARIRCglzaWduYXR1cmUYBCABKAwi9QEKCFByb3Bvc2FsEi0KBHR5cGUYASABKA4yHy50ZW5kZXJtaW50LnR5cGVzLlNpZ25lZE1zZ1R5cGUSDgoGaGVpZ2h0GAIgASgDEg0KBXJvdW5kGAMgASgFEhEKCXBvbF9yb3VuZBgEIAEoBRI8CghibG9ja19pZBgFIAEoCzIZLnRlbmRlcm1pbnQudHlwZXMuQmxvY2tJREIPyN4fAOLeHwdCbG9ja0lEEjcKCXRpbWVzdGFtcBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCCMjeHwCQ3x8BEhEKCXNpZ25hdHVyZRgHIAEoDCJiCgxTaWduZWRIZWFkZXISKAoGaGVhZGVyGAEgASgLMhgudGVuZGVybWludC50eXBlcy5IZWFkZXISKAoGY29tbWl0GAIgASgLMhgudGVuZGVybWludC50eXBlcy5Db21taXQiegoKTGlnaHRCbG9jaxI1Cg1zaWduZWRfaGVhZGVyGAEgASgLMh4udGVuZGVybWludC50eXBlcy5TaWduZWRIZWFkZXISNQoNdmFsaWRhdG9yX3NldBgCIAEoCzIeLnRlbmRlcm1pbnQudHlwZXMuVmFsaWRhdG9yU2V0Ip4BCglCbG9ja01ldGESPAoIYmxvY2tfaWQYASABKAsyGS50ZW5kZXJtaW50LnR5cGVzLkJsb2NrSURCD8jeHwDi3h8HQmxvY2tJRBISCgpibG9ja19zaXplGAIgASgDEi4KBmhlYWRlchgDIAEoCzIYLnRlbmRlcm1pbnQudHlwZXMuSGVhZGVyQgTI3h8AEg8KB251bV90eHMYBCABKAMiUwoHVHhQcm9vZhIRCglyb290X2hhc2gYASABKAwSDAoEZGF0YRgCIAEoDBInCgVwcm9vZhgDIAEoCzIYLnRlbmRlcm1pbnQuY3J5cHRvLlByb29mKtcBCgtCbG9ja0lERmxhZxIxChVCTE9DS19JRF9GTEFHX1VOS05PV04QABoWip0gEkJsb2NrSURGbGFnVW5rbm93bhIvChRCTE9DS19JRF9GTEFHX0FCU0VOVBABGhWKnSARQmxvY2tJREZsYWdBYnNlbnQSLwoUQkxPQ0tfSURfRkxBR19DT01NSVQQAhoVip0gEUJsb2NrSURGbGFnQ29tbWl0EikKEUJMT0NLX0lEX0ZMQUdfTklMEAMaEoqdIA5CbG9ja0lERmxhZ05pbBoIiKMeAKikHgEq1wEKDVNpZ25lZE1zZ1R5cGUSLAoXU0lHTkVEX01TR19UWVBFX1VOS05PV04QABoPip0gC1Vua25vd25UeXBlEiwKF1NJR05FRF9NU0dfVFlQRV9QUkVWT1RFEAEaD4qdIAtQcmV2b3RlVHlwZRIwChlTSUdORURfTVNHX1RZUEVfUFJFQ09NTUlUEAIaEYqdIA1QcmVjb21taXRUeXBlEi4KGFNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTBAgGhCKnSAMUHJvcG9zYWxUeXBlGgiIox4AqKQeAUI1WjNnaXRodWIuY29tL2NvbWV0YmZ0L2NvbWV0YmZ0L3Byb3RvL3RlbmRlcm1pbnQvdHlwZXNiBnByb3RvMw", [file_gogoproto_gogo, file_google_protobuf_timestamp, file_tendermint_crypto_proof, file_tendermint_version_types, file_tendermint_types_validator]);

/**
 * PartsetHeader
 *
 * @generated from message tendermint.types.PartSetHeader
 */
export type PartSetHeader = Message<"tendermint.types.PartSetHeader"> & {
  /**
   * @generated from field: uint32 total = 1;
   */
  total: number;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash: Uint8Array;
};

/**
 * PartsetHeader
 *
 * @generated from message tendermint.types.PartSetHeader
 */
export type PartSetHeaderJson = {
  /**
   * @generated from field: uint32 total = 1;
   */
  total?: number;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash?: string;
};

/**
 * Describes the message tendermint.types.PartSetHeader.
 * Use `create(PartSetHeaderSchema)` to create a new message.
 */
export const PartSetHeaderSchema: GenMessage<PartSetHeader, PartSetHeaderJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 0);

/**
 * @generated from message tendermint.types.Part
 */
export type Part = Message<"tendermint.types.Part"> & {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: bytes bytes = 2;
   */
  bytes: Uint8Array;

  /**
   * @generated from field: tendermint.crypto.Proof proof = 3;
   */
  proof?: Proof;
};

/**
 * @generated from message tendermint.types.Part
 */
export type PartJson = {
  /**
   * @generated from field: uint32 index = 1;
   */
  index?: number;

  /**
   * @generated from field: bytes bytes = 2;
   */
  bytes?: string;

  /**
   * @generated from field: tendermint.crypto.Proof proof = 3;
   */
  proof?: ProofJson;
};

/**
 * Describes the message tendermint.types.Part.
 * Use `create(PartSchema)` to create a new message.
 */
export const PartSchema: GenMessage<Part, PartJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 1);

/**
 * BlockID
 *
 * @generated from message tendermint.types.BlockID
 */
export type BlockID = Message<"tendermint.types.BlockID"> & {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * @generated from field: tendermint.types.PartSetHeader part_set_header = 2;
   */
  partSetHeader?: PartSetHeader;
};

/**
 * BlockID
 *
 * @generated from message tendermint.types.BlockID
 */
export type BlockIDJson = {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash?: string;

  /**
   * @generated from field: tendermint.types.PartSetHeader part_set_header = 2;
   */
  partSetHeader?: PartSetHeaderJson;
};

/**
 * Describes the message tendermint.types.BlockID.
 * Use `create(BlockIDSchema)` to create a new message.
 */
export const BlockIDSchema: GenMessage<BlockID, BlockIDJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 2);

/**
 * Header defines the structure of a block header.
 *
 * @generated from message tendermint.types.Header
 */
export type Header = Message<"tendermint.types.Header"> & {
  /**
   * basic block info
   *
   * @generated from field: tendermint.version.Consensus version = 1;
   */
  version?: Consensus;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId: string;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * prev block info
   *
   * @generated from field: tendermint.types.BlockID last_block_id = 5;
   */
  lastBlockId?: BlockID;

  /**
   * hashes of block data
   *
   * commit from validators from the last block
   *
   * @generated from field: bytes last_commit_hash = 6;
   */
  lastCommitHash: Uint8Array;

  /**
   * transactions
   *
   * @generated from field: bytes data_hash = 7;
   */
  dataHash: Uint8Array;

  /**
   * hashes from the app output from the prev block
   *
   * validators for the current block
   *
   * @generated from field: bytes validators_hash = 8;
   */
  validatorsHash: Uint8Array;

  /**
   * validators for the next block
   *
   * @generated from field: bytes next_validators_hash = 9;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * consensus params for current block
   *
   * @generated from field: bytes consensus_hash = 10;
   */
  consensusHash: Uint8Array;

  /**
   * state after txs from the previous block
   *
   * @generated from field: bytes app_hash = 11;
   */
  appHash: Uint8Array;

  /**
   * root hash of all results from the txs from the previous block
   *
   * @generated from field: bytes last_results_hash = 12;
   */
  lastResultsHash: Uint8Array;

  /**
   * consensus info
   *
   * evidence included in the block
   *
   * @generated from field: bytes evidence_hash = 13;
   */
  evidenceHash: Uint8Array;

  /**
   * original proposer of the block
   *
   * @generated from field: bytes proposer_address = 14;
   */
  proposerAddress: Uint8Array;
};

/**
 * Header defines the structure of a block header.
 *
 * @generated from message tendermint.types.Header
 */
export type HeaderJson = {
  /**
   * basic block info
   *
   * @generated from field: tendermint.version.Consensus version = 1;
   */
  version?: ConsensusJson;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId?: string;

  /**
   * @generated from field: int64 height = 3;
   */
  height?: string;

  /**
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: TimestampJson;

  /**
   * prev block info
   *
   * @generated from field: tendermint.types.BlockID last_block_id = 5;
   */
  lastBlockId?: BlockIDJson;

  /**
   * hashes of block data
   *
   * commit from validators from the last block
   *
   * @generated from field: bytes last_commit_hash = 6;
   */
  lastCommitHash?: string;

  /**
   * transactions
   *
   * @generated from field: bytes data_hash = 7;
   */
  dataHash?: string;

  /**
   * hashes from the app output from the prev block
   *
   * validators for the current block
   *
   * @generated from field: bytes validators_hash = 8;
   */
  validatorsHash?: string;

  /**
   * validators for the next block
   *
   * @generated from field: bytes next_validators_hash = 9;
   */
  nextValidatorsHash?: string;

  /**
   * consensus params for current block
   *
   * @generated from field: bytes consensus_hash = 10;
   */
  consensusHash?: string;

  /**
   * state after txs from the previous block
   *
   * @generated from field: bytes app_hash = 11;
   */
  appHash?: string;

  /**
   * root hash of all results from the txs from the previous block
   *
   * @generated from field: bytes last_results_hash = 12;
   */
  lastResultsHash?: string;

  /**
   * consensus info
   *
   * evidence included in the block
   *
   * @generated from field: bytes evidence_hash = 13;
   */
  evidenceHash?: string;

  /**
   * original proposer of the block
   *
   * @generated from field: bytes proposer_address = 14;
   */
  proposerAddress?: string;
};

/**
 * Describes the message tendermint.types.Header.
 * Use `create(HeaderSchema)` to create a new message.
 */
export const HeaderSchema: GenMessage<Header, HeaderJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 3);

/**
 * Data contains the set of transactions included in the block
 *
 * @generated from message tendermint.types.Data
 */
export type Data = Message<"tendermint.types.Data"> & {
  /**
   * Txs that will be applied by state @ block.Height+1.
   * NOTE: not all txs here are valid.  We're just agreeing on the order first.
   * This means that block.AppHash does not include these txs.
   *
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];
};

/**
 * Data contains the set of transactions included in the block
 *
 * @generated from message tendermint.types.Data
 */
export type DataJson = {
  /**
   * Txs that will be applied by state @ block.Height+1.
   * NOTE: not all txs here are valid.  We're just agreeing on the order first.
   * This means that block.AppHash does not include these txs.
   *
   * @generated from field: repeated bytes txs = 1;
   */
  txs?: string[];
};

/**
 * Describes the message tendermint.types.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export const DataSchema: GenMessage<Data, DataJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 4);

/**
 * Vote represents a prevote, precommit, or commit vote from validators for
 * consensus.
 *
 * @generated from message tendermint.types.Vote
 */
export type Vote = Message<"tendermint.types.Vote"> & {
  /**
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type: SignedMsgType;

  /**
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * zero if vote is nil.
   *
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes validator_address = 6;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: int32 validator_index = 7;
   */
  validatorIndex: number;

  /**
   * @generated from field: bytes signature = 8;
   */
  signature: Uint8Array;
};

/**
 * Vote represents a prevote, precommit, or commit vote from validators for
 * consensus.
 *
 * @generated from message tendermint.types.Vote
 */
export type VoteJson = {
  /**
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type?: SignedMsgTypeJson;

  /**
   * @generated from field: int64 height = 2;
   */
  height?: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round?: number;

  /**
   * zero if vote is nil.
   *
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockIDJson;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: TimestampJson;

  /**
   * @generated from field: bytes validator_address = 6;
   */
  validatorAddress?: string;

  /**
   * @generated from field: int32 validator_index = 7;
   */
  validatorIndex?: number;

  /**
   * @generated from field: bytes signature = 8;
   */
  signature?: string;
};

/**
 * Describes the message tendermint.types.Vote.
 * Use `create(VoteSchema)` to create a new message.
 */
export const VoteSchema: GenMessage<Vote, VoteJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 5);

/**
 * Commit contains the evidence that a block was committed by a set of validators.
 *
 * @generated from message tendermint.types.Commit
 */
export type Commit = Message<"tendermint.types.Commit"> & {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 3;
   */
  blockId?: BlockID;

  /**
   * @generated from field: repeated tendermint.types.CommitSig signatures = 4;
   */
  signatures: CommitSig[];
};

/**
 * Commit contains the evidence that a block was committed by a set of validators.
 *
 * @generated from message tendermint.types.Commit
 */
export type CommitJson = {
  /**
   * @generated from field: int64 height = 1;
   */
  height?: string;

  /**
   * @generated from field: int32 round = 2;
   */
  round?: number;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 3;
   */
  blockId?: BlockIDJson;

  /**
   * @generated from field: repeated tendermint.types.CommitSig signatures = 4;
   */
  signatures?: CommitSigJson[];
};

/**
 * Describes the message tendermint.types.Commit.
 * Use `create(CommitSchema)` to create a new message.
 */
export const CommitSchema: GenMessage<Commit, CommitJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 6);

/**
 * CommitSig is a part of the Vote included in a Commit.
 *
 * @generated from message tendermint.types.CommitSig
 */
export type CommitSig = Message<"tendermint.types.CommitSig"> & {
  /**
   * @generated from field: tendermint.types.BlockIDFlag block_id_flag = 1;
   */
  blockIdFlag: BlockIDFlag;

  /**
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes signature = 4;
   */
  signature: Uint8Array;
};

/**
 * CommitSig is a part of the Vote included in a Commit.
 *
 * @generated from message tendermint.types.CommitSig
 */
export type CommitSigJson = {
  /**
   * @generated from field: tendermint.types.BlockIDFlag block_id_flag = 1;
   */
  blockIdFlag?: BlockIDFlagJson;

  /**
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress?: string;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: TimestampJson;

  /**
   * @generated from field: bytes signature = 4;
   */
  signature?: string;
};

/**
 * Describes the message tendermint.types.CommitSig.
 * Use `create(CommitSigSchema)` to create a new message.
 */
export const CommitSigSchema: GenMessage<CommitSig, CommitSigJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 7);

/**
 * @generated from message tendermint.types.Proposal
 */
export type Proposal = Message<"tendermint.types.Proposal"> & {
  /**
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type: SignedMsgType;

  /**
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: int32 pol_round = 4;
   */
  polRound: number;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 5;
   */
  blockId?: BlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes signature = 7;
   */
  signature: Uint8Array;
};

/**
 * @generated from message tendermint.types.Proposal
 */
export type ProposalJson = {
  /**
   * @generated from field: tendermint.types.SignedMsgType type = 1;
   */
  type?: SignedMsgTypeJson;

  /**
   * @generated from field: int64 height = 2;
   */
  height?: string;

  /**
   * @generated from field: int32 round = 3;
   */
  round?: number;

  /**
   * @generated from field: int32 pol_round = 4;
   */
  polRound?: number;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 5;
   */
  blockId?: BlockIDJson;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: TimestampJson;

  /**
   * @generated from field: bytes signature = 7;
   */
  signature?: string;
};

/**
 * Describes the message tendermint.types.Proposal.
 * Use `create(ProposalSchema)` to create a new message.
 */
export const ProposalSchema: GenMessage<Proposal, ProposalJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 8);

/**
 * @generated from message tendermint.types.SignedHeader
 */
export type SignedHeader = Message<"tendermint.types.SignedHeader"> & {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: tendermint.types.Commit commit = 2;
   */
  commit?: Commit;
};

/**
 * @generated from message tendermint.types.SignedHeader
 */
export type SignedHeaderJson = {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: HeaderJson;

  /**
   * @generated from field: tendermint.types.Commit commit = 2;
   */
  commit?: CommitJson;
};

/**
 * Describes the message tendermint.types.SignedHeader.
 * Use `create(SignedHeaderSchema)` to create a new message.
 */
export const SignedHeaderSchema: GenMessage<SignedHeader, SignedHeaderJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 9);

/**
 * @generated from message tendermint.types.LightBlock
 */
export type LightBlock = Message<"tendermint.types.LightBlock"> & {
  /**
   * @generated from field: tendermint.types.SignedHeader signed_header = 1;
   */
  signedHeader?: SignedHeader;

  /**
   * @generated from field: tendermint.types.ValidatorSet validator_set = 2;
   */
  validatorSet?: ValidatorSet;
};

/**
 * @generated from message tendermint.types.LightBlock
 */
export type LightBlockJson = {
  /**
   * @generated from field: tendermint.types.SignedHeader signed_header = 1;
   */
  signedHeader?: SignedHeaderJson;

  /**
   * @generated from field: tendermint.types.ValidatorSet validator_set = 2;
   */
  validatorSet?: ValidatorSetJson;
};

/**
 * Describes the message tendermint.types.LightBlock.
 * Use `create(LightBlockSchema)` to create a new message.
 */
export const LightBlockSchema: GenMessage<LightBlock, LightBlockJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 10);

/**
 * @generated from message tendermint.types.BlockMeta
 */
export type BlockMeta = Message<"tendermint.types.BlockMeta"> & {
  /**
   * @generated from field: tendermint.types.BlockID block_id = 1;
   */
  blockId?: BlockID;

  /**
   * @generated from field: int64 block_size = 2;
   */
  blockSize: bigint;

  /**
   * @generated from field: tendermint.types.Header header = 3;
   */
  header?: Header;

  /**
   * @generated from field: int64 num_txs = 4;
   */
  numTxs: bigint;
};

/**
 * @generated from message tendermint.types.BlockMeta
 */
export type BlockMetaJson = {
  /**
   * @generated from field: tendermint.types.BlockID block_id = 1;
   */
  blockId?: BlockIDJson;

  /**
   * @generated from field: int64 block_size = 2;
   */
  blockSize?: string;

  /**
   * @generated from field: tendermint.types.Header header = 3;
   */
  header?: HeaderJson;

  /**
   * @generated from field: int64 num_txs = 4;
   */
  numTxs?: string;
};

/**
 * Describes the message tendermint.types.BlockMeta.
 * Use `create(BlockMetaSchema)` to create a new message.
 */
export const BlockMetaSchema: GenMessage<BlockMeta, BlockMetaJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 11);

/**
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 *
 * @generated from message tendermint.types.TxProof
 */
export type TxProof = Message<"tendermint.types.TxProof"> & {
  /**
   * @generated from field: bytes root_hash = 1;
   */
  rootHash: Uint8Array;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * @generated from field: tendermint.crypto.Proof proof = 3;
   */
  proof?: Proof;
};

/**
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 *
 * @generated from message tendermint.types.TxProof
 */
export type TxProofJson = {
  /**
   * @generated from field: bytes root_hash = 1;
   */
  rootHash?: string;

  /**
   * @generated from field: bytes data = 2;
   */
  data?: string;

  /**
   * @generated from field: tendermint.crypto.Proof proof = 3;
   */
  proof?: ProofJson;
};

/**
 * Describes the message tendermint.types.TxProof.
 * Use `create(TxProofSchema)` to create a new message.
 */
export const TxProofSchema: GenMessage<TxProof, TxProofJson> = /*@__PURE__*/
  messageDesc(file_tendermint_types_types, 12);

/**
 * BlockIdFlag indicates which BlcokID the signature is for
 *
 * @generated from enum tendermint.types.BlockIDFlag
 */
export enum BlockIDFlag {
  /**
   * @generated from enum value: BLOCK_ID_FLAG_UNKNOWN = 0;
   */
  BLOCK_ID_FLAG_UNKNOWN = 0,

  /**
   * @generated from enum value: BLOCK_ID_FLAG_ABSENT = 1;
   */
  BLOCK_ID_FLAG_ABSENT = 1,

  /**
   * @generated from enum value: BLOCK_ID_FLAG_COMMIT = 2;
   */
  BLOCK_ID_FLAG_COMMIT = 2,

  /**
   * @generated from enum value: BLOCK_ID_FLAG_NIL = 3;
   */
  BLOCK_ID_FLAG_NIL = 3,
}

/**
 * BlockIdFlag indicates which BlcokID the signature is for
 *
 * @generated from enum tendermint.types.BlockIDFlag
 */
export type BlockIDFlagJson = "BLOCK_ID_FLAG_UNKNOWN" | "BLOCK_ID_FLAG_ABSENT" | "BLOCK_ID_FLAG_COMMIT" | "BLOCK_ID_FLAG_NIL";

/**
 * Describes the enum tendermint.types.BlockIDFlag.
 */
export const BlockIDFlagSchema: GenEnum<BlockIDFlag, BlockIDFlagJson> = /*@__PURE__*/
  enumDesc(file_tendermint_types_types, 0);

/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * @generated from enum tendermint.types.SignedMsgType
 */
export enum SignedMsgType {
  /**
   * @generated from enum value: SIGNED_MSG_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Votes
   *
   * @generated from enum value: SIGNED_MSG_TYPE_PREVOTE = 1;
   */
  PREVOTE = 1,

  /**
   * @generated from enum value: SIGNED_MSG_TYPE_PRECOMMIT = 2;
   */
  PRECOMMIT = 2,

  /**
   * Proposals
   *
   * @generated from enum value: SIGNED_MSG_TYPE_PROPOSAL = 32;
   */
  PROPOSAL = 32,
}

/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * @generated from enum tendermint.types.SignedMsgType
 */
export type SignedMsgTypeJson = "SIGNED_MSG_TYPE_UNKNOWN" | "SIGNED_MSG_TYPE_PREVOTE" | "SIGNED_MSG_TYPE_PRECOMMIT" | "SIGNED_MSG_TYPE_PROPOSAL";

/**
 * Describes the enum tendermint.types.SignedMsgType.
 */
export const SignedMsgTypeSchema: GenEnum<SignedMsgType, SignedMsgTypeJson> = /*@__PURE__*/
  enumDesc(file_tendermint_types_types, 1);

