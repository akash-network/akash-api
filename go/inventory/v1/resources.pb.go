// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inventory/v1/resources.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NodeResources reports node inventory details
type NodeResources struct {
	CPU              CPU          `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu" yaml:"cpu"`
	Memory           Memory       `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory" yaml:"memory"`
	GPU              GPU          `protobuf:"bytes,3,opt,name=gpu,proto3,castrepeated=GPUs" json:"gpu" yaml:"gpu"`
	EphemeralStorage ResourcePair `protobuf:"bytes,4,opt,name=ephemeral_storage,json=ephemeralStorage,proto3" json:"ephemeral_storage" yaml:"ephemeral_storage"`
	VolumesAttached  ResourcePair `protobuf:"bytes,5,opt,name=volumes_attached,json=volumesAttached,proto3" json:"volumes_attached" yaml:"volumes_attached"`
	VolumesMounted   ResourcePair `protobuf:"bytes,6,opt,name=volumes_mounted,json=volumesMounted,proto3" json:"volumes_mounted" yaml:"volumes_mounted"`
}

func (m *NodeResources) Reset()         { *m = NodeResources{} }
func (m *NodeResources) String() string { return proto.CompactTextString(m) }
func (*NodeResources) ProtoMessage()    {}
func (*NodeResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_f20a722bd8ee01b5, []int{0}
}
func (m *NodeResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeResources.Merge(m, src)
}
func (m *NodeResources) XXX_Size() int {
	return m.Size()
}
func (m *NodeResources) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeResources.DiscardUnknown(m)
}

var xxx_messageInfo_NodeResources proto.InternalMessageInfo

func (m *NodeResources) GetCPU() CPU {
	if m != nil {
		return m.CPU
	}
	return CPU{}
}

func (m *NodeResources) GetMemory() Memory {
	if m != nil {
		return m.Memory
	}
	return Memory{}
}

func (m *NodeResources) GetGPU() GPU {
	if m != nil {
		return m.GPU
	}
	return GPU{}
}

func (m *NodeResources) GetEphemeralStorage() ResourcePair {
	if m != nil {
		return m.EphemeralStorage
	}
	return ResourcePair{}
}

func (m *NodeResources) GetVolumesAttached() ResourcePair {
	if m != nil {
		return m.VolumesAttached
	}
	return ResourcePair{}
}

func (m *NodeResources) GetVolumesMounted() ResourcePair {
	if m != nil {
		return m.VolumesMounted
	}
	return ResourcePair{}
}

func init() {
	proto.RegisterType((*NodeResources)(nil), "akash.inventory.v1.NodeResources")
}

func init() {
	proto.RegisterFile("akash/inventory/v1/resources.proto", fileDescriptor_f20a722bd8ee01b5)
}

var fileDescriptor_f20a722bd8ee01b5 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x1b, 0xbb, 0xdb, 0xc3, 0xc8, 0xee, 0xd6, 0x20, 0x6e, 0xa8, 0x92, 0x29, 0x03, 0xc2,
	0x7a, 0x49, 0x58, 0xc5, 0x8b, 0x37, 0x53, 0xb4, 0x88, 0xac, 0x84, 0x2c, 0xf5, 0x20, 0x48, 0x19,
	0xd3, 0x61, 0x5a, 0xda, 0x74, 0x86, 0x24, 0x13, 0xd8, 0x97, 0x10, 0xc1, 0x8b, 0xcf, 0xe0, 0x93,
	0xec, 0x71, 0xf1, 0xe4, 0x69, 0x94, 0xf6, 0x96, 0x63, 0x9e, 0x40, 0x92, 0x99, 0x2c, 0xb6, 0xcd,
	0x2e, 0x7b, 0x6b, 0xe6, 0xff, 0xff, 0x7e, 0xdf, 0x6f, 0x0a, 0x03, 0x10, 0x9e, 0xe3, 0x64, 0xea,
	0xce, 0x96, 0x19, 0x59, 0xa6, 0x2c, 0xbe, 0x70, 0xb3, 0x53, 0x37, 0x26, 0x09, 0x13, 0x71, 0x48,
	0x12, 0x87, 0xc7, 0x2c, 0x65, 0xa6, 0x59, 0x75, 0x9c, 0xeb, 0x8e, 0x93, 0x9d, 0xf6, 0x1e, 0x52,
	0x46, 0x59, 0x15, 0xbb, 0xe5, 0x2f, 0xd5, 0xec, 0x3d, 0x69, 0xa0, 0x85, 0x5c, 0xdc, 0x92, 0xd2,
	0xeb, 0x14, 0x36, 0xa4, 0x11, 0x89, 0xca, 0x7d, 0xaa, 0xf0, 0xf4, 0x16, 0x55, 0x8e, 0x67, 0xb1,
	0xaa, 0xa1, 0x5f, 0xfb, 0xe0, 0xe0, 0x03, 0x9b, 0x90, 0xa0, 0xbe, 0x85, 0xf9, 0x1e, 0xb4, 0x43,
	0x2e, 0x2c, 0xa3, 0x6f, 0x9c, 0xdc, 0x7f, 0x7e, 0xec, 0xec, 0xde, 0xc6, 0x19, 0xf8, 0x23, 0xaf,
	0x7f, 0x29, 0x61, 0x6b, 0x25, 0x61, 0x7b, 0xe0, 0x8f, 0x72, 0x09, 0xcb, 0x91, 0x42, 0x42, 0x70,
	0x81, 0xa3, 0xc5, 0x2b, 0x14, 0x72, 0x81, 0x82, 0xf2, 0xc8, 0xfc, 0x0c, 0x3a, 0xca, 0xca, 0xba,
	0x57, 0xf1, 0x7a, 0x4d, 0xbc, 0xb3, 0xaa, 0xe1, 0x3d, 0xd3, 0xc8, 0x8e, 0xfa, 0xce, 0x25, 0xd4,
	0xb3, 0x85, 0x84, 0x07, 0x0a, 0xac, 0xbe, 0x51, 0xa0, 0x03, 0xf3, 0x1c, 0xb4, 0x29, 0x17, 0x56,
	0xfb, 0x66, 0xd7, 0xa1, 0x3f, 0xf2, 0x4e, 0x6a, 0xd7, 0xa1, 0x72, 0xa5, 0xff, 0xbb, 0x52, 0x2e,
	0xd0, 0xcf, 0x3f, 0x70, 0x6f, 0xe8, 0x8f, 0x92, 0xa0, 0x8c, 0xcc, 0x1f, 0x06, 0x78, 0x40, 0xf8,
	0x94, 0x44, 0x24, 0xc6, 0x8b, 0x71, 0x92, 0xb2, 0x18, 0x53, 0x62, 0xed, 0x55, 0x3b, 0xfa, 0x4d,
	0x3b, 0xea, 0xff, 0xce, 0xc7, 0xb3, 0xd8, 0x7b, 0xa7, 0x97, 0x75, 0xdf, 0xd4, 0x88, 0x73, 0x45,
	0xc8, 0x25, 0xdc, 0xc5, 0x16, 0x12, 0x5a, 0xca, 0x63, 0x27, 0x42, 0x41, 0x97, 0x6c, 0x21, 0xcc,
	0xef, 0x06, 0xe8, 0x66, 0x6c, 0x21, 0x22, 0x92, 0x8c, 0x71, 0x9a, 0xe2, 0x70, 0x4a, 0x26, 0xd6,
	0xfe, 0x1d, 0xcd, 0xde, 0x6a, 0xb3, 0xa3, 0x8f, 0x8a, 0xf0, 0x5a, 0x03, 0x72, 0x09, 0x77, 0xa0,
	0x85, 0x84, 0xc7, 0xca, 0x6b, 0x3b, 0x41, 0xc1, 0x51, 0xb6, 0x39, 0x6f, 0x7e, 0x35, 0x40, 0x7d,
	0x36, 0x8e, 0x98, 0x58, 0xa6, 0x64, 0x62, 0x75, 0xee, 0x28, 0x35, 0xd0, 0x52, 0x87, 0x5a, 0xea,
	0x4c, 0xcd, 0xe7, 0x12, 0x6e, 0x23, 0x0b, 0x09, 0x1f, 0x6d, 0x2a, 0xe9, 0x00, 0x05, 0x87, 0xd9,
	0xc6, 0xb0, 0xf7, 0xf2, 0x72, 0x65, 0x1b, 0x57, 0x2b, 0xdb, 0xf8, 0xbb, 0xb2, 0x8d, 0x6f, 0x6b,
	0xbb, 0x75, 0xb5, 0xb6, 0x5b, 0xbf, 0xd7, 0x76, 0xeb, 0xd3, 0x63, 0x3e, 0xa7, 0x0e, 0x9e, 0xa7,
	0xce, 0x84, 0x64, 0x2e, 0x65, 0x1b, 0xcf, 0xe3, 0x4b, 0xa7, 0x7a, 0x12, 0x2f, 0xfe, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xca, 0x7c, 0xf6, 0x39, 0xe6, 0x03, 0x00, 0x00,
}

func (m *NodeResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VolumesMounted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.VolumesAttached.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.EphemeralStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.GPU.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Memory.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CPU.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintResources(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintResources(dAtA []byte, offset int, v uint64) int {
	offset -= sovResources(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CPU.Size()
	n += 1 + l + sovResources(uint64(l))
	l = m.Memory.Size()
	n += 1 + l + sovResources(uint64(l))
	l = m.GPU.Size()
	n += 1 + l + sovResources(uint64(l))
	l = m.EphemeralStorage.Size()
	n += 1 + l + sovResources(uint64(l))
	l = m.VolumesAttached.Size()
	n += 1 + l + sovResources(uint64(l))
	l = m.VolumesMounted.Size()
	n += 1 + l + sovResources(uint64(l))
	return n
}

func sovResources(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResources(x uint64) (n int) {
	return sovResources(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResources
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Memory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GPU", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GPU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EphemeralStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EphemeralStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumesAttached", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumesAttached.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumesMounted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResources
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResources
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResources
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumesMounted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResources(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResources
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResources(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResources
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResources
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResources
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResources
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResources
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResources        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResources          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResources = fmt.Errorf("proto: unexpected end of group")
)
