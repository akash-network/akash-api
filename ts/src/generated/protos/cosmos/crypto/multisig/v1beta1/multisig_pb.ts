// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/crypto/multisig/v1beta1/multisig.proto (package cosmos.crypto.multisig.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../../gogoproto/gogo_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/crypto/multisig/v1beta1/multisig.proto.
 */
export const file_cosmos_crypto_multisig_v1beta1_multisig: GenFile = /*@__PURE__*/
  fileDesc("Ci1jb3Ntb3MvY3J5cHRvL211bHRpc2lnL3YxYmV0YTEvbXVsdGlzaWcucHJvdG8SHmNvc21vcy5jcnlwdG8ubXVsdGlzaWcudjFiZXRhMSIqCg5NdWx0aVNpZ25hdHVyZRISCgpzaWduYXR1cmVzGAEgAygMOgTQoR8BIkEKD0NvbXBhY3RCaXRBcnJheRIZChFleHRyYV9iaXRzX3N0b3JlZBgBIAEoDRINCgVlbGVtcxgCIAEoDDoEmKAfAEIrWilnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL2NyeXB0by90eXBlc2IGcHJvdG8z", [file_gogoproto_gogo]);

/**
 * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 * signed and with which modes.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export type MultiSignature = Message<"cosmos.crypto.multisig.v1beta1.MultiSignature"> & {
  /**
   * @generated from field: repeated bytes signatures = 1;
   */
  signatures: Uint8Array[];
};

/**
 * MultiSignature wraps the signatures from a multisig.LegacyAminoPubKey.
 * See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers
 * signed and with which modes.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.MultiSignature
 */
export type MultiSignatureJson = {
  /**
   * @generated from field: repeated bytes signatures = 1;
   */
  signatures?: string[];
};

/**
 * Describes the message cosmos.crypto.multisig.v1beta1.MultiSignature.
 * Use `create(MultiSignatureSchema)` to create a new message.
 */
export const MultiSignatureSchema: GenMessage<MultiSignature, MultiSignatureJson> = /*@__PURE__*/
  messageDesc(file_cosmos_crypto_multisig_v1beta1_multisig, 0);

/**
 * CompactBitArray is an implementation of a space efficient bit array.
 * This is used to ensure that the encoded data takes up a minimal amount of
 * space after proto encoding.
 * This is not thread safe, and is not intended for concurrent usage.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export type CompactBitArray = Message<"cosmos.crypto.multisig.v1beta1.CompactBitArray"> & {
  /**
   * @generated from field: uint32 extra_bits_stored = 1;
   */
  extraBitsStored: number;

  /**
   * @generated from field: bytes elems = 2;
   */
  elems: Uint8Array;
};

/**
 * CompactBitArray is an implementation of a space efficient bit array.
 * This is used to ensure that the encoded data takes up a minimal amount of
 * space after proto encoding.
 * This is not thread safe, and is not intended for concurrent usage.
 *
 * @generated from message cosmos.crypto.multisig.v1beta1.CompactBitArray
 */
export type CompactBitArrayJson = {
  /**
   * @generated from field: uint32 extra_bits_stored = 1;
   */
  extraBitsStored?: number;

  /**
   * @generated from field: bytes elems = 2;
   */
  elems?: string;
};

/**
 * Describes the message cosmos.crypto.multisig.v1beta1.CompactBitArray.
 * Use `create(CompactBitArraySchema)` to create a new message.
 */
export const CompactBitArraySchema: GenMessage<CompactBitArray, CompactBitArrayJson> = /*@__PURE__*/
  messageDesc(file_cosmos_crypto_multisig_v1beta1_multisig, 1);

