// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file akash/manifest/v2beta1/serviceexpose.proto (package akash.manifest.v2beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ServiceExposeHTTPOptions } from './httpoptions_pb.js';

/**
 * ServiceExpose stores exposed ports and hosts details
 *
 * @generated from message akash.manifest.v2beta1.ServiceExpose
 */
export class ServiceExpose extends Message<ServiceExpose> {
  /**
   * port on the container
   *
   * @generated from field: uint32 port = 1;
   */
  port = 0;

  /**
   * port on the service definition
   *
   * @generated from field: uint32 external_port = 2;
   */
  externalPort = 0;

  /**
   * @generated from field: string proto = 3;
   */
  proto = '';

  /**
   * @generated from field: string service = 4;
   */
  service = '';

  /**
   * @generated from field: bool global = 5;
   */
  global = false;

  /**
   * @generated from field: repeated string hosts = 6;
   */
  hosts: string[] = [];

  /**
   * @generated from field: akash.manifest.v2beta1.ServiceExposeHTTPOptions http_options = 7;
   */
  httpOptions?: ServiceExposeHTTPOptions;

  /**
   * The name of the IP address associated with this, if any
   *
   * @generated from field: string ip = 8;
   */
  ip = '';

  /**
   * The sequence number of the associated endpoint in the on-chain data
   *
   * @generated from field: uint32 endpoint_sequence_number = 9;
   */
  endpointSequenceNumber = 0;

  constructor(data?: PartialMessage<ServiceExpose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'akash.manifest.v2beta1.ServiceExpose';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'port', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    {
      no: 2,
      name: 'external_port',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
    { no: 3, name: 'proto', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'service', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'global', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 6,
      name: 'hosts',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 7,
      name: 'http_options',
      kind: 'message',
      T: ServiceExposeHTTPOptions,
    },
    { no: 8, name: 'ip', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 9,
      name: 'endpoint_sequence_number',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ServiceExpose {
    return new ServiceExpose().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ServiceExpose {
    return new ServiceExpose().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ServiceExpose {
    return new ServiceExpose().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServiceExpose | PlainMessage<ServiceExpose> | undefined,
    b: ServiceExpose | PlainMessage<ServiceExpose> | undefined,
  ): boolean {
    return proto3.util.equals(ServiceExpose, a, b);
  }
}
