// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/sdl/v2/profiles.proto

package v2

import (
	fmt "fmt"
	v1beta3 "github.com/akash-network/akash-api/go/node/types/v1beta3"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProfileCompute struct {
	Resources ComputeResources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources" yaml:"resources"`
}

func (m *ProfileCompute) Reset()         { *m = ProfileCompute{} }
func (m *ProfileCompute) String() string { return proto.CompactTextString(m) }
func (*ProfileCompute) ProtoMessage()    {}
func (*ProfileCompute) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d552ef2e33c3e5a, []int{0}
}
func (m *ProfileCompute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfileCompute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfileCompute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfileCompute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileCompute.Merge(m, src)
}
func (m *ProfileCompute) XXX_Size() int {
	return m.Size()
}
func (m *ProfileCompute) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileCompute.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileCompute proto.InternalMessageInfo

func (m *ProfileCompute) GetResources() ComputeResources {
	if m != nil {
		return m.Resources
	}
	return ComputeResources{}
}

type ProfilePlacement struct {
	Attributes placementAttributes `protobuf:"bytes,1,rep,name=attributes,proto3,castrepeated=placementAttributes" json:"attributes" yaml:"attributes"`
	SignedBy   v1beta3.SignedBy    `protobuf:"bytes,2,opt,name=signed_by,json=signedBy,proto3" json:"signedBy" yaml:"signedBy"`
	Pricing    map[string]Coin     `protobuf:"bytes,3,rep,name=pricing,proto3" json:"pricing" yaml:"pricing" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ProfilePlacement) Reset()         { *m = ProfilePlacement{} }
func (m *ProfilePlacement) String() string { return proto.CompactTextString(m) }
func (*ProfilePlacement) ProtoMessage()    {}
func (*ProfilePlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d552ef2e33c3e5a, []int{1}
}
func (m *ProfilePlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProfilePlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProfilePlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProfilePlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfilePlacement.Merge(m, src)
}
func (m *ProfilePlacement) XXX_Size() int {
	return m.Size()
}
func (m *ProfilePlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfilePlacement.DiscardUnknown(m)
}

var xxx_messageInfo_ProfilePlacement proto.InternalMessageInfo

func (m *ProfilePlacement) GetAttributes() placementAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ProfilePlacement) GetSignedBy() v1beta3.SignedBy {
	if m != nil {
		return m.SignedBy
	}
	return v1beta3.SignedBy{}
}

func (m *ProfilePlacement) GetPricing() map[string]Coin {
	if m != nil {
		return m.Pricing
	}
	return nil
}

type Profiles struct {
	Compute   map[string]*ProfileCompute   `protobuf:"bytes,1,rep,name=compute,proto3" json:"compute" yaml:"compute" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Placement map[string]*ProfilePlacement `protobuf:"bytes,2,rep,name=placement,proto3" json:"placement" yaml:"placement" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Profiles) Reset()         { *m = Profiles{} }
func (m *Profiles) String() string { return proto.CompactTextString(m) }
func (*Profiles) ProtoMessage()    {}
func (*Profiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d552ef2e33c3e5a, []int{2}
}
func (m *Profiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Profiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Profiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Profiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profiles.Merge(m, src)
}
func (m *Profiles) XXX_Size() int {
	return m.Size()
}
func (m *Profiles) XXX_DiscardUnknown() {
	xxx_messageInfo_Profiles.DiscardUnknown(m)
}

var xxx_messageInfo_Profiles proto.InternalMessageInfo

func (m *Profiles) GetCompute() map[string]*ProfileCompute {
	if m != nil {
		return m.Compute
	}
	return nil
}

func (m *Profiles) GetPlacement() map[string]*ProfilePlacement {
	if m != nil {
		return m.Placement
	}
	return nil
}

func init() {
	proto.RegisterType((*ProfileCompute)(nil), "akash.sdl.v2.ProfileCompute")
	proto.RegisterType((*ProfilePlacement)(nil), "akash.sdl.v2.ProfilePlacement")
	proto.RegisterMapType((map[string]Coin)(nil), "akash.sdl.v2.ProfilePlacement.PricingEntry")
	proto.RegisterType((*Profiles)(nil), "akash.sdl.v2.Profiles")
	proto.RegisterMapType((map[string]*ProfileCompute)(nil), "akash.sdl.v2.Profiles.ComputeEntry")
	proto.RegisterMapType((map[string]*ProfilePlacement)(nil), "akash.sdl.v2.Profiles.PlacementEntry")
}

func init() { proto.RegisterFile("akash/sdl/v2/profiles.proto", fileDescriptor_0d552ef2e33c3e5a) }

var fileDescriptor_0d552ef2e33c3e5a = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x31, 0x8f, 0xd3, 0x4c,
	0x10, 0x8d, 0x13, 0x7d, 0x5f, 0x92, 0xbd, 0x28, 0x04, 0x83, 0x44, 0x64, 0x0e, 0x1b, 0x2d, 0x20,
	0x45, 0xe2, 0xb0, 0x85, 0x8f, 0x02, 0x5d, 0x87, 0x11, 0x54, 0x08, 0x45, 0xa6, 0x41, 0x08, 0xe9,
	0x64, 0x27, 0x8b, 0xcf, 0xc4, 0xb1, 0x2d, 0xaf, 0x13, 0x94, 0x96, 0x96, 0x86, 0x9f, 0x40, 0xcd,
	0x2f, 0xb9, 0xf2, 0xe8, 0xa8, 0x0c, 0x4a, 0xba, 0x94, 0xf9, 0x05, 0xc8, 0xde, 0xd9, 0xb5, 0x13,
	0x19, 0xba, 0xcd, 0x9b, 0xb7, 0x6f, 0xde, 0xbc, 0x9d, 0x18, 0xdd, 0x76, 0x66, 0x0e, 0xbd, 0x30,
	0xe8, 0x34, 0x30, 0x96, 0xa6, 0x11, 0x27, 0xd1, 0x07, 0x3f, 0x20, 0x54, 0x8f, 0x93, 0x28, 0x8d,
	0xe4, 0x5e, 0x51, 0xd4, 0xe9, 0x34, 0xd0, 0x97, 0xa6, 0x72, 0xd3, 0x8b, 0xbc, 0xa8, 0x28, 0x18,
	0xf9, 0x89, 0x71, 0x14, 0xcc, 0x04, 0x5c, 0x87, 0x12, 0x63, 0xf9, 0xd8, 0x25, 0xa9, 0x73, 0x6a,
	0x38, 0x69, 0x9a, 0xf8, 0xee, 0x22, 0x25, 0xc0, 0xb9, 0xbf, 0xd7, 0x64, 0x12, 0xcd, 0xe3, 0x45,
	0x4a, 0xce, 0x13, 0x42, 0xa3, 0x45, 0x32, 0xe1, 0xdd, 0x94, 0x5b, 0x07, 0x2c, 0x3f, 0x64, 0x05,
	0xfc, 0x59, 0x42, 0xfd, 0x31, 0x73, 0xf6, 0x9c, 0xdd, 0x95, 0x63, 0xd4, 0x15, 0xd7, 0x87, 0xd2,
	0x5d, 0x69, 0x74, 0x64, 0xaa, 0x7a, 0xd5, 0xad, 0x0e, 0x4c, 0x9b, 0xb3, 0x2c, 0xf3, 0x32, 0xd3,
	0x1a, 0xeb, 0x4c, 0xeb, 0x0a, 0x68, 0x9b, 0x69, 0xa5, 0xca, 0x2e, 0xd3, 0x06, 0x2b, 0x67, 0x1e,
	0x9c, 0x61, 0x01, 0x61, 0xbb, 0x2c, 0xe3, 0x1f, 0x2d, 0x34, 0x00, 0x13, 0xe3, 0xc0, 0x99, 0x90,
	0x39, 0x09, 0x53, 0xf9, 0x8b, 0x84, 0x90, 0x18, 0x36, 0x37, 0xd2, 0x1a, 0x1d, 0x99, 0x77, 0xc0,
	0x48, 0x1e, 0x89, 0x0e, 0x91, 0xe8, 0xcf, 0x38, 0xcb, 0x7a, 0x05, 0x3e, 0x90, 0x80, 0x72, 0x23,
	0x15, 0x99, 0x5d, 0xa6, 0x5d, 0x67, 0x4e, 0x4a, 0x0c, 0x7f, 0xff, 0xa5, 0xdd, 0x88, 0x79, 0xdf,
	0xf2, 0xa6, 0x5d, 0xb9, 0x27, 0x7f, 0x44, 0x5d, 0xea, 0x7b, 0x21, 0x99, 0x9e, 0xbb, 0xab, 0x61,
	0xb3, 0x08, 0xe5, 0xb8, 0xce, 0xcb, 0x9b, 0x82, 0x64, 0xad, 0x2c, 0x03, 0xac, 0x74, 0x38, 0xb2,
	0xcd, 0xb4, 0x0e, 0x85, 0xf3, 0x2e, 0xd3, 0xae, 0x31, 0x1b, 0x1c, 0xc1, 0xb6, 0x28, 0xca, 0x14,
	0xb5, 0xe3, 0xc4, 0x9f, 0xf8, 0xa1, 0x37, 0x6c, 0x15, 0x53, 0x3f, 0xdc, 0x8f, 0xff, 0x30, 0x2a,
	0x7d, 0xcc, 0xd8, 0x2f, 0xc2, 0x34, 0x59, 0x59, 0x27, 0xd0, 0xb8, 0x0d, 0xe8, 0x36, 0xd3, 0xb8,
	0xdc, 0x2e, 0xd3, 0xfa, 0xac, 0x2d, 0x00, 0xd8, 0xe6, 0x25, 0xe5, 0x35, 0xea, 0x55, 0x65, 0xe4,
	0x01, 0x6a, 0xcd, 0xc8, 0xaa, 0x78, 0xff, 0xae, 0x9d, 0x1f, 0xe5, 0x11, 0xfa, 0x6f, 0xe9, 0x04,
	0x0b, 0x02, 0xe3, 0xcb, 0x87, 0x3b, 0xe1, 0x87, 0x36, 0x23, 0x9c, 0x35, 0x9f, 0x4a, 0xf8, 0x5b,
	0x0b, 0x75, 0xc0, 0x28, 0x95, 0x3d, 0xd4, 0x86, 0xcd, 0x84, 0x77, 0xbc, 0x57, 0x3b, 0x11, 0xe5,
	0x9b, 0xc5, 0x26, 0x19, 0xe5, 0x53, 0x00, 0x92, 0x4f, 0x01, 0x12, 0xe5, 0x14, 0x00, 0x60, 0x9b,
	0x97, 0x64, 0x8a, 0xba, 0xe2, 0x25, 0x87, 0xcd, 0xa2, 0xd5, 0x83, 0xbf, 0xb4, 0x12, 0xf1, 0xb1,
	0x66, 0x7a, 0xbe, 0xbe, 0x02, 0xcb, 0xd7, 0x57, 0x08, 0x95, 0xeb, 0x2b, 0x20, 0x6c, 0x97, 0x65,
	0xe5, 0x2d, 0xea, 0x55, 0x7d, 0xd7, 0x44, 0x67, 0xee, 0x47, 0x77, 0x5c, 0x6b, 0x89, 0xff, 0xab,
	0xca, 0x10, 0x95, 0xf7, 0xa8, 0xbf, 0x6f, 0xb3, 0x46, 0xfb, 0xc9, 0xbe, 0xb6, 0xfa, 0xef, 0x5d,
	0xa9, 0xa8, 0x5b, 0x2f, 0x2f, 0xd7, 0xaa, 0x74, 0xb5, 0x56, 0xa5, 0xdf, 0x6b, 0x55, 0xfa, 0xba,
	0x51, 0x1b, 0x57, 0x1b, 0xb5, 0xf1, 0x73, 0xa3, 0x36, 0xde, 0x9d, 0x78, 0x7e, 0x7a, 0xb1, 0x70,
	0xf5, 0x49, 0x34, 0x37, 0x0a, 0xb9, 0x47, 0x21, 0x49, 0x3f, 0x45, 0xc9, 0x0c, 0x7e, 0x39, 0xb1,
	0x6f, 0x78, 0x11, 0x7c, 0x4e, 0xdc, 0xff, 0x8b, 0x4f, 0xc9, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0x78, 0x79, 0x5d, 0xf0, 0x04, 0x00, 0x00,
}

func (m *ProfileCompute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileCompute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfileCompute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProfiles(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProfilePlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfilePlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProfilePlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pricing) > 0 {
		for k := range m.Pricing {
			v := m.Pricing[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProfiles(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProfiles(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProfiles(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.SignedBy.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProfiles(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProfiles(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Profiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Profiles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Profiles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Placement) > 0 {
		for k := range m.Placement {
			v := m.Placement[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintProfiles(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProfiles(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProfiles(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Compute) > 0 {
		for k := range m.Compute {
			v := m.Compute[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintProfiles(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProfiles(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProfiles(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfiles(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfiles(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProfileCompute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Resources.Size()
	n += 1 + l + sovProfiles(uint64(l))
	return n
}

func (m *ProfilePlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovProfiles(uint64(l))
		}
	}
	l = m.SignedBy.Size()
	n += 1 + l + sovProfiles(uint64(l))
	if len(m.Pricing) > 0 {
		for k, v := range m.Pricing {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovProfiles(uint64(len(k))) + 1 + l + sovProfiles(uint64(l))
			n += mapEntrySize + 1 + sovProfiles(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Profiles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Compute) > 0 {
		for k, v := range m.Compute {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProfiles(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProfiles(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProfiles(uint64(mapEntrySize))
		}
	}
	if len(m.Placement) > 0 {
		for k, v := range m.Placement {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovProfiles(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovProfiles(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovProfiles(uint64(mapEntrySize))
		}
	}
	return n
}

func sovProfiles(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfiles(x uint64) (n int) {
	return sovProfiles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProfileCompute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileCompute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileCompute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfilePlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfilePlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfilePlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1beta3.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SignedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pricing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pricing == nil {
				m.Pricing = make(map[string]Coin)
			}
			var mapkey string
			mapvalue := &Coin{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProfiles
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProfiles
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProfiles
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Coin{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProfiles(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProfiles
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pricing[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compute == nil {
				m.Compute = make(map[string]*ProfileCompute)
			}
			var mapkey string
			var mapvalue *ProfileCompute
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProfiles
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProfiles
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProfiles
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProfileCompute{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProfiles(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProfiles
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Compute[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfiles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfiles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placement == nil {
				m.Placement = make(map[string]*ProfilePlacement)
			}
			var mapkey string
			var mapvalue *ProfilePlacement
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProfiles
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProfiles
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProfiles
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthProfiles
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthProfiles
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProfilePlacement{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProfiles(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProfiles
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Placement[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProfiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfiles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfiles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfiles
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfiles
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfiles
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfiles        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfiles          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfiles = fmt.Errorf("proto: unexpected end of group")
)
