// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/staking/v1beta1/staking.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import type { Any, AnyJson, Duration, DurationJson, Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import type { Coin, CoinJson } from "../../base/v1beta1/coin_pb.ts";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb.ts";
import { file_amino_amino } from "../../../amino/amino_pb.ts";
import type { Header, HeaderJson } from "../../../tendermint/types/types_pb.ts";
import { file_tendermint_types_types } from "../../../tendermint/types/types_pb.ts";
import type { ValidatorUpdate, ValidatorUpdateJson } from "../../../tendermint/abci/types_pb.ts";
import { file_tendermint_abci_types } from "../../../tendermint/abci/types_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/staking/v1beta1/staking.proto.
 */
export const file_cosmos_staking_v1beta1_staking: GenFile = /*@__PURE__*/
  fileDesc("CiRjb3Ntb3Mvc3Rha2luZy92MWJldGExL3N0YWtpbmcucHJvdG8SFmNvc21vcy5zdGFraW5nLnYxYmV0YTEigwEKDkhpc3RvcmljYWxJbmZvEjMKBmhlYWRlchgBIAEoCzIYLnRlbmRlcm1pbnQudHlwZXMuSGVhZGVyQgnI3h8AqOewKgESPAoGdmFsc2V0GAIgAygLMiEuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5WYWxpZGF0b3JCCcjeHwCo57AqASKOAgoPQ29tbWlzc2lvblJhdGVzEkoKBHJhdGUYASABKAlCPMjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5EZWPStC0KY29zbW9zLkRlYxJOCghtYXhfcmF0ZRgCIAEoCUI8yN4fANreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkRlY9K0LQpjb3Ntb3MuRGVjElUKD21heF9jaGFuZ2VfcmF0ZRgDIAEoCUI8yN4fANreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkRlY9K0LQpjb3Ntb3MuRGVjOgiYoB8A6KAfASKoAQoKQ29tbWlzc2lvbhJQChBjb21taXNzaW9uX3JhdGVzGAEgASgLMicuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Db21taXNzaW9uUmF0ZXNCDcjeHwDQ3h8BqOewKgESPgoLdXBkYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQg3I3h8AkN8fAajnsCoBOgiYoB8A6KAfASJ2CgtEZXNjcmlwdGlvbhIPCgdtb25pa2VyGAEgASgJEhAKCGlkZW50aXR5GAIgASgJEg8KB3dlYnNpdGUYAyABKAkSGAoQc2VjdXJpdHlfY29udGFjdBgEIAEoCRIPCgdkZXRhaWxzGAUgASgJOgiYoB8A6KAfASLNBwoJVmFsaWRhdG9yEjIKEG9wZXJhdG9yX2FkZHJlc3MYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJIChBjb25zZW5zdXNfcHVia2V5GAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIYyrQtFGNvc21vcy5jcnlwdG8uUHViS2V5Eg4KBmphaWxlZBgDIAEoCBIyCgZzdGF0dXMYBCABKA4yIi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkJvbmRTdGF0dXMSTAoGdG9rZW5zGAUgASgJQjzI3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuSW500rQtCmNvc21vcy5JbnQSVgoQZGVsZWdhdG9yX3NoYXJlcxgGIAEoCUI8yN4fANreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkRlY9K0LQpjb3Ntb3MuRGVjEkMKC2Rlc2NyaXB0aW9uGAcgASgLMiMuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5EZXNjcmlwdGlvbkIJyN4fAKjnsCoBEhgKEHVuYm9uZGluZ19oZWlnaHQYCCABKAMSQQoOdW5ib25kaW5nX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQg3I3h8AkN8fAajnsCoBEkEKCmNvbW1pc3Npb24YCiABKAsyIi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkNvbW1pc3Npb25CCcjeHwCo57AqARJbChNtaW5fc2VsZl9kZWxlZ2F0aW9uGAsgASgJQj4YAcjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5JbnTStC0KY29zbW9zLkludBIjCht1bmJvbmRpbmdfb25faG9sZF9yZWZfY291bnQYDCABKAMSFQoNdW5ib25kaW5nX2lkcxgNIAMoBBJtChV2YWxpZGF0b3JfYm9uZF9zaGFyZXMYDiABKAlCTsjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5EZWPy3h8ceWFtbDoidmFsaWRhdG9yX2JvbmRfc2hhcmVzIhJdCg1saXF1aWRfc2hhcmVzGA8gASgJQkbI3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVj8t4fFHlhbWw6ImxpcXVpZF9zaGFyZXMiOgyIoB8AmKAfAOigHwAiRQoMVmFsQWRkcmVzc2VzEisKCWFkZHJlc3NlcxgBIAMoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nOgiYoB8AgNwgASKAAQoGRFZQYWlyEjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSMwoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZzoMiKAfAJigHwDooB8AIkMKB0RWUGFpcnMSOAoFcGFpcnMYASADKAsyHi5jb3Ntb3Muc3Rha2luZy52MWJldGExLkRWUGFpckIJyN4fAKjnsCoBIsEBCgpEVlZUcmlwbGV0EjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSNwoVdmFsaWRhdG9yX3NyY19hZGRyZXNzGAIgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSNwoVdmFsaWRhdG9yX2RzdF9hZGRyZXNzGAMgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmc6DIigHwCYoB8A6KAfACJOCgtEVlZUcmlwbGV0cxI/Cgh0cmlwbGV0cxgBIAMoCzIiLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuRFZWVHJpcGxldEIJyN4fAKjnsCoBIuoBCgpEZWxlZ2F0aW9uEjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSMwoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJMCgZzaGFyZXMYAyABKAlCPMjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5EZWPStC0KY29zbW9zLkRlYxIWCg52YWxpZGF0b3JfYm9uZBgEIAEoCDoMiKAfAJigHwDooB8AItsBChNVbmJvbmRpbmdEZWxlZ2F0aW9uEjMKEWRlbGVnYXRvcl9hZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSMwoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJMCgdlbnRyaWVzGAMgAygLMjAuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5VbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnlCCcjeHwCo57AqAToMiKAfAJigHwDooB8AIuICChhVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkSFwoPY3JlYXRpb25faGVpZ2h0GAEgASgDEkIKD2NvbXBsZXRpb25fdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDcjeHwCQ3x8BqOewKgESVQoPaW5pdGlhbF9iYWxhbmNlGAMgASgJQjzI3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuSW500rQtCmNvc21vcy5JbnQSTQoHYmFsYW5jZRgEIAEoCUI8yN4fANreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkludNK0LQpjb3Ntb3MuSW50EhQKDHVuYm9uZGluZ19pZBgFIAEoBBIjCht1bmJvbmRpbmdfb25faG9sZF9yZWZfY291bnQYBiABKAM6CJigHwDooB8BIt4CChFSZWRlbGVnYXRpb25FbnRyeRIXCg9jcmVhdGlvbl9oZWlnaHQYASABKAMSQgoPY29tcGxldGlvbl90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEINyN4fAJDfHwGo57AqARJVCg9pbml0aWFsX2JhbGFuY2UYAyABKAlCPMjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5JbnTStC0KY29zbW9zLkludBJQCgpzaGFyZXNfZHN0GAQgASgJQjzI3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVj0rQtCmNvc21vcy5EZWMSFAoMdW5ib25kaW5nX2lkGAUgASgEEiMKG3VuYm9uZGluZ19vbl9ob2xkX3JlZl9jb3VudBgGIAEoAzoImKAfAOigHwEiigIKDFJlZGVsZWdhdGlvbhIzChFkZWxlZ2F0b3JfYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEjcKFXZhbGlkYXRvcl9zcmNfYWRkcmVzcxgCIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEjcKFXZhbGlkYXRvcl9kc3RfYWRkcmVzcxgDIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEkUKB2VudHJpZXMYBCADKAsyKS5jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvbkVudHJ5QgnI3h8AqOewKgE6DIigHwCYoB8A6KAfACKfBQoGUGFyYW1zEkAKDnVuYm9uZGluZ190aW1lGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQg3I3h8AmN8fAajnsCoBEhYKDm1heF92YWxpZGF0b3JzGAIgASgNEhMKC21heF9lbnRyaWVzGAMgASgNEhoKEmhpc3RvcmljYWxfZW50cmllcxgEIAEoDRISCgpib25kX2Rlbm9tGAUgASgJEmkKE21pbl9jb21taXNzaW9uX3JhdGUYBiABKAlCTMjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5EZWPy3h8aeWFtbDoibWluX2NvbW1pc3Npb25fcmF0ZSISbQoVdmFsaWRhdG9yX2JvbmRfZmFjdG9yGAcgASgJQk7I3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVj8t4fHHlhbWw6InZhbGlkYXRvcl9ib25kX2ZhY3RvciISdQoZZ2xvYmFsX2xpcXVpZF9zdGFraW5nX2NhcBgIIAEoCUJSyN4fANreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5cGVzLkRlY/LeHyB5YW1sOiJnbG9iYWxfbGlxdWlkX3N0YWtpbmdfY2FwIhJ7Chx2YWxpZGF0b3JfbGlxdWlkX3N0YWtpbmdfY2FwGAkgASgJQlXI3h8A2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVj8t4fI3lhbWw6InZhbGlkYXRvcl9saXF1aWRfc3Rha2luZ19jYXAiOiiYoB8A6KAfAYrnsCobY29zbW9zLXNkay94L3N0YWtpbmcvUGFyYW1zIpgBChJEZWxlZ2F0aW9uUmVzcG9uc2USQQoKZGVsZWdhdGlvbhgBIAEoCzIiLmNvc21vcy5zdGFraW5nLnYxYmV0YTEuRGVsZWdhdGlvbkIJyN4fAKjnsCoBEjUKB2JhbGFuY2UYAiABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CCcjeHwCo57AqAToImKAfAOigHwAiwgEKGVJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2USUAoScmVkZWxlZ2F0aW9uX2VudHJ5GAEgASgLMikuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeUIJyN4fAKjnsCoBEk0KB2JhbGFuY2UYBCABKAlCPMjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5JbnTStC0KY29zbW9zLkludDoE6KAfASKyAQoUUmVkZWxlZ2F0aW9uUmVzcG9uc2USRQoMcmVkZWxlZ2F0aW9uGAEgASgLMiQuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25CCcjeHwCo57AqARJNCgdlbnRyaWVzGAIgAygLMjEuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlQgnI3h8AqOewKgE6BOigHwAi7gEKBFBvb2wScQoRbm90X2JvbmRlZF90b2tlbnMYASABKAlCVsjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5JbnTq3h8Rbm90X2JvbmRlZF90b2tlbnPStC0KY29zbW9zLkludKjnsCoBEmkKDWJvbmRlZF90b2tlbnMYAiABKAlCUsjeHwDa3h8mZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5JbnTq3h8NYm9uZGVkX3Rva2Vuc9K0LQpjb3Ntb3MuSW50qOewKgE6COigHwHwoB8BIlAKEFZhbGlkYXRvclVwZGF0ZXMSPAoHdXBkYXRlcxgBIAMoCzIgLnRlbmRlcm1pbnQuYWJjaS5WYWxpZGF0b3JVcGRhdGVCCcjeHwCo57AqASJhChNUb2tlbml6ZVNoYXJlUmVjb3JkEgoKAmlkGAEgASgEEg0KBW93bmVyGAIgASgJEhYKDm1vZHVsZV9hY2NvdW50GAMgASgJEhEKCXZhbGlkYXRvchgEIAEoCToE6KAfASI3CiJQZW5kaW5nVG9rZW5pemVTaGFyZUF1dGhvcml6YXRpb25zEhEKCWFkZHJlc3NlcxgBIAMoCSq2AQoKQm9uZFN0YXR1cxIsChdCT05EX1NUQVRVU19VTlNQRUNJRklFRBAAGg+KnSALVW5zcGVjaWZpZWQSJgoUQk9ORF9TVEFUVVNfVU5CT05ERUQQARoMip0gCFVuYm9uZGVkEigKFUJPTkRfU1RBVFVTX1VOQk9ORElORxACGg2KnSAJVW5ib25kaW5nEiIKEkJPTkRfU1RBVFVTX0JPTkRFRBADGgqKnSAGQm9uZGVkGgSIox4AKl0KCkluZnJhY3Rpb24SGgoWSU5GUkFDVElPTl9VTlNQRUNJRklFRBAAEhoKFklORlJBQ1RJT05fRE9VQkxFX1NJR04QARIXChNJTkZSQUNUSU9OX0RPV05USU1FEAIqyQEKF1Rva2VuaXplU2hhcmVMb2NrU3RhdHVzEioKJlRPS0VOSVpFX1NIQVJFX0xPQ0tfU1RBVFVTX1VOU1BFQ0lGSUVEEAASJQohVE9LRU5JWkVfU0hBUkVfTE9DS19TVEFUVVNfTE9DS0VEEAESJwojVE9LRU5JWkVfU0hBUkVfTE9DS19TVEFUVVNfVU5MT0NLRUQQAhIsCihUT0tFTklaRV9TSEFSRV9MT0NLX1NUQVRVU19MT0NLX0VYUElSSU5HEAMaBIijHgBCLlosZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L3N0YWtpbmcvdHlwZXNiBnByb3RvMw", [file_gogoproto_gogo, file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_timestamp, file_cosmos_proto_cosmos, file_cosmos_base_v1beta1_coin, file_amino_amino, file_tendermint_types_types, file_tendermint_abci_types]);

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from message cosmos.staking.v1beta1.HistoricalInfo
 */
export type HistoricalInfo = Message<"cosmos.staking.v1beta1.HistoricalInfo"> & {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.Validator valset = 2;
   */
  valset: Validator[];
};

/**
 * HistoricalInfo contains header and validator information for a given block.
 * It is stored as part of staking module's state, which persists the `n` most
 * recent HistoricalInfo
 * (`n` is set by the staking module's `historical_entries` parameter).
 *
 * @generated from message cosmos.staking.v1beta1.HistoricalInfo
 */
export type HistoricalInfoJson = {
  /**
   * @generated from field: tendermint.types.Header header = 1;
   */
  header?: HeaderJson;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.Validator valset = 2;
   */
  valset?: ValidatorJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.HistoricalInfo.
 * Use `create(HistoricalInfoSchema)` to create a new message.
 */
export const HistoricalInfoSchema: GenMessage<HistoricalInfo, HistoricalInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 0);

/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from message cosmos.staking.v1beta1.CommissionRates
 */
export type CommissionRates = Message<"cosmos.staking.v1beta1.CommissionRates"> & {
  /**
   * rate is the commission rate charged to delegators, as a fraction.
   *
   * @generated from field: string rate = 1;
   */
  rate: string;

  /**
   * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
   *
   * @generated from field: string max_rate = 2;
   */
  maxRate: string;

  /**
   * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
   *
   * @generated from field: string max_change_rate = 3;
   */
  maxChangeRate: string;
};

/**
 * CommissionRates defines the initial commission rates to be used for creating
 * a validator.
 *
 * @generated from message cosmos.staking.v1beta1.CommissionRates
 */
export type CommissionRatesJson = {
  /**
   * rate is the commission rate charged to delegators, as a fraction.
   *
   * @generated from field: string rate = 1;
   */
  rate?: string;

  /**
   * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
   *
   * @generated from field: string max_rate = 2;
   */
  maxRate?: string;

  /**
   * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
   *
   * @generated from field: string max_change_rate = 3;
   */
  maxChangeRate?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.CommissionRates.
 * Use `create(CommissionRatesSchema)` to create a new message.
 */
export const CommissionRatesSchema: GenMessage<CommissionRates, CommissionRatesJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 1);

/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from message cosmos.staking.v1beta1.Commission
 */
export type Commission = Message<"cosmos.staking.v1beta1.Commission"> & {
  /**
   * commission_rates defines the initial commission rates to be used for creating a validator.
   *
   * @generated from field: cosmos.staking.v1beta1.CommissionRates commission_rates = 1;
   */
  commissionRates?: CommissionRates;

  /**
   * update_time is the last time the commission rate was changed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;
};

/**
 * Commission defines commission parameters for a given validator.
 *
 * @generated from message cosmos.staking.v1beta1.Commission
 */
export type CommissionJson = {
  /**
   * commission_rates defines the initial commission rates to be used for creating a validator.
   *
   * @generated from field: cosmos.staking.v1beta1.CommissionRates commission_rates = 1;
   */
  commissionRates?: CommissionRatesJson;

  /**
   * update_time is the last time the commission rate was changed.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: TimestampJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.Commission.
 * Use `create(CommissionSchema)` to create a new message.
 */
export const CommissionSchema: GenMessage<Commission, CommissionJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 2);

/**
 * Description defines a validator description.
 *
 * @generated from message cosmos.staking.v1beta1.Description
 */
export type Description = Message<"cosmos.staking.v1beta1.Description"> & {
  /**
   * moniker defines a human-readable name for the validator.
   *
   * @generated from field: string moniker = 1;
   */
  moniker: string;

  /**
   * identity defines an optional identity signature (ex. UPort or Keybase).
   *
   * @generated from field: string identity = 2;
   */
  identity: string;

  /**
   * website defines an optional website link.
   *
   * @generated from field: string website = 3;
   */
  website: string;

  /**
   * security_contact defines an optional email for security contact.
   *
   * @generated from field: string security_contact = 4;
   */
  securityContact: string;

  /**
   * details define other optional details.
   *
   * @generated from field: string details = 5;
   */
  details: string;
};

/**
 * Description defines a validator description.
 *
 * @generated from message cosmos.staking.v1beta1.Description
 */
export type DescriptionJson = {
  /**
   * moniker defines a human-readable name for the validator.
   *
   * @generated from field: string moniker = 1;
   */
  moniker?: string;

  /**
   * identity defines an optional identity signature (ex. UPort or Keybase).
   *
   * @generated from field: string identity = 2;
   */
  identity?: string;

  /**
   * website defines an optional website link.
   *
   * @generated from field: string website = 3;
   */
  website?: string;

  /**
   * security_contact defines an optional email for security contact.
   *
   * @generated from field: string security_contact = 4;
   */
  securityContact?: string;

  /**
   * details define other optional details.
   *
   * @generated from field: string details = 5;
   */
  details?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Description.
 * Use `create(DescriptionSchema)` to create a new message.
 */
export const DescriptionSchema: GenMessage<Description, DescriptionJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 3);

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from message cosmos.staking.v1beta1.Validator
 */
export type Validator = Message<"cosmos.staking.v1beta1.Validator"> & {
  /**
   * operator_address defines the address of the validator's operator; bech encoded in JSON.
   *
   * @generated from field: string operator_address = 1;
   */
  operatorAddress: string;

  /**
   * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
   *
   * @generated from field: google.protobuf.Any consensus_pubkey = 2;
   */
  consensusPubkey?: Any;

  /**
   * jailed defined whether the validator has been jailed from bonded status or not.
   *
   * @generated from field: bool jailed = 3;
   */
  jailed: boolean;

  /**
   * status is the validator status (bonded/unbonding/unbonded).
   *
   * @generated from field: cosmos.staking.v1beta1.BondStatus status = 4;
   */
  status: BondStatus;

  /**
   * tokens define the delegated tokens (incl. self-delegation).
   *
   * @generated from field: string tokens = 5;
   */
  tokens: string;

  /**
   * delegator_shares defines total shares issued to a validator's delegators.
   *
   * @generated from field: string delegator_shares = 6;
   */
  delegatorShares: string;

  /**
   * description defines the description terms for the validator.
   *
   * @generated from field: cosmos.staking.v1beta1.Description description = 7;
   */
  description?: Description;

  /**
   * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
   *
   * @generated from field: int64 unbonding_height = 8;
   */
  unbondingHeight: bigint;

  /**
   * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
   *
   * @generated from field: google.protobuf.Timestamp unbonding_time = 9;
   */
  unbondingTime?: Timestamp;

  /**
   * commission defines the commission parameters.
   *
   * @generated from field: cosmos.staking.v1beta1.Commission commission = 10;
   */
  commission?: Commission;

  /**
   * Deprecated: This field has been deprecated with LSM in favor of the validator bond
   *
   * @generated from field: string min_self_delegation = 11 [deprecated = true];
   * @deprecated
   */
  minSelfDelegation: string;

  /**
   * strictly positive if this validator's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 12;
   */
  unbondingOnHoldRefCount: bigint;

  /**
   * list of unbonding ids, each uniquely identifing an unbonding of this validator
   *
   * @generated from field: repeated uint64 unbonding_ids = 13;
   */
  unbondingIds: bigint[];

  /**
   * Number of shares self bonded from the validator
   *
   * @generated from field: string validator_bond_shares = 14;
   */
  validatorBondShares: string;

  /**
   * Number of shares either tokenized or owned by a liquid staking provider
   *
   * @generated from field: string liquid_shares = 15;
   */
  liquidShares: string;
};

/**
 * Validator defines a validator, together with the total amount of the
 * Validator's bond shares and their exchange rate to coins. Slashing results in
 * a decrease in the exchange rate, allowing correct calculation of future
 * undelegations without iterating over delegators. When coins are delegated to
 * this validator, the validator is credited with a delegation whose number of
 * bond shares is based on the amount of coins delegated divided by the current
 * exchange rate. Voting power can be calculated as total bonded shares
 * multiplied by exchange rate.
 *
 * @generated from message cosmos.staking.v1beta1.Validator
 */
export type ValidatorJson = {
  /**
   * operator_address defines the address of the validator's operator; bech encoded in JSON.
   *
   * @generated from field: string operator_address = 1;
   */
  operatorAddress?: string;

  /**
   * consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
   *
   * @generated from field: google.protobuf.Any consensus_pubkey = 2;
   */
  consensusPubkey?: AnyJson;

  /**
   * jailed defined whether the validator has been jailed from bonded status or not.
   *
   * @generated from field: bool jailed = 3;
   */
  jailed?: boolean;

  /**
   * status is the validator status (bonded/unbonding/unbonded).
   *
   * @generated from field: cosmos.staking.v1beta1.BondStatus status = 4;
   */
  status?: BondStatusJson;

  /**
   * tokens define the delegated tokens (incl. self-delegation).
   *
   * @generated from field: string tokens = 5;
   */
  tokens?: string;

  /**
   * delegator_shares defines total shares issued to a validator's delegators.
   *
   * @generated from field: string delegator_shares = 6;
   */
  delegatorShares?: string;

  /**
   * description defines the description terms for the validator.
   *
   * @generated from field: cosmos.staking.v1beta1.Description description = 7;
   */
  description?: DescriptionJson;

  /**
   * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
   *
   * @generated from field: int64 unbonding_height = 8;
   */
  unbondingHeight?: string;

  /**
   * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
   *
   * @generated from field: google.protobuf.Timestamp unbonding_time = 9;
   */
  unbondingTime?: TimestampJson;

  /**
   * commission defines the commission parameters.
   *
   * @generated from field: cosmos.staking.v1beta1.Commission commission = 10;
   */
  commission?: CommissionJson;

  /**
   * Deprecated: This field has been deprecated with LSM in favor of the validator bond
   *
   * @generated from field: string min_self_delegation = 11 [deprecated = true];
   * @deprecated
   */
  minSelfDelegation?: string;

  /**
   * strictly positive if this validator's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 12;
   */
  unbondingOnHoldRefCount?: string;

  /**
   * list of unbonding ids, each uniquely identifing an unbonding of this validator
   *
   * @generated from field: repeated uint64 unbonding_ids = 13;
   */
  unbondingIds?: string[];

  /**
   * Number of shares self bonded from the validator
   *
   * @generated from field: string validator_bond_shares = 14;
   */
  validatorBondShares?: string;

  /**
   * Number of shares either tokenized or owned by a liquid staking provider
   *
   * @generated from field: string liquid_shares = 15;
   */
  liquidShares?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Validator.
 * Use `create(ValidatorSchema)` to create a new message.
 */
export const ValidatorSchema: GenMessage<Validator, ValidatorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 4);

/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.ValAddresses
 */
export type ValAddresses = Message<"cosmos.staking.v1beta1.ValAddresses"> & {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[];
};

/**
 * ValAddresses defines a repeated set of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.ValAddresses
 */
export type ValAddressesJson = {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses?: string[];
};

/**
 * Describes the message cosmos.staking.v1beta1.ValAddresses.
 * Use `create(ValAddressesSchema)` to create a new message.
 */
export const ValAddressesSchema: GenMessage<ValAddresses, ValAddressesJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 5);

/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVPair
 */
export type DVPair = Message<"cosmos.staking.v1beta1.DVPair"> & {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;
};

/**
 * DVPair is struct that just has a delegator-validator pair with no other data.
 * It is intended to be used as a marshalable pointer. For example, a DVPair can
 * be used to construct the key to getting an UnbondingDelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVPair
 */
export type DVPairJson = {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress?: string;

  /**
   * @generated from field: string validator_address = 2;
   */
  validatorAddress?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.DVPair.
 * Use `create(DVPairSchema)` to create a new message.
 */
export const DVPairSchema: GenMessage<DVPair, DVPairJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 6);

/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVPairs
 */
export type DVPairs = Message<"cosmos.staking.v1beta1.DVPairs"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVPair pairs = 1;
   */
  pairs: DVPair[];
};

/**
 * DVPairs defines an array of DVPair objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVPairs
 */
export type DVPairsJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVPair pairs = 1;
   */
  pairs?: DVPairJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.DVPairs.
 * Use `create(DVPairsSchema)` to create a new message.
 */
export const DVPairsSchema: GenMessage<DVPairs, DVPairsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 7);

/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplet
 */
export type DVVTriplet = Message<"cosmos.staking.v1beta1.DVVTriplet"> & {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress: string;

  /**
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress: string;
};

/**
 * DVVTriplet is struct that just has a delegator-validator-validator triplet
 * with no other data. It is intended to be used as a marshalable pointer. For
 * example, a DVVTriplet can be used to construct the key to getting a
 * Redelegation from state.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplet
 */
export type DVVTripletJson = {
  /**
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress?: string;

  /**
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress?: string;

  /**
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.DVVTriplet.
 * Use `create(DVVTripletSchema)` to create a new message.
 */
export const DVVTripletSchema: GenMessage<DVVTriplet, DVVTripletJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 8);

/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplets
 */
export type DVVTriplets = Message<"cosmos.staking.v1beta1.DVVTriplets"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1;
   */
  triplets: DVVTriplet[];
};

/**
 * DVVTriplets defines an array of DVVTriplet objects.
 *
 * @generated from message cosmos.staking.v1beta1.DVVTriplets
 */
export type DVVTripletsJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DVVTriplet triplets = 1;
   */
  triplets?: DVVTripletJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.DVVTriplets.
 * Use `create(DVVTripletsSchema)` to create a new message.
 */
export const DVVTripletsSchema: GenMessage<DVVTriplets, DVVTripletsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 9);

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from message cosmos.staking.v1beta1.Delegation
 */
export type Delegation = Message<"cosmos.staking.v1beta1.Delegation"> & {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;

  /**
   * shares define the delegation shares received.
   *
   * @generated from field: string shares = 3;
   */
  shares: string;

  /**
   * has this delegation been marked as a validator self bond.
   *
   * @generated from field: bool validator_bond = 4;
   */
  validatorBond: boolean;
};

/**
 * Delegation represents the bond with tokens held by an account. It is
 * owned by one delegator, and is associated with the voting power of one
 * validator.
 *
 * @generated from message cosmos.staking.v1beta1.Delegation
 */
export type DelegationJson = {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress?: string;

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress?: string;

  /**
   * shares define the delegation shares received.
   *
   * @generated from field: string shares = 3;
   */
  shares?: string;

  /**
   * has this delegation been marked as a validator self bond.
   *
   * @generated from field: bool validator_bond = 4;
   */
  validatorBond?: boolean;
};

/**
 * Describes the message cosmos.staking.v1beta1.Delegation.
 * Use `create(DelegationSchema)` to create a new message.
 */
export const DelegationSchema: GenMessage<Delegation, DelegationJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 10);

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegation
 */
export type UnbondingDelegation = Message<"cosmos.staking.v1beta1.UnbondingDelegation"> & {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress: string;

  /**
   * entries are the unbonding delegation entries.
   *
   * unbonding delegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3;
   */
  entries: UnbondingDelegationEntry[];
};

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single validator in an time-ordered list.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegation
 */
export type UnbondingDelegationJson = {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress?: string;

  /**
   * validator_address is the bech32-encoded address of the validator.
   *
   * @generated from field: string validator_address = 2;
   */
  validatorAddress?: string;

  /**
   * entries are the unbonding delegation entries.
   *
   * unbonding delegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3;
   */
  entries?: UnbondingDelegationEntryJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.UnbondingDelegation.
 * Use `create(UnbondingDelegationSchema)` to create a new message.
 */
export const UnbondingDelegationSchema: GenMessage<UnbondingDelegation, UnbondingDelegationJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 11);

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export type UnbondingDelegationEntry = Message<"cosmos.staking.v1beta1.UnbondingDelegationEntry"> & {
  /**
   * creation_height is the height which the unbonding took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight: bigint;

  /**
   * completion_time is the unix time for unbonding completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * initial_balance defines the tokens initially scheduled to receive at completion.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance: string;

  /**
   * balance defines the tokens to receive at completion.
   *
   * @generated from field: string balance = 4;
   */
  balance: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId: bigint;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount: bigint;
};

/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.UnbondingDelegationEntry
 */
export type UnbondingDelegationEntryJson = {
  /**
   * creation_height is the height which the unbonding took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight?: string;

  /**
   * completion_time is the unix time for unbonding completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: TimestampJson;

  /**
   * initial_balance defines the tokens initially scheduled to receive at completion.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance?: string;

  /**
   * balance defines the tokens to receive at completion.
   *
   * @generated from field: string balance = 4;
   */
  balance?: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId?: string;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.UnbondingDelegationEntry.
 * Use `create(UnbondingDelegationEntrySchema)` to create a new message.
 */
export const UnbondingDelegationEntrySchema: GenMessage<UnbondingDelegationEntry, UnbondingDelegationEntryJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 12);

/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntry
 */
export type RedelegationEntry = Message<"cosmos.staking.v1beta1.RedelegationEntry"> & {
  /**
   * creation_height  defines the height which the redelegation took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight: bigint;

  /**
   * completion_time defines the unix time for redelegation completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: Timestamp;

  /**
   * initial_balance defines the initial balance when redelegation started.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance: string;

  /**
   * shares_dst is the amount of destination-validator shares created by redelegation.
   *
   * @generated from field: string shares_dst = 4;
   */
  sharesDst: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId: bigint;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount: bigint;
};

/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntry
 */
export type RedelegationEntryJson = {
  /**
   * creation_height  defines the height which the redelegation took place.
   *
   * @generated from field: int64 creation_height = 1;
   */
  creationHeight?: string;

  /**
   * completion_time defines the unix time for redelegation completion.
   *
   * @generated from field: google.protobuf.Timestamp completion_time = 2;
   */
  completionTime?: TimestampJson;

  /**
   * initial_balance defines the initial balance when redelegation started.
   *
   * @generated from field: string initial_balance = 3;
   */
  initialBalance?: string;

  /**
   * shares_dst is the amount of destination-validator shares created by redelegation.
   *
   * @generated from field: string shares_dst = 4;
   */
  sharesDst?: string;

  /**
   * Incrementing id that uniquely identifies this entry
   *
   * @generated from field: uint64 unbonding_id = 5;
   */
  unbondingId?: string;

  /**
   * Strictly positive if this entry's unbonding has been stopped by external modules
   *
   * @generated from field: int64 unbonding_on_hold_ref_count = 6;
   */
  unbondingOnHoldRefCount?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationEntry.
 * Use `create(RedelegationEntrySchema)` to create a new message.
 */
export const RedelegationEntrySchema: GenMessage<RedelegationEntry, RedelegationEntryJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 13);

/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from message cosmos.staking.v1beta1.Redelegation
 */
export type Redelegation = Message<"cosmos.staking.v1beta1.Redelegation"> & {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress: string;

  /**
   * validator_src_address is the validator redelegation source operator address.
   *
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress: string;

  /**
   * validator_dst_address is the validator redelegation destination operator address.
   *
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress: string;

  /**
   * entries are the redelegation entries.
   *
   * redelegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4;
   */
  entries: RedelegationEntry[];
};

/**
 * Redelegation contains the list of a particular delegator's redelegating bonds
 * from a particular source validator to a particular destination validator.
 *
 * @generated from message cosmos.staking.v1beta1.Redelegation
 */
export type RedelegationJson = {
  /**
   * delegator_address is the bech32-encoded address of the delegator.
   *
   * @generated from field: string delegator_address = 1;
   */
  delegatorAddress?: string;

  /**
   * validator_src_address is the validator redelegation source operator address.
   *
   * @generated from field: string validator_src_address = 2;
   */
  validatorSrcAddress?: string;

  /**
   * validator_dst_address is the validator redelegation destination operator address.
   *
   * @generated from field: string validator_dst_address = 3;
   */
  validatorDstAddress?: string;

  /**
   * entries are the redelegation entries.
   *
   * redelegation entries
   *
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntry entries = 4;
   */
  entries?: RedelegationEntryJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.Redelegation.
 * Use `create(RedelegationSchema)` to create a new message.
 */
export const RedelegationSchema: GenMessage<Redelegation, RedelegationJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 14);

/**
 * Params defines the parameters for the x/staking module.
 *
 * @generated from message cosmos.staking.v1beta1.Params
 */
export type Params = Message<"cosmos.staking.v1beta1.Params"> & {
  /**
   * unbonding_time is the time duration of unbonding.
   *
   * @generated from field: google.protobuf.Duration unbonding_time = 1;
   */
  unbondingTime?: Duration;

  /**
   * max_validators is the maximum number of validators.
   *
   * @generated from field: uint32 max_validators = 2;
   */
  maxValidators: number;

  /**
   * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
   *
   * @generated from field: uint32 max_entries = 3;
   */
  maxEntries: number;

  /**
   * historical_entries is the number of historical entries to persist.
   *
   * @generated from field: uint32 historical_entries = 4;
   */
  historicalEntries: number;

  /**
   * bond_denom defines the bondable coin denomination.
   *
   * @generated from field: string bond_denom = 5;
   */
  bondDenom: string;

  /**
   * min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
   *
   * @generated from field: string min_commission_rate = 6;
   */
  minCommissionRate: string;

  /**
   * validator_bond_factor is required as a safety check for tokenizing shares and
   * delegations from liquid staking providers
   *
   * @generated from field: string validator_bond_factor = 7;
   */
  validatorBondFactor: string;

  /**
   * global_liquid_staking_cap represents a cap on the portion of stake that
   * comes from liquid staking providers
   *
   * @generated from field: string global_liquid_staking_cap = 8;
   */
  globalLiquidStakingCap: string;

  /**
   * validator_liquid_staking_cap represents a cap on the portion of stake that
   * comes from liquid staking providers for a specific validator
   *
   * @generated from field: string validator_liquid_staking_cap = 9;
   */
  validatorLiquidStakingCap: string;
};

/**
 * Params defines the parameters for the x/staking module.
 *
 * @generated from message cosmos.staking.v1beta1.Params
 */
export type ParamsJson = {
  /**
   * unbonding_time is the time duration of unbonding.
   *
   * @generated from field: google.protobuf.Duration unbonding_time = 1;
   */
  unbondingTime?: DurationJson;

  /**
   * max_validators is the maximum number of validators.
   *
   * @generated from field: uint32 max_validators = 2;
   */
  maxValidators?: number;

  /**
   * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
   *
   * @generated from field: uint32 max_entries = 3;
   */
  maxEntries?: number;

  /**
   * historical_entries is the number of historical entries to persist.
   *
   * @generated from field: uint32 historical_entries = 4;
   */
  historicalEntries?: number;

  /**
   * bond_denom defines the bondable coin denomination.
   *
   * @generated from field: string bond_denom = 5;
   */
  bondDenom?: string;

  /**
   * min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
   *
   * @generated from field: string min_commission_rate = 6;
   */
  minCommissionRate?: string;

  /**
   * validator_bond_factor is required as a safety check for tokenizing shares and
   * delegations from liquid staking providers
   *
   * @generated from field: string validator_bond_factor = 7;
   */
  validatorBondFactor?: string;

  /**
   * global_liquid_staking_cap represents a cap on the portion of stake that
   * comes from liquid staking providers
   *
   * @generated from field: string global_liquid_staking_cap = 8;
   */
  globalLiquidStakingCap?: string;

  /**
   * validator_liquid_staking_cap represents a cap on the portion of stake that
   * comes from liquid staking providers for a specific validator
   *
   * @generated from field: string validator_liquid_staking_cap = 9;
   */
  validatorLiquidStakingCap?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Params.
 * Use `create(ParamsSchema)` to create a new message.
 */
export const ParamsSchema: GenMessage<Params, ParamsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 15);

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from message cosmos.staking.v1beta1.DelegationResponse
 */
export type DelegationResponse = Message<"cosmos.staking.v1beta1.DelegationResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.Delegation delegation = 1;
   */
  delegation?: Delegation;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 2;
   */
  balance?: Coin;
};

/**
 * DelegationResponse is equivalent to Delegation except that it contains a
 * balance in addition to shares which is more suitable for client responses.
 *
 * @generated from message cosmos.staking.v1beta1.DelegationResponse
 */
export type DelegationResponseJson = {
  /**
   * @generated from field: cosmos.staking.v1beta1.Delegation delegation = 1;
   */
  delegation?: DelegationJson;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin balance = 2;
   */
  balance?: CoinJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.DelegationResponse.
 * Use `create(DelegationResponseSchema)` to create a new message.
 */
export const DelegationResponseSchema: GenMessage<DelegationResponse, DelegationResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 16);

/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export type RedelegationEntryResponse = Message<"cosmos.staking.v1beta1.RedelegationEntryResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1;
   */
  redelegationEntry?: RedelegationEntry;

  /**
   * @generated from field: string balance = 4;
   */
  balance: string;
};

/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationEntryResponse
 */
export type RedelegationEntryResponseJson = {
  /**
   * @generated from field: cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1;
   */
  redelegationEntry?: RedelegationEntryJson;

  /**
   * @generated from field: string balance = 4;
   */
  balance?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationEntryResponse.
 * Use `create(RedelegationEntryResponseSchema)` to create a new message.
 */
export const RedelegationEntryResponseSchema: GenMessage<RedelegationEntryResponse, RedelegationEntryResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 17);

/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationResponse
 */
export type RedelegationResponse = Message<"cosmos.staking.v1beta1.RedelegationResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.Redelegation redelegation = 1;
   */
  redelegation?: Redelegation;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2;
   */
  entries: RedelegationEntryResponse[];
};

/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries
 * contain a balance in addition to shares which is more suitable for client
 * responses.
 *
 * @generated from message cosmos.staking.v1beta1.RedelegationResponse
 */
export type RedelegationResponseJson = {
  /**
   * @generated from field: cosmos.staking.v1beta1.Redelegation redelegation = 1;
   */
  redelegation?: RedelegationJson;

  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2;
   */
  entries?: RedelegationEntryResponseJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.RedelegationResponse.
 * Use `create(RedelegationResponseSchema)` to create a new message.
 */
export const RedelegationResponseSchema: GenMessage<RedelegationResponse, RedelegationResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 18);

/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from message cosmos.staking.v1beta1.Pool
 */
export type Pool = Message<"cosmos.staking.v1beta1.Pool"> & {
  /**
   * @generated from field: string not_bonded_tokens = 1;
   */
  notBondedTokens: string;

  /**
   * @generated from field: string bonded_tokens = 2;
   */
  bondedTokens: string;
};

/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond
 * denomination.
 *
 * @generated from message cosmos.staking.v1beta1.Pool
 */
export type PoolJson = {
  /**
   * @generated from field: string not_bonded_tokens = 1;
   */
  notBondedTokens?: string;

  /**
   * @generated from field: string bonded_tokens = 2;
   */
  bondedTokens?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.Pool.
 * Use `create(PoolSchema)` to create a new message.
 */
export const PoolSchema: GenMessage<Pool, PoolJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 19);

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 *
 * @generated from message cosmos.staking.v1beta1.ValidatorUpdates
 */
export type ValidatorUpdates = Message<"cosmos.staking.v1beta1.ValidatorUpdates"> & {
  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate updates = 1;
   */
  updates: ValidatorUpdate[];
};

/**
 * ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
 * TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 *
 * @generated from message cosmos.staking.v1beta1.ValidatorUpdates
 */
export type ValidatorUpdatesJson = {
  /**
   * @generated from field: repeated tendermint.abci.ValidatorUpdate updates = 1;
   */
  updates?: ValidatorUpdateJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.ValidatorUpdates.
 * Use `create(ValidatorUpdatesSchema)` to create a new message.
 */
export const ValidatorUpdatesSchema: GenMessage<ValidatorUpdates, ValidatorUpdatesJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 20);

/**
 * TokenizeShareRecord represents a tokenized delegation
 *
 * @generated from message cosmos.staking.v1beta1.TokenizeShareRecord
 */
export type TokenizeShareRecord = Message<"cosmos.staking.v1beta1.TokenizeShareRecord"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * module account take the role of delegator
   *
   * @generated from field: string module_account = 3;
   */
  moduleAccount: string;

  /**
   * validator delegated to for tokenize share record creation
   *
   * @generated from field: string validator = 4;
   */
  validator: string;
};

/**
 * TokenizeShareRecord represents a tokenized delegation
 *
 * @generated from message cosmos.staking.v1beta1.TokenizeShareRecord
 */
export type TokenizeShareRecordJson = {
  /**
   * @generated from field: uint64 id = 1;
   */
  id?: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner?: string;

  /**
   * module account take the role of delegator
   *
   * @generated from field: string module_account = 3;
   */
  moduleAccount?: string;

  /**
   * validator delegated to for tokenize share record creation
   *
   * @generated from field: string validator = 4;
   */
  validator?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.TokenizeShareRecord.
 * Use `create(TokenizeShareRecordSchema)` to create a new message.
 */
export const TokenizeShareRecordSchema: GenMessage<TokenizeShareRecord, TokenizeShareRecordJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 21);

/**
 * PendingTokenizeShareAuthorizations stores a list of addresses that have their
 * tokenize share enablement in progress
 *
 * @generated from message cosmos.staking.v1beta1.PendingTokenizeShareAuthorizations
 */
export type PendingTokenizeShareAuthorizations = Message<"cosmos.staking.v1beta1.PendingTokenizeShareAuthorizations"> & {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses: string[];
};

/**
 * PendingTokenizeShareAuthorizations stores a list of addresses that have their
 * tokenize share enablement in progress
 *
 * @generated from message cosmos.staking.v1beta1.PendingTokenizeShareAuthorizations
 */
export type PendingTokenizeShareAuthorizationsJson = {
  /**
   * @generated from field: repeated string addresses = 1;
   */
  addresses?: string[];
};

/**
 * Describes the message cosmos.staking.v1beta1.PendingTokenizeShareAuthorizations.
 * Use `create(PendingTokenizeShareAuthorizationsSchema)` to create a new message.
 */
export const PendingTokenizeShareAuthorizationsSchema: GenMessage<PendingTokenizeShareAuthorizations, PendingTokenizeShareAuthorizationsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_staking, 22);

/**
 * BondStatus is the status of a validator.
 *
 * @generated from enum cosmos.staking.v1beta1.BondStatus
 */
export enum BondStatus {
  /**
   * UNSPECIFIED defines an invalid validator status.
   *
   * @generated from enum value: BOND_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * UNBONDED defines a validator that is not bonded.
   *
   * @generated from enum value: BOND_STATUS_UNBONDED = 1;
   */
  UNBONDED = 1,

  /**
   * UNBONDING defines a validator that is unbonding.
   *
   * @generated from enum value: BOND_STATUS_UNBONDING = 2;
   */
  UNBONDING = 2,

  /**
   * BONDED defines a validator that is bonded.
   *
   * @generated from enum value: BOND_STATUS_BONDED = 3;
   */
  BONDED = 3,
}

/**
 * BondStatus is the status of a validator.
 *
 * @generated from enum cosmos.staking.v1beta1.BondStatus
 */
export type BondStatusJson = "BOND_STATUS_UNSPECIFIED" | "BOND_STATUS_UNBONDED" | "BOND_STATUS_UNBONDING" | "BOND_STATUS_BONDED";

/**
 * Describes the enum cosmos.staking.v1beta1.BondStatus.
 */
export const BondStatusSchema: GenEnum<BondStatus, BondStatusJson> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_staking, 0);

/**
 * Infraction indicates the infraction a validator commited.
 *
 * @generated from enum cosmos.staking.v1beta1.Infraction
 */
export enum Infraction {
  /**
   * UNSPECIFIED defines an empty infraction.
   *
   * @generated from enum value: INFRACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * DOUBLE_SIGN defines a validator that double-signs a block.
   *
   * @generated from enum value: INFRACTION_DOUBLE_SIGN = 1;
   */
  DOUBLE_SIGN = 1,

  /**
   * DOWNTIME defines a validator that missed signing too many blocks.
   *
   * @generated from enum value: INFRACTION_DOWNTIME = 2;
   */
  DOWNTIME = 2,
}

/**
 * Infraction indicates the infraction a validator commited.
 *
 * @generated from enum cosmos.staking.v1beta1.Infraction
 */
export type InfractionJson = "INFRACTION_UNSPECIFIED" | "INFRACTION_DOUBLE_SIGN" | "INFRACTION_DOWNTIME";

/**
 * Describes the enum cosmos.staking.v1beta1.Infraction.
 */
export const InfractionSchema: GenEnum<Infraction, InfractionJson> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_staking, 1);

/**
 * TokenizeShareLockStatus indicates whether the address is able to tokenize shares
 *
 * @generated from enum cosmos.staking.v1beta1.TokenizeShareLockStatus
 */
export enum TokenizeShareLockStatus {
  /**
   * UNSPECIFIED defines an empty tokenize share lock status
   *
   * @generated from enum value: TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * LOCKED indicates the account is locked and cannot tokenize shares
   *
   * @generated from enum value: TOKENIZE_SHARE_LOCK_STATUS_LOCKED = 1;
   */
  LOCKED = 1,

  /**
   * UNLOCKED indicates the account is unlocked and can tokenize shares
   *
   * @generated from enum value: TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED = 2;
   */
  UNLOCKED = 2,

  /**
   * LOCK_EXPIRING indicates the account is unable to tokenize shares, but
   * will be able to tokenize shortly (after 1 unbonding period)
   *
   * @generated from enum value: TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING = 3;
   */
  LOCK_EXPIRING = 3,
}

/**
 * TokenizeShareLockStatus indicates whether the address is able to tokenize shares
 *
 * @generated from enum cosmos.staking.v1beta1.TokenizeShareLockStatus
 */
export type TokenizeShareLockStatusJson = "TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED" | "TOKENIZE_SHARE_LOCK_STATUS_LOCKED" | "TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED" | "TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING";

/**
 * Describes the enum cosmos.staking.v1beta1.TokenizeShareLockStatus.
 */
export const TokenizeShareLockStatusSchema: GenEnum<TokenizeShareLockStatus, TokenizeShareLockStatusJson> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_staking, 2);

