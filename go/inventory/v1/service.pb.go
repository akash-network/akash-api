// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/inventory/v1/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// voidNoParam dummy param for RPC services
type VoidNoParam struct {
}

func (m *VoidNoParam) Reset()         { *m = VoidNoParam{} }
func (m *VoidNoParam) String() string { return proto.CompactTextString(m) }
func (*VoidNoParam) ProtoMessage()    {}
func (*VoidNoParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_19b1fad552cee5dc, []int{0}
}
func (m *VoidNoParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoidNoParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoidNoParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoidNoParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoidNoParam.Merge(m, src)
}
func (m *VoidNoParam) XXX_Size() int {
	return m.Size()
}
func (m *VoidNoParam) XXX_DiscardUnknown() {
	xxx_messageInfo_VoidNoParam.DiscardUnknown(m)
}

var xxx_messageInfo_VoidNoParam proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VoidNoParam)(nil), "akash.inventory.v1.VoidNoParam")
}

func init() { proto.RegisterFile("akash/inventory/v1/service.proto", fileDescriptor_19b1fad552cee5dc) }

var fileDescriptor_19b1fad552cee5dc = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcc, 0x4e, 0x2c,
	0xce, 0xd0, 0xcf, 0xcc, 0x2b, 0x4b, 0xcd, 0x2b, 0xc9, 0x2f, 0xaa, 0xd4, 0x2f, 0x33, 0xd4, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x02, 0xab,
	0xd0, 0x83, 0xab, 0xd0, 0x2b, 0x33, 0x94, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f,
	0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xe8,
	0x90, 0x92, 0xc5, 0x62, 0x66, 0x5e, 0x7e, 0x0a, 0xd4, 0x40, 0x29, 0x6c, 0x56, 0x26, 0xe7, 0x94,
	0x16, 0x97, 0xa4, 0x16, 0x41, 0x54, 0x28, 0xf1, 0x72, 0x71, 0x87, 0xe5, 0x67, 0xa6, 0xf8, 0xe5,
	0x07, 0x24, 0x16, 0x25, 0xe6, 0x1a, 0x6d, 0x64, 0xe4, 0x62, 0xf7, 0xcb, 0x4f, 0x49, 0x0d, 0x0a,
	0x70, 0x16, 0x8a, 0xe6, 0xe2, 0x0c, 0x2c, 0x4d, 0x2d, 0xaa, 0x04, 0xf1, 0x85, 0xe4, 0xf5, 0x30,
	0xdd, 0xa6, 0x87, 0xa4, 0x53, 0x4a, 0x02, 0x9b, 0x02, 0x90, 0x56, 0x25, 0xe1, 0xa6, 0xcb, 0x4f,
	0x26, 0x33, 0xf1, 0x0a, 0x71, 0xc0, 0x1c, 0x97, 0xc4, 0xa8, 0x25, 0xe4, 0xc9, 0xc5, 0x15, 0x5c,
	0x52, 0x94, 0x9a, 0x98, 0x4b, 0xa1, 0xe9, 0x06, 0x8c, 0x46, 0x47, 0x19, 0xb9, 0xb8, 0x9c, 0x21,
	0x9e, 0x02, 0x39, 0x3b, 0x8d, 0x8b, 0x07, 0xec, 0x6c, 0xa8, 0x10, 0x61, 0xb3, 0xa5, 0xb1, 0x29,
	0x80, 0xea, 0x56, 0x92, 0x00, 0x3b, 0x5e, 0x48, 0x88, 0x17, 0xe4, 0x78, 0xb8, 0x0a, 0x90, 0x0f,
	0xfc, 0xb9, 0x78, 0x21, 0x3e, 0xa0, 0x8a, 0x45, 0x06, 0x8c, 0x4e, 0x3e, 0x27, 0x1e, 0xc9, 0x31,
	0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb,
	0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c,
	0x9f, 0xab, 0x0f, 0x36, 0x42, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x1b, 0xca, 0x03, 0xa5,
	0x8d, 0xf4, 0x7c, 0x94, 0x68, 0x4e, 0x62, 0x03, 0xc7, 0xaf, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xf3, 0x65, 0xa5, 0x58, 0x76, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeRPCClient is the client API for NodeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeRPCClient interface {
	// QueryNode defines a method to query hardware state of the node
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	QueryNode(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (*Node, error)
	// StreamNode defines a method to stream hardware state of the node
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamNode(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (NodeRPC_StreamNodeClient, error)
}

type nodeRPCClient struct {
	cc grpc1.ClientConn
}

func NewNodeRPCClient(cc grpc1.ClientConn) NodeRPCClient {
	return &nodeRPCClient{cc}
}

func (c *nodeRPCClient) QueryNode(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/akash.inventory.v1.NodeRPC/QueryNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRPCClient) StreamNode(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (NodeRPC_StreamNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeRPC_serviceDesc.Streams[0], "/akash.inventory.v1.NodeRPC/StreamNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeRPCStreamNodeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeRPC_StreamNodeClient interface {
	Recv() (*Node, error)
	grpc.ClientStream
}

type nodeRPCStreamNodeClient struct {
	grpc.ClientStream
}

func (x *nodeRPCStreamNodeClient) Recv() (*Node, error) {
	m := new(Node)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeRPCServer is the server API for NodeRPC service.
type NodeRPCServer interface {
	// QueryNode defines a method to query hardware state of the node
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	QueryNode(context.Context, *VoidNoParam) (*Node, error)
	// StreamNode defines a method to stream hardware state of the node
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamNode(*VoidNoParam, NodeRPC_StreamNodeServer) error
}

// UnimplementedNodeRPCServer can be embedded to have forward compatible implementations.
type UnimplementedNodeRPCServer struct {
}

func (*UnimplementedNodeRPCServer) QueryNode(ctx context.Context, req *VoidNoParam) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNode not implemented")
}
func (*UnimplementedNodeRPCServer) StreamNode(req *VoidNoParam, srv NodeRPC_StreamNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNode not implemented")
}

func RegisterNodeRPCServer(s grpc1.Server, srv NodeRPCServer) {
	s.RegisterService(&_NodeRPC_serviceDesc, srv)
}

func _NodeRPC_QueryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRPCServer).QueryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.inventory.v1.NodeRPC/QueryNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRPCServer).QueryNode(ctx, req.(*VoidNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRPC_StreamNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VoidNoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeRPCServer).StreamNode(m, &nodeRPCStreamNodeServer{stream})
}

type NodeRPC_StreamNodeServer interface {
	Send(*Node) error
	grpc.ServerStream
}

type nodeRPCStreamNodeServer struct {
	grpc.ServerStream
}

func (x *nodeRPCStreamNodeServer) Send(m *Node) error {
	return x.ServerStream.SendMsg(m)
}

var _NodeRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.inventory.v1.NodeRPC",
	HandlerType: (*NodeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNode",
			Handler:    _NodeRPC_QueryNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNode",
			Handler:       _NodeRPC_StreamNode_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "akash/inventory/v1/service.proto",
}

// ClusterRPCClient is the client API for ClusterRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterRPCClient interface {
	// QueryCluster defines a method to query hardware state of the cluster
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	QueryCluster(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (*Cluster, error)
	// StreamCluster defines a method to stream hardware state of the cluster
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamCluster(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (ClusterRPC_StreamClusterClient, error)
}

type clusterRPCClient struct {
	cc grpc1.ClientConn
}

func NewClusterRPCClient(cc grpc1.ClientConn) ClusterRPCClient {
	return &clusterRPCClient{cc}
}

func (c *clusterRPCClient) QueryCluster(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/akash.inventory.v1.ClusterRPC/QueryCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterRPCClient) StreamCluster(ctx context.Context, in *VoidNoParam, opts ...grpc.CallOption) (ClusterRPC_StreamClusterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClusterRPC_serviceDesc.Streams[0], "/akash.inventory.v1.ClusterRPC/StreamCluster", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterRPCStreamClusterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterRPC_StreamClusterClient interface {
	Recv() (*Cluster, error)
	grpc.ClientStream
}

type clusterRPCStreamClusterClient struct {
	grpc.ClientStream
}

func (x *clusterRPCStreamClusterClient) Recv() (*Cluster, error) {
	m := new(Cluster)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterRPCServer is the server API for ClusterRPC service.
type ClusterRPCServer interface {
	// QueryCluster defines a method to query hardware state of the cluster
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	QueryCluster(context.Context, *VoidNoParam) (*Cluster, error)
	// StreamCluster defines a method to stream hardware state of the cluster
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	StreamCluster(*VoidNoParam, ClusterRPC_StreamClusterServer) error
}

// UnimplementedClusterRPCServer can be embedded to have forward compatible implementations.
type UnimplementedClusterRPCServer struct {
}

func (*UnimplementedClusterRPCServer) QueryCluster(ctx context.Context, req *VoidNoParam) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCluster not implemented")
}
func (*UnimplementedClusterRPCServer) StreamCluster(req *VoidNoParam, srv ClusterRPC_StreamClusterServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCluster not implemented")
}

func RegisterClusterRPCServer(s grpc1.Server, srv ClusterRPCServer) {
	s.RegisterService(&_ClusterRPC_serviceDesc, srv)
}

func _ClusterRPC_QueryCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRPCServer).QueryCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akash.inventory.v1.ClusterRPC/QueryCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRPCServer).QueryCluster(ctx, req.(*VoidNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterRPC_StreamCluster_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VoidNoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterRPCServer).StreamCluster(m, &clusterRPCStreamClusterServer{stream})
}

type ClusterRPC_StreamClusterServer interface {
	Send(*Cluster) error
	grpc.ServerStream
}

type clusterRPCStreamClusterServer struct {
	grpc.ServerStream
}

func (x *clusterRPCStreamClusterServer) Send(m *Cluster) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "akash.inventory.v1.ClusterRPC",
	HandlerType: (*ClusterRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCluster",
			Handler:    _ClusterRPC_QueryCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCluster",
			Handler:       _ClusterRPC_StreamCluster_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "akash/inventory/v1/service.proto",
}

func (m *VoidNoParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoidNoParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoidNoParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoidNoParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoidNoParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoidNoParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoidNoParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
