// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/cert/v1/cert.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of deployment
type State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	CertificateStateInvalid State = 0
	// CertificateValid denotes state for deployment active
	CertificateValid State = 1
	// CertificateRevoked denotes state for deployment closed
	CertificateRevoked State = 2
)

var State_name = map[int32]string{
	0: "invalid",
	1: "valid",
	2: "revoked",
}

var State_value = map[string]int32{
	"invalid": 0,
	"valid":   1,
	"revoked": 2,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aed64ec87f738ef2, []int{0}
}

// ID stores owner and sequence number
type ID struct {
	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial" yaml:"serial"`
}

func (m *ID) Reset()      { *m = ID{} }
func (*ID) ProtoMessage() {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed64ec87f738ef2, []int{0}
}
func (m *ID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return m.Size()
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ID) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

// Certificate stores state, certificate and it's public key
type Certificate struct {
	State  State  `protobuf:"varint,2,opt,name=state,proto3,enum=akash.cert.v1.State" json:"state" yaml:"state"`
	Cert   []byte `protobuf:"bytes,3,opt,name=cert,proto3" json:"cert" yaml:"cert"`
	Pubkey []byte `protobuf:"bytes,4,opt,name=pubkey,proto3" json:"pubkey" yaml:"pubkey"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_aed64ec87f738ef2, []int{1}
}
func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return m.Size()
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetState() State {
	if m != nil {
		return m.State
	}
	return CertificateStateInvalid
}

func (m *Certificate) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Certificate) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func init() {
	proto.RegisterEnum("akash.cert.v1.State", State_name, State_value)
	proto.RegisterType((*ID)(nil), "akash.cert.v1.ID")
	proto.RegisterType((*Certificate)(nil), "akash.cert.v1.Certificate")
}

func init() { proto.RegisterFile("akash/cert/v1/cert.proto", fileDescriptor_aed64ec87f738ef2) }

var fileDescriptor_aed64ec87f738ef2 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x33, 0xeb, 0xa6, 0xd5, 0x69, 0x2b, 0xcb, 0x10, 0x6c, 0x9a, 0x42, 0x26, 0x8c, 0x97,
	0x45, 0x31, 0x61, 0xad, 0xa7, 0xde, 0x8c, 0x8a, 0xf4, 0x9a, 0x82, 0x07, 0x2f, 0x32, 0xdd, 0x8c,
	0x31, 0x64, 0x9b, 0x59, 0x26, 0x63, 0xa4, 0x07, 0xef, 0xb2, 0x78, 0xf0, 0xe8, 0x65, 0xa1, 0xe0,
	0xbf, 0x20, 0xfe, 0x0d, 0x1e, 0x8b, 0x27, 0x4f, 0x41, 0x76, 0x2f, 0xb2, 0xc7, 0xfd, 0x0b, 0x24,
	0x6f, 0x22, 0xdd, 0x9e, 0x92, 0xef, 0xfb, 0x7e, 0xf3, 0x78, 0x1f, 0x3c, 0xec, 0xf2, 0x82, 0x57,
	0xef, 0xa2, 0xb1, 0x50, 0x3a, 0xaa, 0x47, 0xf0, 0x0d, 0xa7, 0x4a, 0x6a, 0x49, 0xf6, 0x20, 0x09,
	0xc1, 0xa9, 0x47, 0x9e, 0x93, 0xc9, 0x4c, 0x42, 0x12, 0xb5, 0x7f, 0x06, 0xf2, 0x0e, 0xc6, 0xb2,
	0x3a, 0x97, 0xd5, 0x1b, 0x13, 0x18, 0x61, 0x22, 0xf6, 0x19, 0xe1, 0xde, 0xc9, 0x73, 0xf2, 0x12,
	0xdb, 0xf2, 0x43, 0x29, 0x94, 0x8b, 0x02, 0x34, 0xbc, 0x13, 0x8f, 0x56, 0x0d, 0x35, 0xc6, 0xba,
	0xa1, 0xbb, 0x17, 0xfc, 0x7c, 0x72, 0xcc, 0x40, 0xb2, 0x5f, 0xdf, 0x1f, 0x39, 0xdd, 0x80, 0xa7,
	0x69, 0xaa, 0x44, 0x55, 0x9d, 0x6a, 0x95, 0x97, 0x59, 0x62, 0x70, 0x72, 0x84, 0xb7, 0x2a, 0xa1,
	0x72, 0x3e, 0x71, 0x7b, 0x30, 0xe9, 0x70, 0xd5, 0xd0, 0xce, 0x59, 0x37, 0x74, 0xcf, 0x8c, 0x32,
	0x9a, 0x25, 0x5d, 0x70, 0x7c, 0xfb, 0xeb, 0x25, 0xb5, 0xfe, 0x5e, 0x52, 0x8b, 0xfd, 0x40, 0x78,
	0xe7, 0x99, 0x50, 0x3a, 0x7f, 0x9b, 0x8f, 0xb9, 0x16, 0xe4, 0x05, 0xb6, 0x2b, 0xcd, 0xb5, 0x80,
	0x69, 0x77, 0x1f, 0x3b, 0xe1, 0x8d, 0xba, 0xe1, 0x69, 0x9b, 0xc5, 0x07, 0xed, 0xb6, 0x80, 0x5d,
	0x6f, 0x0b, 0x92, 0x25, 0xc6, 0x26, 0x0f, 0x71, 0xbf, 0x7d, 0xe2, 0xde, 0x0a, 0xd0, 0x70, 0x37,
	0xde, 0x5f, 0x35, 0x14, 0xf4, 0xba, 0xa1, 0x3b, 0x06, 0x6f, 0x15, 0x4b, 0xc0, 0x6c, 0x2b, 0x4c,
	0xdf, 0x9f, 0x15, 0xe2, 0xc2, 0xed, 0x03, 0x0e, 0x15, 0x8c, 0x73, 0x5d, 0xc1, 0x68, 0x96, 0x74,
	0xc1, 0x83, 0x8f, 0xd8, 0x86, 0x65, 0xc8, 0x10, 0x6f, 0xe7, 0x65, 0xcd, 0x27, 0x79, 0x3a, 0xb0,
	0xbc, 0xc3, 0xd9, 0x3c, 0xd8, 0xdf, 0xe8, 0x03, 0xc8, 0x89, 0x89, 0x09, 0xc5, 0xb6, 0xe1, 0x90,
	0xe7, 0xcc, 0xe6, 0xc1, 0x60, 0x83, 0x7b, 0x05, 0xc0, 0x7d, 0xbc, 0xad, 0x44, 0x2d, 0x0b, 0x91,
	0x0e, 0x7a, 0xde, 0xbd, 0xd9, 0x3c, 0x20, 0x1b, 0x48, 0x62, 0x12, 0xaf, 0xff, 0xe9, 0x9b, 0x6f,
	0xc5, 0x4f, 0x7e, 0x2e, 0x7c, 0x74, 0xb5, 0xf0, 0xd1, 0x9f, 0x85, 0x8f, 0xbe, 0x2c, 0x7d, 0xeb,
	0x6a, 0xe9, 0x5b, 0xbf, 0x97, 0xbe, 0xf5, 0xda, 0x9b, 0x16, 0x59, 0xc8, 0x0b, 0x1d, 0xe6, 0xed,
	0x49, 0x44, 0xa5, 0x4c, 0xc5, 0xff, 0x3b, 0x3a, 0xdb, 0x82, 0x1b, 0x38, 0xfa, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x96, 0xa3, 0xd3, 0x01, 0x5f, 0x02, 0x00, 0x00,
}

func (m *ID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Serial) > 0 {
		i -= len(m.Serial)
		copy(dAtA[i:], m.Serial)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Serial)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Certificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Certificate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Certificate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintCert(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintCert(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintCert(dAtA []byte, offset int, v uint64) int {
	offset -= sovCert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Serial)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func (m *Certificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovCert(uint64(m.State))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovCert(uint64(l))
	}
	return n
}

func sovCert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCert(x uint64) (n int) {
	return sovCert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serial = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Certificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Certificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Certificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCert
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCert = fmt.Errorf("proto: unexpected end of group")
)
