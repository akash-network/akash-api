// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/autocli/v1/options.proto (package cosmos.autocli.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/autocli/v1/options.proto.
 */
export const file_cosmos_autocli_v1_options: GenFile = /*@__PURE__*/
  fileDesc("Ch9jb3Ntb3MvYXV0b2NsaS92MS9vcHRpb25zLnByb3RvEhFjb3Ntb3MuYXV0b2NsaS52MSKEAQoNTW9kdWxlT3B0aW9ucxI3CgJ0eBgBIAEoCzIrLmNvc21vcy5hdXRvY2xpLnYxLlNlcnZpY2VDb21tYW5kRGVzY3JpcHRvchI6CgVxdWVyeRgCIAEoCzIrLmNvc21vcy5hdXRvY2xpLnYxLlNlcnZpY2VDb21tYW5kRGVzY3JpcHRvciKjAgoYU2VydmljZUNvbW1hbmREZXNjcmlwdG9yEg8KB3NlcnZpY2UYASABKAkSQQoTcnBjX2NvbW1hbmRfb3B0aW9ucxgCIAMoCzIkLmNvc21vcy5hdXRvY2xpLnYxLlJwY0NvbW1hbmRPcHRpb25zElIKDHN1Yl9jb21tYW5kcxgDIAMoCzI8LmNvc21vcy5hdXRvY2xpLnYxLlNlcnZpY2VDb21tYW5kRGVzY3JpcHRvci5TdWJDb21tYW5kc0VudHJ5Gl8KEFN1YkNvbW1hbmRzRW50cnkSCwoDa2V5GAEgASgJEjoKBXZhbHVlGAIgASgLMisuY29zbW9zLmF1dG9jbGkudjEuU2VydmljZUNvbW1hbmREZXNjcmlwdG9yOgI4ASKfAwoRUnBjQ29tbWFuZE9wdGlvbnMSEgoKcnBjX21ldGhvZBgBIAEoCRILCgN1c2UYAiABKAkSDAoEbG9uZxgDIAEoCRINCgVzaG9ydBgEIAEoCRIPCgdleGFtcGxlGAUgASgJEg0KBWFsaWFzGAYgAygJEhMKC3N1Z2dlc3RfZm9yGAcgAygJEhIKCmRlcHJlY2F0ZWQYCCABKAkSDwoHdmVyc2lvbhgJIAEoCRJLCgxmbGFnX29wdGlvbnMYCiADKAsyNS5jb3Ntb3MuYXV0b2NsaS52MS5ScGNDb21tYW5kT3B0aW9ucy5GbGFnT3B0aW9uc0VudHJ5EkMKD3Bvc2l0aW9uYWxfYXJncxgLIAMoCzIqLmNvc21vcy5hdXRvY2xpLnYxLlBvc2l0aW9uYWxBcmdEZXNjcmlwdG9yEgwKBHNraXAYDCABKAgaUgoQRmxhZ09wdGlvbnNFbnRyeRILCgNrZXkYASABKAkSLQoFdmFsdWUYAiABKAsyHi5jb3Ntb3MuYXV0b2NsaS52MS5GbGFnT3B0aW9uczoCOAEitAEKC0ZsYWdPcHRpb25zEgwKBG5hbWUYASABKAkSEQoJc2hvcnRoYW5kGAIgASgJEg0KBXVzYWdlGAMgASgJEhUKDWRlZmF1bHRfdmFsdWUYBCABKAkSHAoUbm9fb3B0X2RlZmF1bHRfdmFsdWUYBSABKAkSEgoKZGVwcmVjYXRlZBgGIAEoCRIcChRzaG9ydGhhbmRfZGVwcmVjYXRlZBgHIAEoCRIOCgZoaWRkZW4YCCABKAgiPwoXUG9zaXRpb25hbEFyZ0Rlc2NyaXB0b3ISEwoLcHJvdG9fZmllbGQYASABKAkSDwoHdmFyYXJncxgCIAEoCEIrWiljb3Ntb3NzZGsuaW8vYXBpL2Nvc21vcy9iYXNlL2NsaS92MTtjbGl2MWIGcHJvdG8z");

/**
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 *
 * @generated from message cosmos.autocli.v1.ModuleOptions
 */
export type ModuleOptions = Message<"cosmos.autocli.v1.ModuleOptions"> & {
  /**
   * tx describes the tx command for the module.
   *
   * @generated from field: cosmos.autocli.v1.ServiceCommandDescriptor tx = 1;
   */
  tx?: ServiceCommandDescriptor;

  /**
   * query describes the tx command for the module.
   *
   * @generated from field: cosmos.autocli.v1.ServiceCommandDescriptor query = 2;
   */
  query?: ServiceCommandDescriptor;
};

/**
 * ModuleOptions describes the CLI options for a Cosmos SDK module.
 *
 * @generated from message cosmos.autocli.v1.ModuleOptions
 */
export type ModuleOptionsJson = {
  /**
   * tx describes the tx command for the module.
   *
   * @generated from field: cosmos.autocli.v1.ServiceCommandDescriptor tx = 1;
   */
  tx?: ServiceCommandDescriptorJson;

  /**
   * query describes the tx command for the module.
   *
   * @generated from field: cosmos.autocli.v1.ServiceCommandDescriptor query = 2;
   */
  query?: ServiceCommandDescriptorJson;
};

/**
 * Describes the message cosmos.autocli.v1.ModuleOptions.
 * Use `create(ModuleOptionsSchema)` to create a new message.
 */
export const ModuleOptionsSchema: GenMessage<ModuleOptions, ModuleOptionsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_autocli_v1_options, 0);

/**
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 *
 * @generated from message cosmos.autocli.v1.ServiceCommandDescriptor
 */
export type ServiceCommandDescriptor = Message<"cosmos.autocli.v1.ServiceCommandDescriptor"> & {
  /**
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   *
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   *
   * @generated from field: repeated cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2;
   */
  rpcCommandOptions: RpcCommandOptions[];

  /**
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   *
   * @generated from field: map<string, cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3;
   */
  subCommands: { [key: string]: ServiceCommandDescriptor };
};

/**
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 *
 * @generated from message cosmos.autocli.v1.ServiceCommandDescriptor
 */
export type ServiceCommandDescriptorJson = {
  /**
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   *
   * @generated from field: string service = 1;
   */
  service?: string;

  /**
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   *
   * @generated from field: repeated cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2;
   */
  rpcCommandOptions?: RpcCommandOptionsJson[];

  /**
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   *
   * @generated from field: map<string, cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3;
   */
  subCommands?: { [key: string]: ServiceCommandDescriptorJson };
};

/**
 * Describes the message cosmos.autocli.v1.ServiceCommandDescriptor.
 * Use `create(ServiceCommandDescriptorSchema)` to create a new message.
 */
export const ServiceCommandDescriptorSchema: GenMessage<ServiceCommandDescriptor, ServiceCommandDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_autocli_v1_options, 1);

/**
 * RpcCommandOptions specifies options for commands generated from protobuf
 * rpc methods.
 *
 * @generated from message cosmos.autocli.v1.RpcCommandOptions
 */
export type RpcCommandOptions = Message<"cosmos.autocli.v1.RpcCommandOptions"> & {
  /**
   * rpc_method is short name of the protobuf rpc method that this command is
   * generated from.
   *
   * @generated from field: string rpc_method = 1;
   */
  rpcMethod: string;

  /**
   * use is the one-line usage method. It also allows specifying an alternate
   * name for the command as the first word of the usage text.
   *
   * By default the name of an rpc command is the kebab-case short name of the
   * rpc method.
   *
   * @generated from field: string use = 2;
   */
  use: string;

  /**
   * long is the long message shown in the 'help <this-command>' output.
   *
   * @generated from field: string long = 3;
   */
  long: string;

  /**
   * short is the short description shown in the 'help' output.
   *
   * @generated from field: string short = 4;
   */
  short: string;

  /**
   * example is examples of how to use the command.
   *
   * @generated from field: string example = 5;
   */
  example: string;

  /**
   * alias is an array of aliases that can be used instead of the first word in Use.
   *
   * @generated from field: repeated string alias = 6;
   */
  alias: string[];

  /**
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   *
   * @generated from field: repeated string suggest_for = 7;
   */
  suggestFor: string[];

  /**
   * deprecated defines, if this command is deprecated and should print this string when used.
   *
   * @generated from field: string deprecated = 8;
   */
  deprecated: string;

  /**
   * version defines the version for this command. If this value is non-empty and the command does not
   * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
   * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
   * command does not define one.
   *
   * @generated from field: string version = 9;
   */
  version: string;

  /**
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   *
   * @generated from field: map<string, cosmos.autocli.v1.FlagOptions> flag_options = 10;
   */
  flagOptions: { [key: string]: FlagOptions };

  /**
   * positional_args specifies positional arguments for the command.
   *
   * @generated from field: repeated cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11;
   */
  positionalArgs: PositionalArgDescriptor[];

  /**
   * skip specifies whether to skip this rpc method when generating commands.
   *
   * @generated from field: bool skip = 12;
   */
  skip: boolean;
};

/**
 * RpcCommandOptions specifies options for commands generated from protobuf
 * rpc methods.
 *
 * @generated from message cosmos.autocli.v1.RpcCommandOptions
 */
export type RpcCommandOptionsJson = {
  /**
   * rpc_method is short name of the protobuf rpc method that this command is
   * generated from.
   *
   * @generated from field: string rpc_method = 1;
   */
  rpcMethod?: string;

  /**
   * use is the one-line usage method. It also allows specifying an alternate
   * name for the command as the first word of the usage text.
   *
   * By default the name of an rpc command is the kebab-case short name of the
   * rpc method.
   *
   * @generated from field: string use = 2;
   */
  use?: string;

  /**
   * long is the long message shown in the 'help <this-command>' output.
   *
   * @generated from field: string long = 3;
   */
  long?: string;

  /**
   * short is the short description shown in the 'help' output.
   *
   * @generated from field: string short = 4;
   */
  short?: string;

  /**
   * example is examples of how to use the command.
   *
   * @generated from field: string example = 5;
   */
  example?: string;

  /**
   * alias is an array of aliases that can be used instead of the first word in Use.
   *
   * @generated from field: repeated string alias = 6;
   */
  alias?: string[];

  /**
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   *
   * @generated from field: repeated string suggest_for = 7;
   */
  suggestFor?: string[];

  /**
   * deprecated defines, if this command is deprecated and should print this string when used.
   *
   * @generated from field: string deprecated = 8;
   */
  deprecated?: string;

  /**
   * version defines the version for this command. If this value is non-empty and the command does not
   * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
   * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
   * command does not define one.
   *
   * @generated from field: string version = 9;
   */
  version?: string;

  /**
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   *
   * @generated from field: map<string, cosmos.autocli.v1.FlagOptions> flag_options = 10;
   */
  flagOptions?: { [key: string]: FlagOptionsJson };

  /**
   * positional_args specifies positional arguments for the command.
   *
   * @generated from field: repeated cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11;
   */
  positionalArgs?: PositionalArgDescriptorJson[];

  /**
   * skip specifies whether to skip this rpc method when generating commands.
   *
   * @generated from field: bool skip = 12;
   */
  skip?: boolean;
};

/**
 * Describes the message cosmos.autocli.v1.RpcCommandOptions.
 * Use `create(RpcCommandOptionsSchema)` to create a new message.
 */
export const RpcCommandOptionsSchema: GenMessage<RpcCommandOptions, RpcCommandOptionsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_autocli_v1_options, 2);

/**
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 *
 * @generated from message cosmos.autocli.v1.FlagOptions
 */
export type FlagOptions = Message<"cosmos.autocli.v1.FlagOptions"> & {
  /**
   * name is an alternate name to use for the field flag.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * shorthand is a one-letter abbreviated flag.
   *
   * @generated from field: string shorthand = 2;
   */
  shorthand: string;

  /**
   * usage is the help message.
   *
   * @generated from field: string usage = 3;
   */
  usage: string;

  /**
   * default_value is the default value as text.
   *
   * @generated from field: string default_value = 4;
   */
  defaultValue: string;

  /**
   * default value is the default value as text if the flag is used without any value.
   *
   * @generated from field: string no_opt_default_value = 5;
   */
  noOptDefaultValue: string;

  /**
   * deprecated is the usage text to show if this flag is deprecated.
   *
   * @generated from field: string deprecated = 6;
   */
  deprecated: string;

  /**
   * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
   *
   * @generated from field: string shorthand_deprecated = 7;
   */
  shorthandDeprecated: string;

  /**
   * hidden hides the flag from help/usage text
   *
   * @generated from field: bool hidden = 8;
   */
  hidden: boolean;
};

/**
 * FlagOptions are options for flags generated from rpc request fields.
 * By default, all request fields are configured as flags based on the
 * kebab-case name of the field. Fields can be turned into positional arguments
 * instead by using RpcCommandOptions.positional_args.
 *
 * @generated from message cosmos.autocli.v1.FlagOptions
 */
export type FlagOptionsJson = {
  /**
   * name is an alternate name to use for the field flag.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * shorthand is a one-letter abbreviated flag.
   *
   * @generated from field: string shorthand = 2;
   */
  shorthand?: string;

  /**
   * usage is the help message.
   *
   * @generated from field: string usage = 3;
   */
  usage?: string;

  /**
   * default_value is the default value as text.
   *
   * @generated from field: string default_value = 4;
   */
  defaultValue?: string;

  /**
   * default value is the default value as text if the flag is used without any value.
   *
   * @generated from field: string no_opt_default_value = 5;
   */
  noOptDefaultValue?: string;

  /**
   * deprecated is the usage text to show if this flag is deprecated.
   *
   * @generated from field: string deprecated = 6;
   */
  deprecated?: string;

  /**
   * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
   *
   * @generated from field: string shorthand_deprecated = 7;
   */
  shorthandDeprecated?: string;

  /**
   * hidden hides the flag from help/usage text
   *
   * @generated from field: bool hidden = 8;
   */
  hidden?: boolean;
};

/**
 * Describes the message cosmos.autocli.v1.FlagOptions.
 * Use `create(FlagOptionsSchema)` to create a new message.
 */
export const FlagOptionsSchema: GenMessage<FlagOptions, FlagOptionsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_autocli_v1_options, 3);

/**
 * PositionalArgDescriptor describes a positional argument.
 *
 * @generated from message cosmos.autocli.v1.PositionalArgDescriptor
 */
export type PositionalArgDescriptor = Message<"cosmos.autocli.v1.PositionalArgDescriptor"> & {
  /**
   * proto_field specifies the proto field to use as the positional arg. Any
   * fields used as positional args will not have a flag generated.
   *
   * @generated from field: string proto_field = 1;
   */
  protoField: string;

  /**
   * varargs makes a positional parameter a varargs parameter. This can only be
   * applied to last positional parameter and the proto_field must a repeated
   * field.
   *
   * @generated from field: bool varargs = 2;
   */
  varargs: boolean;
};

/**
 * PositionalArgDescriptor describes a positional argument.
 *
 * @generated from message cosmos.autocli.v1.PositionalArgDescriptor
 */
export type PositionalArgDescriptorJson = {
  /**
   * proto_field specifies the proto field to use as the positional arg. Any
   * fields used as positional args will not have a flag generated.
   *
   * @generated from field: string proto_field = 1;
   */
  protoField?: string;

  /**
   * varargs makes a positional parameter a varargs parameter. This can only be
   * applied to last positional parameter and the proto_field must a repeated
   * field.
   *
   * @generated from field: bool varargs = 2;
   */
  varargs?: boolean;
};

/**
 * Describes the message cosmos.autocli.v1.PositionalArgDescriptor.
 * Use `create(PositionalArgDescriptorSchema)` to create a new message.
 */
export const PositionalArgDescriptorSchema: GenMessage<PositionalArgDescriptor, PositionalArgDescriptorJson> = /*@__PURE__*/
  messageDesc(file_cosmos_autocli_v1_options, 4);

