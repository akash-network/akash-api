// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/market/v1/order.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderState is an enum which refers to state of order
type OrderState int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	OrderStateInvalid OrderState = 0
	// OrderOpen denotes state for order open
	OrderOpen OrderState = 1
	// OrderMatched denotes state for order matched
	OrderActive OrderState = 2
	// OrderClosed denotes state for order lost
	OrderClosed OrderState = 3
)

var OrderState_name = map[int32]string{
	0: "order_invalid",
	1: "order_open",
	2: "order_active",
	3: "order_closed",
}

var OrderState_value = map[string]int32{
	"order_invalid": 0,
	"order_open":    1,
	"order_active":  2,
	"order_closed":  3,
}

func (x OrderState) String() string {
	return proto.EnumName(OrderState_name, int32(x))
}

func (OrderState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84d7e2ed6a8c3a6e, []int{0}
}

// OrderID stores owner and all other seq numbers
type OrderID struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	DSeq  uint64 `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
	GSeq  uint32 `protobuf:"varint,3,opt,name=gseq,proto3" json:"gseq" yaml:"gseq"`
	OSeq  uint32 `protobuf:"varint,4,opt,name=oseq,proto3" json:"oseq" yaml:"oseq"`
}

func (m *OrderID) Reset()      { *m = OrderID{} }
func (*OrderID) ProtoMessage() {}
func (*OrderID) Descriptor() ([]byte, []int) {
	return fileDescriptor_84d7e2ed6a8c3a6e, []int{0}
}
func (m *OrderID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderID.Merge(m, src)
}
func (m *OrderID) XXX_Size() int {
	return m.Size()
}
func (m *OrderID) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderID.DiscardUnknown(m)
}

var xxx_messageInfo_OrderID proto.InternalMessageInfo

func (m *OrderID) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *OrderID) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

func (m *OrderID) GetGSeq() uint32 {
	if m != nil {
		return m.GSeq
	}
	return 0
}

func (m *OrderID) GetOSeq() uint32 {
	if m != nil {
		return m.OSeq
	}
	return 0
}

func init() {
	proto.RegisterEnum("akash.market.v1.OrderState", OrderState_name, OrderState_value)
	proto.RegisterType((*OrderID)(nil), "akash.market.v1.OrderID")
}

func init() { proto.RegisterFile("akash/market/v1/order.proto", fileDescriptor_84d7e2ed6a8c3a6e) }

var fileDescriptor_84d7e2ed6a8c3a6e = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x3f, 0xcb, 0xd3, 0x40,
	0x1c, 0xc7, 0x73, 0xcf, 0x13, 0xff, 0x3c, 0xd7, 0x96, 0xc6, 0x50, 0xa1, 0x46, 0xcd, 0xc5, 0x4c,
	0x41, 0x30, 0xa1, 0x14, 0x1c, 0xba, 0xb5, 0x16, 0x4a, 0xa7, 0x42, 0xbb, 0xb9, 0x94, 0xb3, 0x39,
	0xce, 0x90, 0x36, 0x97, 0x26, 0x21, 0xe2, 0x3b, 0x90, 0x4e, 0x8e, 0x2e, 0x85, 0x8a, 0x6f, 0xc1,
	0x17, 0xe1, 0x58, 0x9c, 0x9c, 0x82, 0xa4, 0x8b, 0x74, 0xec, 0xea, 0x22, 0x77, 0x17, 0x88, 0x9d,
	0x92, 0xdf, 0xf7, 0xfb, 0xf9, 0xfc, 0x20, 0xb9, 0x83, 0x4f, 0x71, 0x88, 0xd3, 0xf7, 0xde, 0x06,
	0x27, 0x21, 0xc9, 0xbc, 0xbc, 0xe7, 0xb1, 0xc4, 0x27, 0x89, 0x1b, 0x27, 0x2c, 0x63, 0x7a, 0x5b,
	0x94, 0xae, 0x2c, 0xdd, 0xbc, 0x67, 0x74, 0x28, 0xa3, 0x4c, 0x74, 0x1e, 0x7f, 0x93, 0x98, 0xf1,
	0x64, 0xc5, 0xd2, 0x0d, 0x4b, 0x97, 0xb2, 0x90, 0x83, 0xac, 0xec, 0xbf, 0x00, 0x3e, 0x98, 0xf1,
	0x8d, 0xd3, 0xb1, 0x3e, 0x81, 0xf7, 0xd8, 0x87, 0x88, 0x24, 0x5d, 0x60, 0x01, 0xe7, 0x6e, 0xd4,
	0x3b, 0x17, 0x48, 0x06, 0x97, 0x02, 0x35, 0x3f, 0xe2, 0xcd, 0x7a, 0x60, 0x8b, 0xd1, 0xfe, 0xf9,
	0xfd, 0x55, 0xa7, 0xda, 0x32, 0xf4, 0xfd, 0x84, 0xa4, 0xe9, 0x22, 0x4b, 0x82, 0x88, 0xce, 0x25,
	0xae, 0xf7, 0xa1, 0xea, 0xa7, 0x64, 0xdb, 0xbd, 0xb1, 0x80, 0xa3, 0x8e, 0x50, 0x59, 0x20, 0x75,
	0xbc, 0x20, 0xdb, 0x73, 0x81, 0x44, 0x7e, 0x29, 0x50, 0x43, 0xae, 0xe3, 0x93, 0x3d, 0x17, 0x21,
	0x97, 0x28, 0x97, 0x6e, 0x2d, 0xe0, 0xb4, 0xa4, 0x34, 0xa9, 0x24, 0x7a, 0x25, 0x51, 0x29, 0xd1,
	0x4a, 0x62, 0x5c, 0x52, 0x6b, 0x69, 0x56, 0x49, 0xec, 0x4a, 0x62, 0x52, 0xe2, 0x8f, 0xc1, 0xc3,
	0x2f, 0x07, 0xa4, 0xfc, 0x39, 0x20, 0xe5, 0xe5, 0x57, 0x00, 0xa1, 0xf8, 0xfa, 0x45, 0x86, 0x33,
	0xa2, 0x3b, 0xb0, 0x25, 0xfe, 0xee, 0x32, 0x88, 0x72, 0xbc, 0x0e, 0x7c, 0x4d, 0x31, 0x1e, 0xef,
	0xf6, 0xd6, 0xa3, 0x1a, 0x99, 0xca, 0x42, 0x7f, 0x0e, 0xa1, 0x24, 0x59, 0x4c, 0x22, 0x0d, 0x18,
	0xad, 0xdd, 0xde, 0xba, 0x13, 0xd8, 0x2c, 0x26, 0x91, 0xfe, 0x02, 0x36, 0x65, 0x8d, 0x57, 0x59,
	0x90, 0x13, 0xed, 0xc6, 0x68, 0xef, 0xf6, 0x56, 0x43, 0x00, 0x43, 0x11, 0xd5, 0xc8, 0x6a, 0xcd,
	0x52, 0xe2, 0x6b, 0xb7, 0xff, 0x21, 0x6f, 0x44, 0x64, 0xa8, 0x9f, 0xbe, 0x99, 0xca, 0xe8, 0xf5,
	0x8f, 0xd2, 0x04, 0xc7, 0xd2, 0x04, 0xbf, 0x4b, 0x13, 0x7c, 0x3e, 0x99, 0xca, 0xf1, 0x64, 0x2a,
	0xbf, 0x4e, 0xa6, 0xf2, 0xf6, 0x59, 0x1c, 0x52, 0x17, 0x87, 0x99, 0x1b, 0xf0, 0xd3, 0xf6, 0x22,
	0xe6, 0x93, 0xfa, 0x9e, 0xbc, 0xbb, 0x2f, 0x0e, 0xb8, 0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb5,
	0xf9, 0xd5, 0x8a, 0x41, 0x02, 0x00, 0x00,
}

func (m *OrderID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OSeq != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.OSeq))
		i--
		dAtA[i] = 0x20
	}
	if m.GSeq != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.GSeq))
		i--
		dAtA[i] = 0x18
	}
	if m.DSeq != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovOrder(uint64(m.DSeq))
	}
	if m.GSeq != 0 {
		n += 1 + sovOrder(uint64(m.GSeq))
	}
	if m.OSeq != 0 {
		n += 1 + sovOrder(uint64(m.OSeq))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GSeq", wireType)
			}
			m.GSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OSeq", wireType)
			}
			m.OSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
