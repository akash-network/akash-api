// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/sdl/v2/cpu.proto

package v2

import (
	fmt "fmt"
	v1beta3 "github.com/akash-network/akash-api/go/node/types/v1beta3"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResourceCPU struct {
	Units      cpuQuantity   `protobuf:"varint,1,opt,name=units,proto3,casttype=cpuQuantity" json:"units" yaml:"units"`
	Attributes cpuAttributes `protobuf:"bytes,2,rep,name=attributes,proto3,castrepeated=cpuAttributes" json:"attributes" yaml:"attributes"`
}

func (m *ResourceCPU) Reset()         { *m = ResourceCPU{} }
func (m *ResourceCPU) String() string { return proto.CompactTextString(m) }
func (*ResourceCPU) ProtoMessage()    {}
func (*ResourceCPU) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d87070d7e47d2ed, []int{0}
}
func (m *ResourceCPU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceCPU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceCPU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceCPU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceCPU.Merge(m, src)
}
func (m *ResourceCPU) XXX_Size() int {
	return m.Size()
}
func (m *ResourceCPU) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceCPU.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceCPU proto.InternalMessageInfo

func (m *ResourceCPU) GetUnits() cpuQuantity {
	if m != nil {
		return m.Units
	}
	return 0
}

func (m *ResourceCPU) GetAttributes() cpuAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceCPU)(nil), "akash.sdl.v2.ResourceCPU")
}

func init() { proto.RegisterFile("akash/sdl/v2/cpu.proto", fileDescriptor_4d87070d7e47d2ed) }

var fileDescriptor_4d87070d7e47d2ed = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x6e, 0xf2, 0x30,
	0x14, 0x85, 0xe3, 0xff, 0x17, 0x1d, 0x0c, 0x0c, 0x45, 0x55, 0x85, 0x90, 0x6a, 0xa3, 0x4c, 0x0c,
	0xad, 0x2d, 0x60, 0xeb, 0x56, 0x2a, 0xd1, 0xb5, 0x45, 0x62, 0xe9, 0xe6, 0x04, 0x2b, 0x44, 0x84,
	0x38, 0x8a, 0xed, 0x54, 0x3c, 0x40, 0xf7, 0x3e, 0x47, 0x9f, 0x84, 0x91, 0xb1, 0x93, 0x5b, 0x25,
	0x5b, 0x47, 0xc6, 0x4e, 0x55, 0xe2, 0x14, 0xd8, 0x7c, 0xcf, 0x3d, 0xc7, 0xe7, 0xd3, 0x85, 0x97,
	0x6c, 0xc5, 0xe4, 0x92, 0xca, 0x45, 0x44, 0xb3, 0x11, 0xf5, 0x13, 0x4d, 0x92, 0x54, 0x28, 0xd1,
	0x69, 0x55, 0x3a, 0x91, 0x8b, 0x88, 0x64, 0xa3, 0xde, 0x45, 0x20, 0x02, 0x51, 0x2d, 0x68, 0xf9,
	0xb2, 0x9e, 0x9e, 0x6b, 0xb3, 0x1e, 0x93, 0x9c, 0x66, 0x43, 0x8f, 0x2b, 0x36, 0xa6, 0x4c, 0xa9,
	0x34, 0xf4, 0xb4, 0xe2, 0xd6, 0xe3, 0x1a, 0x00, 0x9b, 0x33, 0x2e, 0x85, 0x4e, 0x7d, 0x7e, 0xff,
	0x38, 0xef, 0x3c, 0xc0, 0x86, 0x8e, 0x43, 0x25, 0xbb, 0xa0, 0x0f, 0x06, 0xed, 0xc9, 0x30, 0x37,
	0xb8, 0x31, 0x2f, 0x85, 0x6f, 0x83, 0xed, 0x66, 0x6f, 0x70, 0x6b, 0xc3, 0xd6, 0xd1, 0xad, 0x5b,
	0x8d, 0xee, 0x8f, 0xc1, 0x4d, 0x3f, 0xd1, 0x4f, 0x9a, 0xc5, 0x2a, 0x54, 0x9b, 0x99, 0x75, 0x75,
	0x5e, 0x01, 0x84, 0x87, 0x32, 0xd9, 0xfd, 0xd7, 0xff, 0x3f, 0x68, 0x8e, 0xae, 0x88, 0xc5, 0x2e,
	0x91, 0x48, 0x8d, 0x44, 0xee, 0xfe, 0x5c, 0x93, 0xe9, 0xd6, 0x60, 0x27, 0x37, 0x18, 0x1e, 0xa4,
	0xb2, 0xf6, 0xe4, 0x9b, 0xbd, 0xc1, 0xe7, 0xb6, 0xfb, 0xa8, 0xb9, 0xef, 0x9f, 0xb8, 0xed, 0x27,
	0xfa, 0x98, 0x99, 0x9d, 0x24, 0x26, 0xd3, 0x6d, 0x8e, 0xc0, 0x2e, 0x47, 0xe0, 0x2b, 0x47, 0xe0,
	0xad, 0x40, 0xce, 0xae, 0x40, 0xce, 0x47, 0x81, 0x9c, 0xe7, 0xeb, 0x20, 0x54, 0x4b, 0xed, 0x11,
	0x5f, 0xac, 0x69, 0x85, 0x75, 0x13, 0x73, 0xf5, 0x22, 0xd2, 0x55, 0x3d, 0xb1, 0x24, 0xa4, 0x81,
	0xa8, 0x4f, 0xef, 0x9d, 0x55, 0xf7, 0x1a, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x30, 0x0b, 0xe4,
	0x9e, 0x91, 0x01, 0x00, 0x00,
}

func (m *ResourceCPU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceCPU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceCPU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCpu(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Units != 0 {
		i = encodeVarintCpu(dAtA, i, uint64(m.Units))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCpu(dAtA []byte, offset int, v uint64) int {
	offset -= sovCpu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResourceCPU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Units != 0 {
		n += 1 + sovCpu(uint64(m.Units))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovCpu(uint64(l))
		}
	}
	return n
}

func sovCpu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCpu(x uint64) (n int) {
	return sovCpu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceCPU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCpu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceCPU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceCPU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			m.Units = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Units |= cpuQuantity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCpu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCpu
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCpu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, v1beta3.Attribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCpu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCpu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCpu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCpu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCpu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCpu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCpu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCpu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCpu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCpu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCpu = fmt.Errorf("proto: unexpected end of group")
)
