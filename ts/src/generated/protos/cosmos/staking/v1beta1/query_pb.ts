// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/staking/v1beta1/query.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_base_query_v1beta1_pagination } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.ts";
import type { DelegationResponse, DelegationResponseJson, HistoricalInfo, HistoricalInfoJson, Params, ParamsJson, Pool, PoolJson, RedelegationResponse, RedelegationResponseJson, TokenizeShareRecord, TokenizeShareRecordJson, UnbondingDelegation, UnbondingDelegationJson, Validator, ValidatorJson } from "./staking_pb.ts";
import { file_cosmos_staking_v1beta1_staking } from "./staking_pb.ts";
import type { Coin, CoinJson } from "../../base/v1beta1/coin_pb.ts";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import { file_cosmos_query_v1_query } from "../../query/v1/query_pb.ts";
import { file_amino_amino } from "../../../amino/amino_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/staking/v1beta1/query.proto.
 */
export const file_cosmos_staking_v1beta1_query: GenFile = /*@__PURE__*/
  fileDesc("", [file_cosmos_base_query_v1beta1_pagination, file_gogoproto_gogo, file_google_api_annotations, file_cosmos_staking_v1beta1_staking, file_cosmos_base_v1beta1_coin, file_cosmos_proto_cosmos, file_cosmos_query_v1_query, file_amino_amino]);

/**
 * QueryValidatorsRequest is request type for Query/Validators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsRequest
 */
export type QueryValidatorsRequest = Message<"cosmos.staking.v1beta1.QueryValidatorsRequest"> & {
  /**
   * status enables to query for validators matching a given status.
   *
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryValidatorsRequest is request type for Query/Validators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsRequest
 */
export type QueryValidatorsRequestJson = {
  /**
   * status enables to query for validators matching a given status.
   *
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorsRequest.
 * Use `create(QueryValidatorsRequestSchema)` to create a new message.
 */
export const QueryValidatorsRequestSchema: GenMessage<QueryValidatorsRequest, QueryValidatorsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 0);

/**
 * QueryValidatorsResponse is response type for the Query/Validators RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsResponse
 */
export type QueryValidatorsResponse = Message<"cosmos.staking.v1beta1.QueryValidatorsResponse"> & {
  /**
   * validators contains all the queried validators.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators: Validator[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryValidatorsResponse is response type for the Query/Validators RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorsResponse
 */
export type QueryValidatorsResponseJson = {
  /**
   * validators contains all the queried validators.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators?: ValidatorJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorsResponse.
 * Use `create(QueryValidatorsResponseSchema)` to create a new message.
 */
export const QueryValidatorsResponseSchema: GenMessage<QueryValidatorsResponse, QueryValidatorsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 1);

/**
 * QueryValidatorRequest is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorRequest
 */
export type QueryValidatorRequest = Message<"cosmos.staking.v1beta1.QueryValidatorRequest"> & {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr: string;
};

/**
 * QueryValidatorRequest is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorRequest
 */
export type QueryValidatorRequestJson = {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorRequest.
 * Use `create(QueryValidatorRequestSchema)` to create a new message.
 */
export const QueryValidatorRequestSchema: GenMessage<QueryValidatorRequest, QueryValidatorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 2);

/**
 * QueryValidatorResponse is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorResponse
 */
export type QueryValidatorResponse = Message<"cosmos.staking.v1beta1.QueryValidatorResponse"> & {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: Validator;
};

/**
 * QueryValidatorResponse is response type for the Query/Validator RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorResponse
 */
export type QueryValidatorResponseJson = {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: ValidatorJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorResponse.
 * Use `create(QueryValidatorResponseSchema)` to create a new message.
 */
export const QueryValidatorResponseSchema: GenMessage<QueryValidatorResponse, QueryValidatorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 3);

/**
 * QueryValidatorDelegationsRequest is request type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
 */
export type QueryValidatorDelegationsRequest = Message<"cosmos.staking.v1beta1.QueryValidatorDelegationsRequest"> & {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryValidatorDelegationsRequest is request type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest
 */
export type QueryValidatorDelegationsRequestJson = {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorDelegationsRequest.
 * Use `create(QueryValidatorDelegationsRequestSchema)` to create a new message.
 */
export const QueryValidatorDelegationsRequestSchema: GenMessage<QueryValidatorDelegationsRequest, QueryValidatorDelegationsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 4);

/**
 * QueryValidatorDelegationsResponse is response type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
 */
export type QueryValidatorDelegationsResponse = Message<"cosmos.staking.v1beta1.QueryValidatorDelegationsResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses: DelegationResponse[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryValidatorDelegationsResponse is response type for the
 * Query/ValidatorDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse
 */
export type QueryValidatorDelegationsResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses?: DelegationResponseJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorDelegationsResponse.
 * Use `create(QueryValidatorDelegationsResponseSchema)` to create a new message.
 */
export const QueryValidatorDelegationsResponseSchema: GenMessage<QueryValidatorDelegationsResponse, QueryValidatorDelegationsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 5);

/**
 * QueryValidatorUnbondingDelegationsRequest is required type for the
 * Query/ValidatorUnbondingDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
 */
export type QueryValidatorUnbondingDelegationsRequest = Message<"cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest"> & {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryValidatorUnbondingDelegationsRequest is required type for the
 * Query/ValidatorUnbondingDelegations RPC method
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest
 */
export type QueryValidatorUnbondingDelegationsRequestJson = {
  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest.
 * Use `create(QueryValidatorUnbondingDelegationsRequestSchema)` to create a new message.
 */
export const QueryValidatorUnbondingDelegationsRequestSchema: GenMessage<QueryValidatorUnbondingDelegationsRequest, QueryValidatorUnbondingDelegationsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 6);

/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the
 * Query/ValidatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
 */
export type QueryValidatorUnbondingDelegationsResponse = Message<"cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses: UnbondingDelegation[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the
 * Query/ValidatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse
 */
export type QueryValidatorUnbondingDelegationsResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses?: UnbondingDelegationJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse.
 * Use `create(QueryValidatorUnbondingDelegationsResponseSchema)` to create a new message.
 */
export const QueryValidatorUnbondingDelegationsResponseSchema: GenMessage<QueryValidatorUnbondingDelegationsResponse, QueryValidatorUnbondingDelegationsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 7);

/**
 * QueryDelegationRequest is request type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationRequest
 */
export type QueryDelegationRequest = Message<"cosmos.staking.v1beta1.QueryDelegationRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr: string;
};

/**
 * QueryDelegationRequest is request type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationRequest
 */
export type QueryDelegationRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegationRequest.
 * Use `create(QueryDelegationRequestSchema)` to create a new message.
 */
export const QueryDelegationRequestSchema: GenMessage<QueryDelegationRequest, QueryDelegationRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 8);

/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationResponse
 */
export type QueryDelegationResponse = Message<"cosmos.staking.v1beta1.QueryDelegationResponse"> & {
  /**
   * delegation_responses defines the delegation info of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.DelegationResponse delegation_response = 1;
   */
  delegationResponse?: DelegationResponse;
};

/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegationResponse
 */
export type QueryDelegationResponseJson = {
  /**
   * delegation_responses defines the delegation info of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.DelegationResponse delegation_response = 1;
   */
  delegationResponse?: DelegationResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegationResponse.
 * Use `create(QueryDelegationResponseSchema)` to create a new message.
 */
export const QueryDelegationResponseSchema: GenMessage<QueryDelegationResponse, QueryDelegationResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 9);

/**
 * QueryUnbondingDelegationRequest is request type for the
 * Query/UnbondingDelegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
 */
export type QueryUnbondingDelegationRequest = Message<"cosmos.staking.v1beta1.QueryUnbondingDelegationRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr: string;
};

/**
 * QueryUnbondingDelegationRequest is request type for the
 * Query/UnbondingDelegation RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest
 */
export type QueryUnbondingDelegationRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryUnbondingDelegationRequest.
 * Use `create(QueryUnbondingDelegationRequestSchema)` to create a new message.
 */
export const QueryUnbondingDelegationRequestSchema: GenMessage<QueryUnbondingDelegationRequest, QueryUnbondingDelegationRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 10);

/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation
 * RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
 */
export type QueryUnbondingDelegationResponse = Message<"cosmos.staking.v1beta1.QueryUnbondingDelegationResponse"> & {
  /**
   * unbond defines the unbonding information of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.UnbondingDelegation unbond = 1;
   */
  unbond?: UnbondingDelegation;
};

/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation
 * RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse
 */
export type QueryUnbondingDelegationResponseJson = {
  /**
   * unbond defines the unbonding information of a delegation.
   *
   * @generated from field: cosmos.staking.v1beta1.UnbondingDelegation unbond = 1;
   */
  unbond?: UnbondingDelegationJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryUnbondingDelegationResponse.
 * Use `create(QueryUnbondingDelegationResponseSchema)` to create a new message.
 */
export const QueryUnbondingDelegationResponseSchema: GenMessage<QueryUnbondingDelegationResponse, QueryUnbondingDelegationResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 11);

/**
 * QueryDelegatorDelegationsRequest is request type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
 */
export type QueryDelegatorDelegationsRequest = Message<"cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryDelegatorDelegationsRequest is request type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest
 */
export type QueryDelegatorDelegationsRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest.
 * Use `create(QueryDelegatorDelegationsRequestSchema)` to create a new message.
 */
export const QueryDelegatorDelegationsRequestSchema: GenMessage<QueryDelegatorDelegationsRequest, QueryDelegatorDelegationsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 12);

/**
 * QueryDelegatorDelegationsResponse is response type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
 */
export type QueryDelegatorDelegationsResponse = Message<"cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse"> & {
  /**
   * delegation_responses defines all the delegations' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses: DelegationResponse[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryDelegatorDelegationsResponse is response type for the
 * Query/DelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse
 */
export type QueryDelegatorDelegationsResponseJson = {
  /**
   * delegation_responses defines all the delegations' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.DelegationResponse delegation_responses = 1;
   */
  delegationResponses?: DelegationResponseJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse.
 * Use `create(QueryDelegatorDelegationsResponseSchema)` to create a new message.
 */
export const QueryDelegatorDelegationsResponseSchema: GenMessage<QueryDelegatorDelegationsResponse, QueryDelegatorDelegationsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 13);

/**
 * QueryDelegatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
 */
export type QueryDelegatorUnbondingDelegationsRequest = Message<"cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryDelegatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorUnbondingDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest
 */
export type QueryDelegatorUnbondingDelegationsRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest.
 * Use `create(QueryDelegatorUnbondingDelegationsRequestSchema)` to create a new message.
 */
export const QueryDelegatorUnbondingDelegationsRequestSchema: GenMessage<QueryDelegatorUnbondingDelegationsRequest, QueryDelegatorUnbondingDelegationsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 14);

/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the
 * Query/UnbondingDelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
 */
export type QueryDelegatorUnbondingDelegationsResponse = Message<"cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses: UnbondingDelegation[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the
 * Query/UnbondingDelegatorDelegations RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse
 */
export type QueryDelegatorUnbondingDelegationsResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.UnbondingDelegation unbonding_responses = 1;
   */
  unbondingResponses?: UnbondingDelegationJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse.
 * Use `create(QueryDelegatorUnbondingDelegationsResponseSchema)` to create a new message.
 */
export const QueryDelegatorUnbondingDelegationsResponseSchema: GenMessage<QueryDelegatorUnbondingDelegationsResponse, QueryDelegatorUnbondingDelegationsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 15);

/**
 * QueryRedelegationsRequest is request type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsRequest
 */
export type QueryRedelegationsRequest = Message<"cosmos.staking.v1beta1.QueryRedelegationsRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * src_validator_addr defines the validator address to redelegate from.
   *
   * @generated from field: string src_validator_addr = 2;
   */
  srcValidatorAddr: string;

  /**
   * dst_validator_addr defines the validator address to redelegate to.
   *
   * @generated from field: string dst_validator_addr = 3;
   */
  dstValidatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;
};

/**
 * QueryRedelegationsRequest is request type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsRequest
 */
export type QueryRedelegationsRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * src_validator_addr defines the validator address to redelegate from.
   *
   * @generated from field: string src_validator_addr = 2;
   */
  srcValidatorAddr?: string;

  /**
   * dst_validator_addr defines the validator address to redelegate to.
   *
   * @generated from field: string dst_validator_addr = 3;
   */
  dstValidatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryRedelegationsRequest.
 * Use `create(QueryRedelegationsRequestSchema)` to create a new message.
 */
export const QueryRedelegationsRequestSchema: GenMessage<QueryRedelegationsRequest, QueryRedelegationsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 16);

/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsResponse
 */
export type QueryRedelegationsResponse = Message<"cosmos.staking.v1beta1.QueryRedelegationsResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses = 1;
   */
  redelegationResponses: RedelegationResponse[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryRedelegationsResponse
 */
export type QueryRedelegationsResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.RedelegationResponse redelegation_responses = 1;
   */
  redelegationResponses?: RedelegationResponseJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryRedelegationsResponse.
 * Use `create(QueryRedelegationsResponseSchema)` to create a new message.
 */
export const QueryRedelegationsResponseSchema: GenMessage<QueryRedelegationsResponse, QueryRedelegationsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 17);

/**
 * QueryDelegatorValidatorsRequest is request type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
 */
export type QueryDelegatorValidatorsRequest = Message<"cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryDelegatorValidatorsRequest is request type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest
 */
export type QueryDelegatorValidatorsRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest.
 * Use `create(QueryDelegatorValidatorsRequestSchema)` to create a new message.
 */
export const QueryDelegatorValidatorsRequestSchema: GenMessage<QueryDelegatorValidatorsRequest, QueryDelegatorValidatorsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 18);

/**
 * QueryDelegatorValidatorsResponse is response type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
 */
export type QueryDelegatorValidatorsResponse = Message<"cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse"> & {
  /**
   * validators defines the validators' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators: Validator[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryDelegatorValidatorsResponse is response type for the
 * Query/DelegatorValidators RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse
 */
export type QueryDelegatorValidatorsResponseJson = {
  /**
   * validators defines the validators' info of a delegator.
   *
   * @generated from field: repeated cosmos.staking.v1beta1.Validator validators = 1;
   */
  validators?: ValidatorJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse.
 * Use `create(QueryDelegatorValidatorsResponseSchema)` to create a new message.
 */
export const QueryDelegatorValidatorsResponseSchema: GenMessage<QueryDelegatorValidatorsResponse, QueryDelegatorValidatorsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 19);

/**
 * QueryDelegatorValidatorRequest is request type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
 */
export type QueryDelegatorValidatorRequest = Message<"cosmos.staking.v1beta1.QueryDelegatorValidatorRequest"> & {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr: string;
};

/**
 * QueryDelegatorValidatorRequest is request type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest
 */
export type QueryDelegatorValidatorRequestJson = {
  /**
   * delegator_addr defines the delegator address to query for.
   *
   * @generated from field: string delegator_addr = 1;
   */
  delegatorAddr?: string;

  /**
   * validator_addr defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 2;
   */
  validatorAddr?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorValidatorRequest.
 * Use `create(QueryDelegatorValidatorRequestSchema)` to create a new message.
 */
export const QueryDelegatorValidatorRequestSchema: GenMessage<QueryDelegatorValidatorRequest, QueryDelegatorValidatorRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 20);

/**
 * QueryDelegatorValidatorResponse response type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
 */
export type QueryDelegatorValidatorResponse = Message<"cosmos.staking.v1beta1.QueryDelegatorValidatorResponse"> & {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: Validator;
};

/**
 * QueryDelegatorValidatorResponse response type for the
 * Query/DelegatorValidator RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse
 */
export type QueryDelegatorValidatorResponseJson = {
  /**
   * validator defines the validator info.
   *
   * @generated from field: cosmos.staking.v1beta1.Validator validator = 1;
   */
  validator?: ValidatorJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryDelegatorValidatorResponse.
 * Use `create(QueryDelegatorValidatorResponseSchema)` to create a new message.
 */
export const QueryDelegatorValidatorResponseSchema: GenMessage<QueryDelegatorValidatorResponse, QueryDelegatorValidatorResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 21);

/**
 * QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoRequest
 */
export type QueryHistoricalInfoRequest = Message<"cosmos.staking.v1beta1.QueryHistoricalInfoRequest"> & {
  /**
   * height defines at which height to query the historical info.
   *
   * @generated from field: int64 height = 1;
   */
  height: bigint;
};

/**
 * QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoRequest
 */
export type QueryHistoricalInfoRequestJson = {
  /**
   * height defines at which height to query the historical info.
   *
   * @generated from field: int64 height = 1;
   */
  height?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryHistoricalInfoRequest.
 * Use `create(QueryHistoricalInfoRequestSchema)` to create a new message.
 */
export const QueryHistoricalInfoRequestSchema: GenMessage<QueryHistoricalInfoRequest, QueryHistoricalInfoRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 22);

/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoResponse
 */
export type QueryHistoricalInfoResponse = Message<"cosmos.staking.v1beta1.QueryHistoricalInfoResponse"> & {
  /**
   * hist defines the historical info at the given height.
   *
   * @generated from field: cosmos.staking.v1beta1.HistoricalInfo hist = 1;
   */
  hist?: HistoricalInfo;
};

/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
 * method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryHistoricalInfoResponse
 */
export type QueryHistoricalInfoResponseJson = {
  /**
   * hist defines the historical info at the given height.
   *
   * @generated from field: cosmos.staking.v1beta1.HistoricalInfo hist = 1;
   */
  hist?: HistoricalInfoJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryHistoricalInfoResponse.
 * Use `create(QueryHistoricalInfoResponseSchema)` to create a new message.
 */
export const QueryHistoricalInfoResponseSchema: GenMessage<QueryHistoricalInfoResponse, QueryHistoricalInfoResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 23);

/**
 * QueryPoolRequest is request type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolRequest
 */
export type QueryPoolRequest = Message<"cosmos.staking.v1beta1.QueryPoolRequest"> & {
};

/**
 * QueryPoolRequest is request type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolRequest
 */
export type QueryPoolRequestJson = {
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryPoolRequest.
 * Use `create(QueryPoolRequestSchema)` to create a new message.
 */
export const QueryPoolRequestSchema: GenMessage<QueryPoolRequest, QueryPoolRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 24);

/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolResponse
 */
export type QueryPoolResponse = Message<"cosmos.staking.v1beta1.QueryPoolResponse"> & {
  /**
   * pool defines the pool info.
   *
   * @generated from field: cosmos.staking.v1beta1.Pool pool = 1;
   */
  pool?: Pool;
};

/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryPoolResponse
 */
export type QueryPoolResponseJson = {
  /**
   * pool defines the pool info.
   *
   * @generated from field: cosmos.staking.v1beta1.Pool pool = 1;
   */
  pool?: PoolJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryPoolResponse.
 * Use `create(QueryPoolResponseSchema)` to create a new message.
 */
export const QueryPoolResponseSchema: GenMessage<QueryPoolResponse, QueryPoolResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 25);

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsRequest
 */
export type QueryParamsRequest = Message<"cosmos.staking.v1beta1.QueryParamsRequest"> & {
};

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsRequest
 */
export type QueryParamsRequestJson = {
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryParamsRequest.
 * Use `create(QueryParamsRequestSchema)` to create a new message.
 */
export const QueryParamsRequestSchema: GenMessage<QueryParamsRequest, QueryParamsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 26);

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsResponse
 */
export type QueryParamsResponse = Message<"cosmos.staking.v1beta1.QueryParamsResponse"> & {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: cosmos.staking.v1beta1.Params params = 1;
   */
  params?: Params;
};

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryParamsResponse
 */
export type QueryParamsResponseJson = {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: cosmos.staking.v1beta1.Params params = 1;
   */
  params?: ParamsJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryParamsResponse.
 * Use `create(QueryParamsResponseSchema)` to create a new message.
 */
export const QueryParamsResponseSchema: GenMessage<QueryParamsResponse, QueryParamsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 27);

/**
 * QueryTokenizeShareRecordByIdRequest is request type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdRequest
 */
export type QueryTokenizeShareRecordByIdRequest = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdRequest"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;
};

/**
 * QueryTokenizeShareRecordByIdRequest is request type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdRequest
 */
export type QueryTokenizeShareRecordByIdRequestJson = {
  /**
   * @generated from field: uint64 id = 1;
   */
  id?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdRequest.
 * Use `create(QueryTokenizeShareRecordByIdRequestSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordByIdRequestSchema: GenMessage<QueryTokenizeShareRecordByIdRequest, QueryTokenizeShareRecordByIdRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 28);

/**
 * QueryTokenizeShareRecordByIdRequest is response type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdResponse
 */
export type QueryTokenizeShareRecordByIdResponse = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecord;
};

/**
 * QueryTokenizeShareRecordByIdRequest is response type for the
 * Query/QueryTokenizeShareRecordById RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdResponse
 */
export type QueryTokenizeShareRecordByIdResponseJson = {
  /**
   * @generated from field: cosmos.staking.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecordJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordByIdResponse.
 * Use `create(QueryTokenizeShareRecordByIdResponseSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordByIdResponseSchema: GenMessage<QueryTokenizeShareRecordByIdResponse, QueryTokenizeShareRecordByIdResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 29);

/**
 * QueryTokenizeShareRecordByDenomRequest is request type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomRequest
 */
export type QueryTokenizeShareRecordByDenomRequest = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomRequest"> & {
  /**
   * @generated from field: string denom = 1;
   */
  denom: string;
};

/**
 * QueryTokenizeShareRecordByDenomRequest is request type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomRequest
 */
export type QueryTokenizeShareRecordByDenomRequestJson = {
  /**
   * @generated from field: string denom = 1;
   */
  denom?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomRequest.
 * Use `create(QueryTokenizeShareRecordByDenomRequestSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordByDenomRequestSchema: GenMessage<QueryTokenizeShareRecordByDenomRequest, QueryTokenizeShareRecordByDenomRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 30);

/**
 * QueryTokenizeShareRecordByDenomResponse is response type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomResponse
 */
export type QueryTokenizeShareRecordByDenomResponse = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomResponse"> & {
  /**
   * @generated from field: cosmos.staking.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecord;
};

/**
 * QueryTokenizeShareRecordByDenomResponse is response type for the
 * Query/QueryTokenizeShareRecordByDenom RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomResponse
 */
export type QueryTokenizeShareRecordByDenomResponseJson = {
  /**
   * @generated from field: cosmos.staking.v1beta1.TokenizeShareRecord record = 1;
   */
  record?: TokenizeShareRecordJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordByDenomResponse.
 * Use `create(QueryTokenizeShareRecordByDenomResponseSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordByDenomResponseSchema: GenMessage<QueryTokenizeShareRecordByDenomResponse, QueryTokenizeShareRecordByDenomResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 31);

/**
 * QueryTokenizeShareRecordsOwnedRequest is request type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedRequest
 */
export type QueryTokenizeShareRecordsOwnedRequest = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedRequest"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;
};

/**
 * QueryTokenizeShareRecordsOwnedRequest is request type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedRequest
 */
export type QueryTokenizeShareRecordsOwnedRequestJson = {
  /**
   * @generated from field: string owner = 1;
   */
  owner?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedRequest.
 * Use `create(QueryTokenizeShareRecordsOwnedRequestSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordsOwnedRequestSchema: GenMessage<QueryTokenizeShareRecordsOwnedRequest, QueryTokenizeShareRecordsOwnedRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 32);

/**
 * QueryTokenizeShareRecordsOwnedResponse is response type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedResponse
 */
export type QueryTokenizeShareRecordsOwnedResponse = Message<"cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.TokenizeShareRecord records = 1;
   */
  records: TokenizeShareRecord[];
};

/**
 * QueryTokenizeShareRecordsOwnedResponse is response type for the
 * Query/QueryTokenizeShareRecordsOwned RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedResponse
 */
export type QueryTokenizeShareRecordsOwnedResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.TokenizeShareRecord records = 1;
   */
  records?: TokenizeShareRecordJson[];
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareRecordsOwnedResponse.
 * Use `create(QueryTokenizeShareRecordsOwnedResponseSchema)` to create a new message.
 */
export const QueryTokenizeShareRecordsOwnedResponseSchema: GenMessage<QueryTokenizeShareRecordsOwnedResponse, QueryTokenizeShareRecordsOwnedResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 33);

/**
 * QueryAllTokenizeShareRecordsRequest is request type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsRequest
 */
export type QueryAllTokenizeShareRecordsRequest = Message<"cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;
};

/**
 * QueryAllTokenizeShareRecordsRequest is request type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsRequest
 */
export type QueryAllTokenizeShareRecordsRequestJson = {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsRequest.
 * Use `create(QueryAllTokenizeShareRecordsRequestSchema)` to create a new message.
 */
export const QueryAllTokenizeShareRecordsRequestSchema: GenMessage<QueryAllTokenizeShareRecordsRequest, QueryAllTokenizeShareRecordsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 34);

/**
 * QueryAllTokenizeShareRecordsResponse is response type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsResponse
 */
export type QueryAllTokenizeShareRecordsResponse = Message<"cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsResponse"> & {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.TokenizeShareRecord records = 1;
   */
  records: TokenizeShareRecord[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryAllTokenizeShareRecordsResponse is response type for the
 * Query/QueryAllTokenizeShareRecords RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsResponse
 */
export type QueryAllTokenizeShareRecordsResponseJson = {
  /**
   * @generated from field: repeated cosmos.staking.v1beta1.TokenizeShareRecord records = 1;
   */
  records?: TokenizeShareRecordJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryAllTokenizeShareRecordsResponse.
 * Use `create(QueryAllTokenizeShareRecordsResponseSchema)` to create a new message.
 */
export const QueryAllTokenizeShareRecordsResponseSchema: GenMessage<QueryAllTokenizeShareRecordsResponse, QueryAllTokenizeShareRecordsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 35);

/**
 * QueryLastTokenizeShareRecordIdRequest is request type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdRequest
 */
export type QueryLastTokenizeShareRecordIdRequest = Message<"cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdRequest"> & {
};

/**
 * QueryLastTokenizeShareRecordIdRequest is request type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdRequest
 */
export type QueryLastTokenizeShareRecordIdRequestJson = {
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdRequest.
 * Use `create(QueryLastTokenizeShareRecordIdRequestSchema)` to create a new message.
 */
export const QueryLastTokenizeShareRecordIdRequestSchema: GenMessage<QueryLastTokenizeShareRecordIdRequest, QueryLastTokenizeShareRecordIdRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 36);

/**
 * QueryLastTokenizeShareRecordIdResponse is response type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdResponse
 */
export type QueryLastTokenizeShareRecordIdResponse = Message<"cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdResponse"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;
};

/**
 * QueryLastTokenizeShareRecordIdResponse is response type for the
 * Query/QueryLastTokenizeShareRecordId RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdResponse
 */
export type QueryLastTokenizeShareRecordIdResponseJson = {
  /**
   * @generated from field: uint64 id = 1;
   */
  id?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryLastTokenizeShareRecordIdResponse.
 * Use `create(QueryLastTokenizeShareRecordIdResponseSchema)` to create a new message.
 */
export const QueryLastTokenizeShareRecordIdResponseSchema: GenMessage<QueryLastTokenizeShareRecordIdResponse, QueryLastTokenizeShareRecordIdResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 37);

/**
 * QueryTotalTokenizeSharedAssetsRequest is request type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsRequest
 */
export type QueryTotalTokenizeSharedAssetsRequest = Message<"cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsRequest"> & {
};

/**
 * QueryTotalTokenizeSharedAssetsRequest is request type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsRequest
 */
export type QueryTotalTokenizeSharedAssetsRequestJson = {
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsRequest.
 * Use `create(QueryTotalTokenizeSharedAssetsRequestSchema)` to create a new message.
 */
export const QueryTotalTokenizeSharedAssetsRequestSchema: GenMessage<QueryTotalTokenizeSharedAssetsRequest, QueryTotalTokenizeSharedAssetsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 38);

/**
 * QueryTotalTokenizeSharedAssetsResponse is response type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsResponse
 */
export type QueryTotalTokenizeSharedAssetsResponse = Message<"cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsResponse"> & {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin value = 1;
   */
  value?: Coin;
};

/**
 * QueryTotalTokenizeSharedAssetsResponse is response type for the
 * Query/QueryTotalTokenizeSharedAssets RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsResponse
 */
export type QueryTotalTokenizeSharedAssetsResponseJson = {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin value = 1;
   */
  value?: CoinJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTotalTokenizeSharedAssetsResponse.
 * Use `create(QueryTotalTokenizeSharedAssetsResponseSchema)` to create a new message.
 */
export const QueryTotalTokenizeSharedAssetsResponseSchema: GenMessage<QueryTotalTokenizeSharedAssetsResponse, QueryTotalTokenizeSharedAssetsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 39);

/**
 * QueryTotalLiquidStakedRequest is request type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalLiquidStaked
 */
export type QueryTotalLiquidStaked = Message<"cosmos.staking.v1beta1.QueryTotalLiquidStaked"> & {
};

/**
 * QueryTotalLiquidStakedRequest is request type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalLiquidStaked
 */
export type QueryTotalLiquidStakedJson = {
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTotalLiquidStaked.
 * Use `create(QueryTotalLiquidStakedSchema)` to create a new message.
 */
export const QueryTotalLiquidStakedSchema: GenMessage<QueryTotalLiquidStaked, QueryTotalLiquidStakedJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 40);

/**
 * QueryTotalLiquidStakedResponse is response type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalLiquidStakedResponse
 */
export type QueryTotalLiquidStakedResponse = Message<"cosmos.staking.v1beta1.QueryTotalLiquidStakedResponse"> & {
  /**
   * @generated from field: string tokens = 1;
   */
  tokens: string;
};

/**
 * QueryTotalLiquidStakedResponse is response type for the
 * Query/QueryQueryTotalLiquidStaked RPC method.
 *
 * @generated from message cosmos.staking.v1beta1.QueryTotalLiquidStakedResponse
 */
export type QueryTotalLiquidStakedResponseJson = {
  /**
   * @generated from field: string tokens = 1;
   */
  tokens?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTotalLiquidStakedResponse.
 * Use `create(QueryTotalLiquidStakedResponseSchema)` to create a new message.
 */
export const QueryTotalLiquidStakedResponseSchema: GenMessage<QueryTotalLiquidStakedResponse, QueryTotalLiquidStakedResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 41);

/**
 * QueryTokenizeShareLockInfo queries the tokenize share lock information
 * associated with given account
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareLockInfo
 */
export type QueryTokenizeShareLockInfo = Message<"cosmos.staking.v1beta1.QueryTokenizeShareLockInfo"> & {
  /**
   * @generated from field: string address = 1;
   */
  address: string;
};

/**
 * QueryTokenizeShareLockInfo queries the tokenize share lock information
 * associated with given account
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareLockInfo
 */
export type QueryTokenizeShareLockInfoJson = {
  /**
   * @generated from field: string address = 1;
   */
  address?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareLockInfo.
 * Use `create(QueryTokenizeShareLockInfoSchema)` to create a new message.
 */
export const QueryTokenizeShareLockInfoSchema: GenMessage<QueryTokenizeShareLockInfo, QueryTokenizeShareLockInfoJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 42);

/**
 * QueryTokenizeShareLockInfoResponse is the response from the
 * QueryTokenizeShareLockInfo query
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareLockInfoResponse
 */
export type QueryTokenizeShareLockInfoResponse = Message<"cosmos.staking.v1beta1.QueryTokenizeShareLockInfoResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: string expiration_time = 2;
   */
  expirationTime: string;
};

/**
 * QueryTokenizeShareLockInfoResponse is the response from the
 * QueryTokenizeShareLockInfo query
 *
 * @generated from message cosmos.staking.v1beta1.QueryTokenizeShareLockInfoResponse
 */
export type QueryTokenizeShareLockInfoResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: string expiration_time = 2;
   */
  expirationTime?: string;
};

/**
 * Describes the message cosmos.staking.v1beta1.QueryTokenizeShareLockInfoResponse.
 * Use `create(QueryTokenizeShareLockInfoResponseSchema)` to create a new message.
 */
export const QueryTokenizeShareLockInfoResponseSchema: GenMessage<QueryTokenizeShareLockInfoResponse, QueryTokenizeShareLockInfoResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_query, 43);

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service cosmos.staking.v1beta1.Query
 */
export const Query: GenService<{
  /**
   * Validators queries all validators that match the given status.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Validators
   */
  validators: {
    methodKind: "unary";
    input: typeof QueryValidatorsRequestSchema;
    output: typeof QueryValidatorsResponseSchema;
  },
  /**
   * Validator queries validator info for given validator address.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Validator
   */
  validator: {
    methodKind: "unary";
    input: typeof QueryValidatorRequestSchema;
    output: typeof QueryValidatorResponseSchema;
  },
  /**
   * ValidatorDelegations queries delegate info for given validator.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.ValidatorDelegations
   */
  validatorDelegations: {
    methodKind: "unary";
    input: typeof QueryValidatorDelegationsRequestSchema;
    output: typeof QueryValidatorDelegationsResponseSchema;
  },
  /**
   * ValidatorUnbondingDelegations queries unbonding delegations of a validator.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.ValidatorUnbondingDelegations
   */
  validatorUnbondingDelegations: {
    methodKind: "unary";
    input: typeof QueryValidatorUnbondingDelegationsRequestSchema;
    output: typeof QueryValidatorUnbondingDelegationsResponseSchema;
  },
  /**
   * Delegation queries delegate info for given validator delegator pair.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Delegation
   */
  delegation: {
    methodKind: "unary";
    input: typeof QueryDelegationRequestSchema;
    output: typeof QueryDelegationResponseSchema;
  },
  /**
   * UnbondingDelegation queries unbonding info for given validator delegator
   * pair.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.UnbondingDelegation
   */
  unbondingDelegation: {
    methodKind: "unary";
    input: typeof QueryUnbondingDelegationRequestSchema;
    output: typeof QueryUnbondingDelegationResponseSchema;
  },
  /**
   * DelegatorDelegations queries all delegations of a given delegator address.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.DelegatorDelegations
   */
  delegatorDelegations: {
    methodKind: "unary";
    input: typeof QueryDelegatorDelegationsRequestSchema;
    output: typeof QueryDelegatorDelegationsResponseSchema;
  },
  /**
   * DelegatorUnbondingDelegations queries all unbonding delegations of a given
   * delegator address.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.DelegatorUnbondingDelegations
   */
  delegatorUnbondingDelegations: {
    methodKind: "unary";
    input: typeof QueryDelegatorUnbondingDelegationsRequestSchema;
    output: typeof QueryDelegatorUnbondingDelegationsResponseSchema;
  },
  /**
   * Redelegations queries redelegations of given address.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Redelegations
   */
  redelegations: {
    methodKind: "unary";
    input: typeof QueryRedelegationsRequestSchema;
    output: typeof QueryRedelegationsResponseSchema;
  },
  /**
   * DelegatorValidators queries all validators info for given delegator
   * address.
   *
   * When called from another module, this query might consume a high amount of
   * gas if the pagination field is incorrectly set.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.DelegatorValidators
   */
  delegatorValidators: {
    methodKind: "unary";
    input: typeof QueryDelegatorValidatorsRequestSchema;
    output: typeof QueryDelegatorValidatorsResponseSchema;
  },
  /**
   * DelegatorValidator queries validator info for given delegator validator
   * pair.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.DelegatorValidator
   */
  delegatorValidator: {
    methodKind: "unary";
    input: typeof QueryDelegatorValidatorRequestSchema;
    output: typeof QueryDelegatorValidatorResponseSchema;
  },
  /**
   * Query for individual tokenize share record information by share by id
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TokenizeShareRecordById
   */
  tokenizeShareRecordById: {
    methodKind: "unary";
    input: typeof QueryTokenizeShareRecordByIdRequestSchema;
    output: typeof QueryTokenizeShareRecordByIdResponseSchema;
  },
  /**
   * Query for individual tokenize share record information by share denom
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TokenizeShareRecordByDenom
   */
  tokenizeShareRecordByDenom: {
    methodKind: "unary";
    input: typeof QueryTokenizeShareRecordByDenomRequestSchema;
    output: typeof QueryTokenizeShareRecordByDenomResponseSchema;
  },
  /**
   * Query tokenize share records by address
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TokenizeShareRecordsOwned
   */
  tokenizeShareRecordsOwned: {
    methodKind: "unary";
    input: typeof QueryTokenizeShareRecordsOwnedRequestSchema;
    output: typeof QueryTokenizeShareRecordsOwnedResponseSchema;
  },
  /**
   * Query for all tokenize share records
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.AllTokenizeShareRecords
   */
  allTokenizeShareRecords: {
    methodKind: "unary";
    input: typeof QueryAllTokenizeShareRecordsRequestSchema;
    output: typeof QueryAllTokenizeShareRecordsResponseSchema;
  },
  /**
   * Query for last tokenize share record id
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.LastTokenizeShareRecordId
   */
  lastTokenizeShareRecordId: {
    methodKind: "unary";
    input: typeof QueryLastTokenizeShareRecordIdRequestSchema;
    output: typeof QueryLastTokenizeShareRecordIdResponseSchema;
  },
  /**
   * Query for total tokenized staked assets
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TotalTokenizeSharedAssets
   */
  totalTokenizeSharedAssets: {
    methodKind: "unary";
    input: typeof QueryTotalTokenizeSharedAssetsRequestSchema;
    output: typeof QueryTotalTokenizeSharedAssetsResponseSchema;
  },
  /**
   * Query for total liquid staked (including tokenized shares or owned by an liquid staking provider)
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TotalLiquidStaked
   */
  totalLiquidStaked: {
    methodKind: "unary";
    input: typeof QueryTotalLiquidStakedSchema;
    output: typeof QueryTotalLiquidStakedResponseSchema;
  },
  /**
   * Query tokenize share locks
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.TokenizeShareLockInfo
   */
  tokenizeShareLockInfo: {
    methodKind: "unary";
    input: typeof QueryTokenizeShareLockInfoSchema;
    output: typeof QueryTokenizeShareLockInfoResponseSchema;
  },
  /**
   * HistoricalInfo queries the historical info for given height.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.HistoricalInfo
   */
  historicalInfo: {
    methodKind: "unary";
    input: typeof QueryHistoricalInfoRequestSchema;
    output: typeof QueryHistoricalInfoResponseSchema;
  },
  /**
   * Pool queries the pool info.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Pool
   */
  pool: {
    methodKind: "unary";
    input: typeof QueryPoolRequestSchema;
    output: typeof QueryPoolResponseSchema;
  },
  /**
   * Parameters queries the staking parameters.
   *
   * @generated from rpc cosmos.staking.v1beta1.Query.Params
   */
  params: {
    methodKind: "unary";
    input: typeof QueryParamsRequestSchema;
    output: typeof QueryParamsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_staking_v1beta1_query, 0);

