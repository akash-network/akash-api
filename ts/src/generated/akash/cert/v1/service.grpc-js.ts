// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: akash/cert/v1/service.proto

/* eslint-disable */
import {
  ChannelCredentials,
  Client,
  makeGenericClientConstructor,
  Metadata,
} from "@grpc/grpc-js";
import type {
  CallOptions,
  ClientOptions,
  ClientUnaryCall,
  handleUnaryCall,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  MsgCreateCertificate,
  MsgCreateCertificateResponse,
  MsgRevokeCertificate,
  MsgRevokeCertificateResponse,
} from "./msg";

export const protobufPackage = "akash.cert.v1";

/** Msg defines the provider Msg service */
export type MsgService = typeof MsgService;
export const MsgService = {
  /** CreateCertificate defines a method to create new certificate given proper inputs. */
  createCertificate: {
    path: "/akash.cert.v1.Msg/CreateCertificate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgCreateCertificate) =>
      Buffer.from(MsgCreateCertificate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MsgCreateCertificate.decode(value),
    responseSerialize: (value: MsgCreateCertificateResponse) =>
      Buffer.from(MsgCreateCertificateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      MsgCreateCertificateResponse.decode(value),
  },
  /** RevokeCertificate defines a method to revoke the certificate */
  revokeCertificate: {
    path: "/akash.cert.v1.Msg/RevokeCertificate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgRevokeCertificate) =>
      Buffer.from(MsgRevokeCertificate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MsgRevokeCertificate.decode(value),
    responseSerialize: (value: MsgRevokeCertificateResponse) =>
      Buffer.from(MsgRevokeCertificateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      MsgRevokeCertificateResponse.decode(value),
  },
} as const;

export interface MsgServer extends UntypedServiceImplementation {
  /** CreateCertificate defines a method to create new certificate given proper inputs. */
  createCertificate: handleUnaryCall<
    MsgCreateCertificate,
    MsgCreateCertificateResponse
  >;
  /** RevokeCertificate defines a method to revoke the certificate */
  revokeCertificate: handleUnaryCall<
    MsgRevokeCertificate,
    MsgRevokeCertificateResponse
  >;
}

export interface MsgClient extends Client {
  /** CreateCertificate defines a method to create new certificate given proper inputs. */
  createCertificate(
    request: MsgCreateCertificate,
    callback: (
      error: ServiceError | null,
      response: MsgCreateCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
  createCertificate(
    request: MsgCreateCertificate,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MsgCreateCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
  createCertificate(
    request: MsgCreateCertificate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MsgCreateCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
  /** RevokeCertificate defines a method to revoke the certificate */
  revokeCertificate(
    request: MsgRevokeCertificate,
    callback: (
      error: ServiceError | null,
      response: MsgRevokeCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
  revokeCertificate(
    request: MsgRevokeCertificate,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MsgRevokeCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
  revokeCertificate(
    request: MsgRevokeCertificate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MsgRevokeCertificateResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const MsgClient = makeGenericClientConstructor(
  MsgService,
  "akash.cert.v1.Msg",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): MsgClient;
  service: typeof MsgService;
  serviceName: string;
};
