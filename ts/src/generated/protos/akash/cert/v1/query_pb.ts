// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file akash/cert/v1/query.proto (package akash.cert.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.ts";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../../cosmos/base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_base_query_v1beta1_pagination } from "../../../cosmos/base/query/v1beta1/pagination_pb.ts";
import type { Certificate, CertificateJson } from "./cert_pb.ts";
import { file_akash_cert_v1_cert } from "./cert_pb.ts";
import type { CertificateFilter, CertificateFilterJson } from "./filters_pb.ts";
import { file_akash_cert_v1_filters } from "./filters_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file akash/cert/v1/query.proto.
 */
export const file_akash_cert_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Chlha2FzaC9jZXJ0L3YxL3F1ZXJ5LnByb3RvEg1ha2FzaC5jZXJ0LnYxIp4BChNDZXJ0aWZpY2F0ZVJlc3BvbnNlEloKC2NlcnRpZmljYXRlGAEgASgLMhouYWthc2guY2VydC52MS5DZXJ0aWZpY2F0ZUIpyN4fAOreHwtjZXJ0aWZpY2F0ZfLeHxJ5YW1sOiJjZXJ0aWZpY2F0ZSISKwoGc2VyaWFsGAIgASgJQhvq3h8Gc2VyaWFs8t4fDXlhbWw6InNlcmlhbCIijgEKGFF1ZXJ5Q2VydGlmaWNhdGVzUmVxdWVzdBI2CgZmaWx0ZXIYASABKAsyIC5ha2FzaC5jZXJ0LnYxLkNlcnRpZmljYXRlRmlsdGVyQgTI3h8AEjoKCnBhZ2luYXRpb24YAiABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0IrABChlRdWVyeUNlcnRpZmljYXRlc1Jlc3BvbnNlElYKDGNlcnRpZmljYXRlcxgBIAMoCzIiLmFrYXNoLmNlcnQudjEuQ2VydGlmaWNhdGVSZXNwb25zZUIcyN4fAKrfHxRDZXJ0aWZpY2F0ZXNSZXNwb25zZRI7CgpwYWdpbmF0aW9uGAIgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2UylQEKBVF1ZXJ5EosBCgxDZXJ0aWZpY2F0ZXMSJy5ha2FzaC5jZXJ0LnYxLlF1ZXJ5Q2VydGlmaWNhdGVzUmVxdWVzdBooLmFrYXNoLmNlcnQudjEuUXVlcnlDZXJ0aWZpY2F0ZXNSZXNwb25zZSIogtPkkwIiEiAvYWthc2gvY2VydC92MS9jZXJ0aWZpY2F0ZXMvbGlzdEIdWhtwa2cuYWt0LmRldi9nby9ub2RlL2NlcnQvdjFiBnByb3RvMw", [file_gogoproto_gogo, file_google_api_annotations, file_cosmos_base_query_v1beta1_pagination, file_akash_cert_v1_cert, file_akash_cert_v1_filters]);

/**
 * CertificateResponse contains a single X509 certificate and its serial number.
 *
 * @generated from message akash.cert.v1.CertificateResponse
 */
export type CertificateResponse = Message<"akash.cert.v1.CertificateResponse"> & {
  /**
   * Certificate holds the certificate.
   *
   * @generated from field: akash.cert.v1.Certificate certificate = 1;
   */
  certificate?: Certificate;

  /**
   * Serial is a sequence number for the certificate.
   *
   * @generated from field: string serial = 2;
   */
  serial: string;
};

/**
 * CertificateResponse contains a single X509 certificate and its serial number.
 *
 * @generated from message akash.cert.v1.CertificateResponse
 */
export type CertificateResponseJson = {
  /**
   * Certificate holds the certificate.
   *
   * @generated from field: akash.cert.v1.Certificate certificate = 1;
   */
  certificate?: CertificateJson;

  /**
   * Serial is a sequence number for the certificate.
   *
   * @generated from field: string serial = 2;
   */
  serial?: string;
};

/**
 * Describes the message akash.cert.v1.CertificateResponse.
 * Use `create(CertificateResponseSchema)` to create a new message.
 */
export const CertificateResponseSchema: GenMessage<CertificateResponse, CertificateResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_query, 0);

/**
 * QueryDeploymentsRequest is request type for the Query/Deployments RPC method.
 *
 * @generated from message akash.cert.v1.QueryCertificatesRequest
 */
export type QueryCertificatesRequest = Message<"akash.cert.v1.QueryCertificatesRequest"> & {
  /**
   * Filter allows for filtering of results.
   *
   * @generated from field: akash.cert.v1.CertificateFilter filter = 1;
   */
  filter?: CertificateFilter;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryDeploymentsRequest is request type for the Query/Deployments RPC method.
 *
 * @generated from message akash.cert.v1.QueryCertificatesRequest
 */
export type QueryCertificatesRequestJson = {
  /**
   * Filter allows for filtering of results.
   *
   * @generated from field: akash.cert.v1.CertificateFilter filter = 1;
   */
  filter?: CertificateFilterJson;

  /**
   * Pagination is used to paginate request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message akash.cert.v1.QueryCertificatesRequest.
 * Use `create(QueryCertificatesRequestSchema)` to create a new message.
 */
export const QueryCertificatesRequestSchema: GenMessage<QueryCertificatesRequest, QueryCertificatesRequestJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_query, 1);

/**
 * QueryCertificatesResponse is response type for the Query/Certificates RPC method.
 *
 * @generated from message akash.cert.v1.QueryCertificatesResponse
 */
export type QueryCertificatesResponse = Message<"akash.cert.v1.QueryCertificatesResponse"> & {
  /**
   * Certificates is a list of certificate.
   *
   * @generated from field: repeated akash.cert.v1.CertificateResponse certificates = 1;
   */
  certificates: CertificateResponse[];

  /**
   * Pagination contains the information about response pagination.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryCertificatesResponse is response type for the Query/Certificates RPC method.
 *
 * @generated from message akash.cert.v1.QueryCertificatesResponse
 */
export type QueryCertificatesResponseJson = {
  /**
   * Certificates is a list of certificate.
   *
   * @generated from field: repeated akash.cert.v1.CertificateResponse certificates = 1;
   */
  certificates?: CertificateResponseJson[];

  /**
   * Pagination contains the information about response pagination.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message akash.cert.v1.QueryCertificatesResponse.
 * Use `create(QueryCertificatesResponseSchema)` to create a new message.
 */
export const QueryCertificatesResponseSchema: GenMessage<QueryCertificatesResponse, QueryCertificatesResponseJson> = /*@__PURE__*/
  messageDesc(file_akash_cert_v1_query, 2);

/**
 * Query defines the gRPC querier service for certificates.
 *
 * @generated from service akash.cert.v1.Query
 */
export const Query: GenService<{
  /**
   * Certificates queries certificates on-chain.
   *
   * @generated from rpc akash.cert.v1.Query.Certificates
   */
  certificates: {
    methodKind: "unary";
    input: typeof QueryCertificatesRequestSchema;
    output: typeof QueryCertificatesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_akash_cert_v1_query, 0);

