// Since: cosmos-sdk 0.46

// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/group/v1/query.proto (package cosmos.group.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb.ts";
import { file_google_api_annotations } from "../../../google/api/annotations_pb.ts";
import type { GroupInfo, GroupInfoJson, GroupMember, GroupMemberJson, GroupPolicyInfo, GroupPolicyInfoJson, Proposal, ProposalJson, TallyResult, TallyResultJson, Vote, VoteJson } from "./types_pb.ts";
import { file_cosmos_group_v1_types } from "./types_pb.ts";
import type { PageRequest, PageRequestJson, PageResponse, PageResponseJson } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_base_query_v1beta1_pagination } from "../../base/query/v1beta1/pagination_pb.ts";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb.ts";
import { file_amino_amino } from "../../../amino/amino_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/group/v1/query.proto.
 */
export const file_cosmos_group_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Chtjb3Ntb3MvZ3JvdXAvdjEvcXVlcnkucHJvdG8SD2Nvc21vcy5ncm91cC52MSIpChVRdWVyeUdyb3VwSW5mb1JlcXVlc3QSEAoIZ3JvdXBfaWQYASABKAQiQgoWUXVlcnlHcm91cEluZm9SZXNwb25zZRIoCgRpbmZvGAEgASgLMhouY29zbW9zLmdyb3VwLnYxLkdyb3VwSW5mbyJIChtRdWVyeUdyb3VwUG9saWN5SW5mb1JlcXVlc3QSKQoHYWRkcmVzcxgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nIk4KHFF1ZXJ5R3JvdXBQb2xpY3lJbmZvUmVzcG9uc2USLgoEaW5mbxgBIAEoCzIgLmNvc21vcy5ncm91cC52MS5Hcm91cFBvbGljeUluZm8iaAoYUXVlcnlHcm91cE1lbWJlcnNSZXF1ZXN0EhAKCGdyb3VwX2lkGAEgASgEEjoKCnBhZ2luYXRpb24YAiABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0IocBChlRdWVyeUdyb3VwTWVtYmVyc1Jlc3BvbnNlEi0KB21lbWJlcnMYASADKAsyHC5jb3Ntb3MuZ3JvdXAudjEuR3JvdXBNZW1iZXISOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlIoABChlRdWVyeUdyb3Vwc0J5QWRtaW5SZXF1ZXN0EicKBWFkbWluGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSOgoKcGFnaW5hdGlvbhgCIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QihQEKGlF1ZXJ5R3JvdXBzQnlBZG1pblJlc3BvbnNlEioKBmdyb3VwcxgBIAMoCzIaLmNvc21vcy5ncm91cC52MS5Hcm91cEluZm8SOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlInAKIFF1ZXJ5R3JvdXBQb2xpY2llc0J5R3JvdXBSZXF1ZXN0EhAKCGdyb3VwX2lkGAEgASgEEjoKCnBhZ2luYXRpb24YAiABKAsyJi5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0IpoBCiFRdWVyeUdyb3VwUG9saWNpZXNCeUdyb3VwUmVzcG9uc2USOAoOZ3JvdXBfcG9saWNpZXMYASADKAsyIC5jb3Ntb3MuZ3JvdXAudjEuR3JvdXBQb2xpY3lJbmZvEjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZSKHAQogUXVlcnlHcm91cFBvbGljaWVzQnlBZG1pblJlcXVlc3QSJwoFYWRtaW4YASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCKaAQohUXVlcnlHcm91cFBvbGljaWVzQnlBZG1pblJlc3BvbnNlEjgKDmdyb3VwX3BvbGljaWVzGAEgAygLMiAuY29zbW9zLmdyb3VwLnYxLkdyb3VwUG9saWN5SW5mbxI7CgpwYWdpbmF0aW9uGAIgASgLMicuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2UiKwoUUXVlcnlQcm9wb3NhbFJlcXVlc3QSEwoLcHJvcG9zYWxfaWQYASABKAQiRAoVUXVlcnlQcm9wb3NhbFJlc3BvbnNlEisKCHByb3Bvc2FsGAEgASgLMhkuY29zbW9zLmdyb3VwLnYxLlByb3Bvc2FsIosBCiJRdWVyeVByb3Bvc2Fsc0J5R3JvdXBQb2xpY3lSZXF1ZXN0EikKB2FkZHJlc3MYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCKQAQojUXVlcnlQcm9wb3NhbHNCeUdyb3VwUG9saWN5UmVzcG9uc2USLAoJcHJvcG9zYWxzGAEgAygLMhkuY29zbW9zLmdyb3VwLnYxLlByb3Bvc2FsEjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZSJfCh9RdWVyeVZvdGVCeVByb3Bvc2FsVm90ZXJSZXF1ZXN0EhMKC3Byb3Bvc2FsX2lkGAEgASgEEicKBXZvdGVyGAIgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmciRwogUXVlcnlWb3RlQnlQcm9wb3NhbFZvdGVyUmVzcG9uc2USIwoEdm90ZRgBIAEoCzIVLmNvc21vcy5ncm91cC52MS5Wb3RlIm4KG1F1ZXJ5Vm90ZXNCeVByb3Bvc2FsUmVxdWVzdBITCgtwcm9wb3NhbF9pZBgBIAEoBBI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCKBAQocUXVlcnlWb3Rlc0J5UHJvcG9zYWxSZXNwb25zZRIkCgV2b3RlcxgBIAMoCzIVLmNvc21vcy5ncm91cC52MS5Wb3RlEjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZSJ/ChhRdWVyeVZvdGVzQnlWb3RlclJlcXVlc3QSJwoFdm90ZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxI6CgpwYWdpbmF0aW9uGAIgASgLMiYuY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdCJ+ChlRdWVyeVZvdGVzQnlWb3RlclJlc3BvbnNlEiQKBXZvdGVzGAEgAygLMhUuY29zbW9zLmdyb3VwLnYxLlZvdGUSOwoKcGFnaW5hdGlvbhgCIAEoCzInLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlIoMBChpRdWVyeUdyb3Vwc0J5TWVtYmVyUmVxdWVzdBIpCgdhZGRyZXNzGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSOgoKcGFnaW5hdGlvbhgCIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QihgEKG1F1ZXJ5R3JvdXBzQnlNZW1iZXJSZXNwb25zZRIqCgZncm91cHMYASADKAsyGi5jb3Ntb3MuZ3JvdXAudjEuR3JvdXBJbmZvEjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZSIuChdRdWVyeVRhbGx5UmVzdWx0UmVxdWVzdBITCgtwcm9wb3NhbF9pZBgBIAEoBCJSChhRdWVyeVRhbGx5UmVzdWx0UmVzcG9uc2USNgoFdGFsbHkYASABKAsyHC5jb3Ntb3MuZ3JvdXAudjEuVGFsbHlSZXN1bHRCCcjeHwCo57AqASJQChJRdWVyeUdyb3Vwc1JlcXVlc3QSOgoKcGFnaW5hdGlvbhgCIAEoCzImLmNvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3QifgoTUXVlcnlHcm91cHNSZXNwb25zZRIqCgZncm91cHMYASADKAsyGi5jb3Ntb3MuZ3JvdXAudjEuR3JvdXBJbmZvEjsKCnBhZ2luYXRpb24YAiABKAsyJy5jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZTL7EQoFUXVlcnkSjAEKCUdyb3VwSW5mbxImLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwSW5mb1JlcXVlc3QaJy5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlHcm91cEluZm9SZXNwb25zZSIugtPkkwIoEiYvY29zbW9zL2dyb3VwL3YxL2dyb3VwX2luZm8ve2dyb3VwX2lkfRKkAQoPR3JvdXBQb2xpY3lJbmZvEiwuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5R3JvdXBQb2xpY3lJbmZvUmVxdWVzdBotLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwUG9saWN5SW5mb1Jlc3BvbnNlIjSC0+STAi4SLC9jb3Ntb3MvZ3JvdXAvdjEvZ3JvdXBfcG9saWN5X2luZm8ve2FkZHJlc3N9EpgBCgxHcm91cE1lbWJlcnMSKS5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlHcm91cE1lbWJlcnNSZXF1ZXN0GiouY29zbW9zLmdyb3VwLnYxLlF1ZXJ5R3JvdXBNZW1iZXJzUmVzcG9uc2UiMYLT5JMCKxIpL2Nvc21vcy9ncm91cC92MS9ncm91cF9tZW1iZXJzL3tncm91cF9pZH0SmgEKDUdyb3Vwc0J5QWRtaW4SKi5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlHcm91cHNCeUFkbWluUmVxdWVzdBorLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3Vwc0J5QWRtaW5SZXNwb25zZSIwgtPkkwIqEigvY29zbW9zL2dyb3VwL3YxL2dyb3Vwc19ieV9hZG1pbi97YWRtaW59EroBChRHcm91cFBvbGljaWVzQnlHcm91cBIxLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwUG9saWNpZXNCeUdyb3VwUmVxdWVzdBoyLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwUG9saWNpZXNCeUdyb3VwUmVzcG9uc2UiO4LT5JMCNRIzL2Nvc21vcy9ncm91cC92MS9ncm91cF9wb2xpY2llc19ieV9ncm91cC97Z3JvdXBfaWR9ErcBChRHcm91cFBvbGljaWVzQnlBZG1pbhIxLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwUG9saWNpZXNCeUFkbWluUmVxdWVzdBoyLmNvc21vcy5ncm91cC52MS5RdWVyeUdyb3VwUG9saWNpZXNCeUFkbWluUmVzcG9uc2UiOILT5JMCMhIwL2Nvc21vcy9ncm91cC92MS9ncm91cF9wb2xpY2llc19ieV9hZG1pbi97YWRtaW59EooBCghQcm9wb3NhbBIlLmNvc21vcy5ncm91cC52MS5RdWVyeVByb3Bvc2FsUmVxdWVzdBomLmNvc21vcy5ncm91cC52MS5RdWVyeVByb3Bvc2FsUmVzcG9uc2UiL4LT5JMCKRInL2Nvc21vcy9ncm91cC92MS9wcm9wb3NhbC97cHJvcG9zYWxfaWR9EsEBChZQcm9wb3NhbHNCeUdyb3VwUG9saWN5EjMuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5UHJvcG9zYWxzQnlHcm91cFBvbGljeVJlcXVlc3QaNC5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlQcm9wb3NhbHNCeUdyb3VwUG9saWN5UmVzcG9uc2UiPILT5JMCNhI0L2Nvc21vcy9ncm91cC92MS9wcm9wb3NhbHNfYnlfZ3JvdXBfcG9saWN5L3thZGRyZXNzfRLBAQoTVm90ZUJ5UHJvcG9zYWxWb3RlchIwLmNvc21vcy5ncm91cC52MS5RdWVyeVZvdGVCeVByb3Bvc2FsVm90ZXJSZXF1ZXN0GjEuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5Vm90ZUJ5UHJvcG9zYWxWb3RlclJlc3BvbnNlIkWC0+STAj8SPS9jb3Ntb3MvZ3JvdXAvdjEvdm90ZV9ieV9wcm9wb3NhbF92b3Rlci97cHJvcG9zYWxfaWR9L3t2b3Rlcn0SqAEKD1ZvdGVzQnlQcm9wb3NhbBIsLmNvc21vcy5ncm91cC52MS5RdWVyeVZvdGVzQnlQcm9wb3NhbFJlcXVlc3QaLS5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlWb3Rlc0J5UHJvcG9zYWxSZXNwb25zZSI4gtPkkwIyEjAvY29zbW9zL2dyb3VwL3YxL3ZvdGVzX2J5X3Byb3Bvc2FsL3twcm9wb3NhbF9pZH0SlgEKDFZvdGVzQnlWb3RlchIpLmNvc21vcy5ncm91cC52MS5RdWVyeVZvdGVzQnlWb3RlclJlcXVlc3QaKi5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlWb3Rlc0J5Vm90ZXJSZXNwb25zZSIvgtPkkwIpEicvY29zbW9zL2dyb3VwL3YxL3ZvdGVzX2J5X3ZvdGVyL3t2b3Rlcn0SoAEKDkdyb3Vwc0J5TWVtYmVyEisuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5R3JvdXBzQnlNZW1iZXJSZXF1ZXN0GiwuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5R3JvdXBzQnlNZW1iZXJSZXNwb25zZSIzgtPkkwItEisvY29zbW9zL2dyb3VwL3YxL2dyb3Vwc19ieV9tZW1iZXIve2FkZHJlc3N9EpoBCgtUYWxseVJlc3VsdBIoLmNvc21vcy5ncm91cC52MS5RdWVyeVRhbGx5UmVzdWx0UmVxdWVzdBopLmNvc21vcy5ncm91cC52MS5RdWVyeVRhbGx5UmVzdWx0UmVzcG9uc2UiNoLT5JMCMBIuL2Nvc21vcy9ncm91cC92MS9wcm9wb3NhbHMve3Byb3Bvc2FsX2lkfS90YWxseRJ0CgZHcm91cHMSIy5jb3Ntb3MuZ3JvdXAudjEuUXVlcnlHcm91cHNSZXF1ZXN0GiQuY29zbW9zLmdyb3VwLnYxLlF1ZXJ5R3JvdXBzUmVzcG9uc2UiH4LT5JMCGRIXL2Nvc21vcy9ncm91cC92MS9ncm91cHNCJlokZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L2dyb3VwYgZwcm90bzM", [file_gogoproto_gogo, file_google_api_annotations, file_cosmos_group_v1_types, file_cosmos_base_query_v1beta1_pagination, file_cosmos_proto_cosmos, file_amino_amino]);

/**
 * QueryGroupInfoRequest is the Query/GroupInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoRequest
 */
export type QueryGroupInfoRequest = Message<"cosmos.group.v1.QueryGroupInfoRequest"> & {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;
};

/**
 * QueryGroupInfoRequest is the Query/GroupInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoRequest
 */
export type QueryGroupInfoRequestJson = {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupInfoRequest.
 * Use `create(QueryGroupInfoRequestSchema)` to create a new message.
 */
export const QueryGroupInfoRequestSchema: GenMessage<QueryGroupInfoRequest, QueryGroupInfoRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 0);

/**
 * QueryGroupInfoResponse is the Query/GroupInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoResponse
 */
export type QueryGroupInfoResponse = Message<"cosmos.group.v1.QueryGroupInfoResponse"> & {
  /**
   * info is the GroupInfo of the group.
   *
   * @generated from field: cosmos.group.v1.GroupInfo info = 1;
   */
  info?: GroupInfo;
};

/**
 * QueryGroupInfoResponse is the Query/GroupInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupInfoResponse
 */
export type QueryGroupInfoResponseJson = {
  /**
   * info is the GroupInfo of the group.
   *
   * @generated from field: cosmos.group.v1.GroupInfo info = 1;
   */
  info?: GroupInfoJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupInfoResponse.
 * Use `create(QueryGroupInfoResponseSchema)` to create a new message.
 */
export const QueryGroupInfoResponseSchema: GenMessage<QueryGroupInfoResponse, QueryGroupInfoResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 1);

/**
 * QueryGroupPolicyInfoRequest is the Query/GroupPolicyInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoRequest
 */
export type QueryGroupPolicyInfoRequest = Message<"cosmos.group.v1.QueryGroupPolicyInfoRequest"> & {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address: string;
};

/**
 * QueryGroupPolicyInfoRequest is the Query/GroupPolicyInfo request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoRequest
 */
export type QueryGroupPolicyInfoRequestJson = {
  /**
   * address is the account address of the group policy.
   *
   * @generated from field: string address = 1;
   */
  address?: string;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPolicyInfoRequest.
 * Use `create(QueryGroupPolicyInfoRequestSchema)` to create a new message.
 */
export const QueryGroupPolicyInfoRequestSchema: GenMessage<QueryGroupPolicyInfoRequest, QueryGroupPolicyInfoRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 2);

/**
 * QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoResponse
 */
export type QueryGroupPolicyInfoResponse = Message<"cosmos.group.v1.QueryGroupPolicyInfoResponse"> & {
  /**
   * info is the GroupPolicyInfo of the group policy.
   *
   * @generated from field: cosmos.group.v1.GroupPolicyInfo info = 1;
   */
  info?: GroupPolicyInfo;
};

/**
 * QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPolicyInfoResponse
 */
export type QueryGroupPolicyInfoResponseJson = {
  /**
   * info is the GroupPolicyInfo of the group policy.
   *
   * @generated from field: cosmos.group.v1.GroupPolicyInfo info = 1;
   */
  info?: GroupPolicyInfoJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPolicyInfoResponse.
 * Use `create(QueryGroupPolicyInfoResponseSchema)` to create a new message.
 */
export const QueryGroupPolicyInfoResponseSchema: GenMessage<QueryGroupPolicyInfoResponse, QueryGroupPolicyInfoResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 3);

/**
 * QueryGroupMembersRequest is the Query/GroupMembers request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersRequest
 */
export type QueryGroupMembersRequest = Message<"cosmos.group.v1.QueryGroupMembersRequest"> & {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupMembersRequest is the Query/GroupMembers request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersRequest
 */
export type QueryGroupMembersRequestJson = {
  /**
   * group_id is the unique ID of the group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupMembersRequest.
 * Use `create(QueryGroupMembersRequestSchema)` to create a new message.
 */
export const QueryGroupMembersRequestSchema: GenMessage<QueryGroupMembersRequest, QueryGroupMembersRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 4);

/**
 * QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersResponse
 */
export type QueryGroupMembersResponse = Message<"cosmos.group.v1.QueryGroupMembersResponse"> & {
  /**
   * members are the members of the group with given group_id.
   *
   * @generated from field: repeated cosmos.group.v1.GroupMember members = 1;
   */
  members: GroupMember[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupMembersResponse
 */
export type QueryGroupMembersResponseJson = {
  /**
   * members are the members of the group with given group_id.
   *
   * @generated from field: repeated cosmos.group.v1.GroupMember members = 1;
   */
  members?: GroupMemberJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupMembersResponse.
 * Use `create(QueryGroupMembersResponseSchema)` to create a new message.
 */
export const QueryGroupMembersResponseSchema: GenMessage<QueryGroupMembersResponse, QueryGroupMembersResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 5);

/**
 * QueryGroupsByAdminRequest is the Query/GroupsByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminRequest
 */
export type QueryGroupsByAdminRequest = Message<"cosmos.group.v1.QueryGroupsByAdminRequest"> & {
  /**
   * admin is the account address of a group's admin.
   *
   * @generated from field: string admin = 1;
   */
  admin: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupsByAdminRequest is the Query/GroupsByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminRequest
 */
export type QueryGroupsByAdminRequestJson = {
  /**
   * admin is the account address of a group's admin.
   *
   * @generated from field: string admin = 1;
   */
  admin?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsByAdminRequest.
 * Use `create(QueryGroupsByAdminRequestSchema)` to create a new message.
 */
export const QueryGroupsByAdminRequestSchema: GenMessage<QueryGroupsByAdminRequest, QueryGroupsByAdminRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 6);

/**
 * QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminResponse
 */
export type QueryGroupsByAdminResponse = Message<"cosmos.group.v1.QueryGroupsByAdminResponse"> & {
  /**
   * groups are the groups info with the provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups: GroupInfo[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByAdminResponse
 */
export type QueryGroupsByAdminResponseJson = {
  /**
   * groups are the groups info with the provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups?: GroupInfoJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsByAdminResponse.
 * Use `create(QueryGroupsByAdminResponseSchema)` to create a new message.
 */
export const QueryGroupsByAdminResponseSchema: GenMessage<QueryGroupsByAdminResponse, QueryGroupsByAdminResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 7);

/**
 * QueryGroupPoliciesByGroupRequest is the Query/GroupPoliciesByGroup request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupRequest
 */
export type QueryGroupPoliciesByGroupRequest = Message<"cosmos.group.v1.QueryGroupPoliciesByGroupRequest"> & {
  /**
   * group_id is the unique ID of the group policy's group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId: bigint;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupPoliciesByGroupRequest is the Query/GroupPoliciesByGroup request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupRequest
 */
export type QueryGroupPoliciesByGroupRequestJson = {
  /**
   * group_id is the unique ID of the group policy's group.
   *
   * @generated from field: uint64 group_id = 1;
   */
  groupId?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPoliciesByGroupRequest.
 * Use `create(QueryGroupPoliciesByGroupRequestSchema)` to create a new message.
 */
export const QueryGroupPoliciesByGroupRequestSchema: GenMessage<QueryGroupPoliciesByGroupRequest, QueryGroupPoliciesByGroupRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 8);

/**
 * QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupResponse
 */
export type QueryGroupPoliciesByGroupResponse = Message<"cosmos.group.v1.QueryGroupPoliciesByGroupResponse"> & {
  /**
   * group_policies are the group policies info associated with the provided group.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies: GroupPolicyInfo[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByGroupResponse
 */
export type QueryGroupPoliciesByGroupResponseJson = {
  /**
   * group_policies are the group policies info associated with the provided group.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies?: GroupPolicyInfoJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPoliciesByGroupResponse.
 * Use `create(QueryGroupPoliciesByGroupResponseSchema)` to create a new message.
 */
export const QueryGroupPoliciesByGroupResponseSchema: GenMessage<QueryGroupPoliciesByGroupResponse, QueryGroupPoliciesByGroupResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 9);

/**
 * QueryGroupPoliciesByAdminRequest is the Query/GroupPoliciesByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminRequest
 */
export type QueryGroupPoliciesByAdminRequest = Message<"cosmos.group.v1.QueryGroupPoliciesByAdminRequest"> & {
  /**
   * admin is the admin address of the group policy.
   *
   * @generated from field: string admin = 1;
   */
  admin: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupPoliciesByAdminRequest is the Query/GroupPoliciesByAdmin request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminRequest
 */
export type QueryGroupPoliciesByAdminRequestJson = {
  /**
   * admin is the admin address of the group policy.
   *
   * @generated from field: string admin = 1;
   */
  admin?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPoliciesByAdminRequest.
 * Use `create(QueryGroupPoliciesByAdminRequestSchema)` to create a new message.
 */
export const QueryGroupPoliciesByAdminRequestSchema: GenMessage<QueryGroupPoliciesByAdminRequest, QueryGroupPoliciesByAdminRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 10);

/**
 * QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminResponse
 */
export type QueryGroupPoliciesByAdminResponse = Message<"cosmos.group.v1.QueryGroupPoliciesByAdminResponse"> & {
  /**
   * group_policies are the group policies info with provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies: GroupPolicyInfo[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupPoliciesByAdminResponse
 */
export type QueryGroupPoliciesByAdminResponseJson = {
  /**
   * group_policies are the group policies info with provided admin.
   *
   * @generated from field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
   */
  groupPolicies?: GroupPolicyInfoJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupPoliciesByAdminResponse.
 * Use `create(QueryGroupPoliciesByAdminResponseSchema)` to create a new message.
 */
export const QueryGroupPoliciesByAdminResponseSchema: GenMessage<QueryGroupPoliciesByAdminResponse, QueryGroupPoliciesByAdminResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 11);

/**
 * QueryProposalRequest is the Query/Proposal request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalRequest
 */
export type QueryProposalRequest = Message<"cosmos.group.v1.QueryProposalRequest"> & {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;
};

/**
 * QueryProposalRequest is the Query/Proposal request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalRequest
 */
export type QueryProposalRequestJson = {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;
};

/**
 * Describes the message cosmos.group.v1.QueryProposalRequest.
 * Use `create(QueryProposalRequestSchema)` to create a new message.
 */
export const QueryProposalRequestSchema: GenMessage<QueryProposalRequest, QueryProposalRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 12);

/**
 * QueryProposalResponse is the Query/Proposal response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalResponse
 */
export type QueryProposalResponse = Message<"cosmos.group.v1.QueryProposalResponse"> & {
  /**
   * proposal is the proposal info.
   *
   * @generated from field: cosmos.group.v1.Proposal proposal = 1;
   */
  proposal?: Proposal;
};

/**
 * QueryProposalResponse is the Query/Proposal response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalResponse
 */
export type QueryProposalResponseJson = {
  /**
   * proposal is the proposal info.
   *
   * @generated from field: cosmos.group.v1.Proposal proposal = 1;
   */
  proposal?: ProposalJson;
};

/**
 * Describes the message cosmos.group.v1.QueryProposalResponse.
 * Use `create(QueryProposalResponseSchema)` to create a new message.
 */
export const QueryProposalResponseSchema: GenMessage<QueryProposalResponse, QueryProposalResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 13);

/**
 * QueryProposalsByGroupPolicyRequest is the Query/ProposalByGroupPolicy request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyRequest
 */
export type QueryProposalsByGroupPolicyRequest = Message<"cosmos.group.v1.QueryProposalsByGroupPolicyRequest"> & {
  /**
   * address is the account address of the group policy related to proposals.
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryProposalsByGroupPolicyRequest is the Query/ProposalByGroupPolicy request type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyRequest
 */
export type QueryProposalsByGroupPolicyRequestJson = {
  /**
   * address is the account address of the group policy related to proposals.
   *
   * @generated from field: string address = 1;
   */
  address?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryProposalsByGroupPolicyRequest.
 * Use `create(QueryProposalsByGroupPolicyRequestSchema)` to create a new message.
 */
export const QueryProposalsByGroupPolicyRequestSchema: GenMessage<QueryProposalsByGroupPolicyRequest, QueryProposalsByGroupPolicyRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 14);

/**
 * QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyResponse
 */
export type QueryProposalsByGroupPolicyResponse = Message<"cosmos.group.v1.QueryProposalsByGroupPolicyResponse"> & {
  /**
   * proposals are the proposals with given group policy.
   *
   * @generated from field: repeated cosmos.group.v1.Proposal proposals = 1;
   */
  proposals: Proposal[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type.
 *
 * @generated from message cosmos.group.v1.QueryProposalsByGroupPolicyResponse
 */
export type QueryProposalsByGroupPolicyResponseJson = {
  /**
   * proposals are the proposals with given group policy.
   *
   * @generated from field: repeated cosmos.group.v1.Proposal proposals = 1;
   */
  proposals?: ProposalJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryProposalsByGroupPolicyResponse.
 * Use `create(QueryProposalsByGroupPolicyResponseSchema)` to create a new message.
 */
export const QueryProposalsByGroupPolicyResponseSchema: GenMessage<QueryProposalsByGroupPolicyResponse, QueryProposalsByGroupPolicyResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 15);

/**
 * QueryVoteByProposalVoterRequest is the Query/VoteByProposalVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterRequest
 */
export type QueryVoteByProposalVoterRequest = Message<"cosmos.group.v1.QueryVoteByProposalVoterRequest"> & {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;

  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 2;
   */
  voter: string;
};

/**
 * QueryVoteByProposalVoterRequest is the Query/VoteByProposalVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterRequest
 */
export type QueryVoteByProposalVoterRequestJson = {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;

  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 2;
   */
  voter?: string;
};

/**
 * Describes the message cosmos.group.v1.QueryVoteByProposalVoterRequest.
 * Use `create(QueryVoteByProposalVoterRequestSchema)` to create a new message.
 */
export const QueryVoteByProposalVoterRequestSchema: GenMessage<QueryVoteByProposalVoterRequest, QueryVoteByProposalVoterRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 16);

/**
 * QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterResponse
 */
export type QueryVoteByProposalVoterResponse = Message<"cosmos.group.v1.QueryVoteByProposalVoterResponse"> & {
  /**
   * vote is the vote with given proposal_id and voter.
   *
   * @generated from field: cosmos.group.v1.Vote vote = 1;
   */
  vote?: Vote;
};

/**
 * QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVoteByProposalVoterResponse
 */
export type QueryVoteByProposalVoterResponseJson = {
  /**
   * vote is the vote with given proposal_id and voter.
   *
   * @generated from field: cosmos.group.v1.Vote vote = 1;
   */
  vote?: VoteJson;
};

/**
 * Describes the message cosmos.group.v1.QueryVoteByProposalVoterResponse.
 * Use `create(QueryVoteByProposalVoterResponseSchema)` to create a new message.
 */
export const QueryVoteByProposalVoterResponseSchema: GenMessage<QueryVoteByProposalVoterResponse, QueryVoteByProposalVoterResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 17);

/**
 * QueryVotesByProposalRequest is the Query/VotesByProposal request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalRequest
 */
export type QueryVotesByProposalRequest = Message<"cosmos.group.v1.QueryVotesByProposalRequest"> & {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryVotesByProposalRequest is the Query/VotesByProposal request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalRequest
 */
export type QueryVotesByProposalRequestJson = {
  /**
   * proposal_id is the unique ID of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryVotesByProposalRequest.
 * Use `create(QueryVotesByProposalRequestSchema)` to create a new message.
 */
export const QueryVotesByProposalRequestSchema: GenMessage<QueryVotesByProposalRequest, QueryVotesByProposalRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 18);

/**
 * QueryVotesByProposalResponse is the Query/VotesByProposal response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalResponse
 */
export type QueryVotesByProposalResponse = Message<"cosmos.group.v1.QueryVotesByProposalResponse"> & {
  /**
   * votes are the list of votes for given proposal_id.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes: Vote[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryVotesByProposalResponse is the Query/VotesByProposal response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByProposalResponse
 */
export type QueryVotesByProposalResponseJson = {
  /**
   * votes are the list of votes for given proposal_id.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes?: VoteJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryVotesByProposalResponse.
 * Use `create(QueryVotesByProposalResponseSchema)` to create a new message.
 */
export const QueryVotesByProposalResponseSchema: GenMessage<QueryVotesByProposalResponse, QueryVotesByProposalResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 19);

/**
 * QueryVotesByVoterRequest is the Query/VotesByVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterRequest
 */
export type QueryVotesByVoterRequest = Message<"cosmos.group.v1.QueryVotesByVoterRequest"> & {
  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 1;
   */
  voter: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryVotesByVoterRequest is the Query/VotesByVoter request type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterRequest
 */
export type QueryVotesByVoterRequestJson = {
  /**
   * voter is a proposal voter account address.
   *
   * @generated from field: string voter = 1;
   */
  voter?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryVotesByVoterRequest.
 * Use `create(QueryVotesByVoterRequestSchema)` to create a new message.
 */
export const QueryVotesByVoterRequestSchema: GenMessage<QueryVotesByVoterRequest, QueryVotesByVoterRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 20);

/**
 * QueryVotesByVoterResponse is the Query/VotesByVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterResponse
 */
export type QueryVotesByVoterResponse = Message<"cosmos.group.v1.QueryVotesByVoterResponse"> & {
  /**
   * votes are the list of votes by given voter.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes: Vote[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryVotesByVoterResponse is the Query/VotesByVoter response type.
 *
 * @generated from message cosmos.group.v1.QueryVotesByVoterResponse
 */
export type QueryVotesByVoterResponseJson = {
  /**
   * votes are the list of votes by given voter.
   *
   * @generated from field: repeated cosmos.group.v1.Vote votes = 1;
   */
  votes?: VoteJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryVotesByVoterResponse.
 * Use `create(QueryVotesByVoterResponseSchema)` to create a new message.
 */
export const QueryVotesByVoterResponseSchema: GenMessage<QueryVotesByVoterResponse, QueryVotesByVoterResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 21);

/**
 * QueryGroupsByMemberRequest is the Query/GroupsByMember request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberRequest
 */
export type QueryGroupsByMemberRequest = Message<"cosmos.group.v1.QueryGroupsByMemberRequest"> & {
  /**
   * address is the group member address.
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupsByMemberRequest is the Query/GroupsByMember request type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberRequest
 */
export type QueryGroupsByMemberRequestJson = {
  /**
   * address is the group member address.
   *
   * @generated from field: string address = 1;
   */
  address?: string;

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsByMemberRequest.
 * Use `create(QueryGroupsByMemberRequestSchema)` to create a new message.
 */
export const QueryGroupsByMemberRequestSchema: GenMessage<QueryGroupsByMemberRequest, QueryGroupsByMemberRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 22);

/**
 * QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberResponse
 */
export type QueryGroupsByMemberResponse = Message<"cosmos.group.v1.QueryGroupsByMemberResponse"> & {
  /**
   * groups are the groups info with the provided group member.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups: GroupInfo[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
 *
 * @generated from message cosmos.group.v1.QueryGroupsByMemberResponse
 */
export type QueryGroupsByMemberResponseJson = {
  /**
   * groups are the groups info with the provided group member.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups?: GroupInfoJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsByMemberResponse.
 * Use `create(QueryGroupsByMemberResponseSchema)` to create a new message.
 */
export const QueryGroupsByMemberResponseSchema: GenMessage<QueryGroupsByMemberResponse, QueryGroupsByMemberResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 23);

/**
 * QueryTallyResultRequest is the Query/TallyResult request type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultRequest
 */
export type QueryTallyResultRequest = Message<"cosmos.group.v1.QueryTallyResultRequest"> & {
  /**
   * proposal_id is the unique id of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId: bigint;
};

/**
 * QueryTallyResultRequest is the Query/TallyResult request type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultRequest
 */
export type QueryTallyResultRequestJson = {
  /**
   * proposal_id is the unique id of a proposal.
   *
   * @generated from field: uint64 proposal_id = 1;
   */
  proposalId?: string;
};

/**
 * Describes the message cosmos.group.v1.QueryTallyResultRequest.
 * Use `create(QueryTallyResultRequestSchema)` to create a new message.
 */
export const QueryTallyResultRequestSchema: GenMessage<QueryTallyResultRequest, QueryTallyResultRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 24);

/**
 * QueryTallyResultResponse is the Query/TallyResult response type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultResponse
 */
export type QueryTallyResultResponse = Message<"cosmos.group.v1.QueryTallyResultResponse"> & {
  /**
   * tally defines the requested tally.
   *
   * @generated from field: cosmos.group.v1.TallyResult tally = 1;
   */
  tally?: TallyResult;
};

/**
 * QueryTallyResultResponse is the Query/TallyResult response type.
 *
 * @generated from message cosmos.group.v1.QueryTallyResultResponse
 */
export type QueryTallyResultResponseJson = {
  /**
   * tally defines the requested tally.
   *
   * @generated from field: cosmos.group.v1.TallyResult tally = 1;
   */
  tally?: TallyResultJson;
};

/**
 * Describes the message cosmos.group.v1.QueryTallyResultResponse.
 * Use `create(QueryTallyResultResponseSchema)` to create a new message.
 */
export const QueryTallyResultResponseSchema: GenMessage<QueryTallyResultResponse, QueryTallyResultResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 25);

/**
 * QueryGroupsRequest is the Query/Groups request type.
 *
 * Since: cosmos-sdk 0.47.1
 *
 * @generated from message cosmos.group.v1.QueryGroupsRequest
 */
export type QueryGroupsRequest = Message<"cosmos.group.v1.QueryGroupsRequest"> & {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;
};

/**
 * QueryGroupsRequest is the Query/Groups request type.
 *
 * Since: cosmos-sdk 0.47.1
 *
 * @generated from message cosmos.group.v1.QueryGroupsRequest
 */
export type QueryGroupsRequestJson = {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequestJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsRequest.
 * Use `create(QueryGroupsRequestSchema)` to create a new message.
 */
export const QueryGroupsRequestSchema: GenMessage<QueryGroupsRequest, QueryGroupsRequestJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 26);

/**
 * QueryGroupsResponse is the Query/Groups response type.
 *
 * Since: cosmos-sdk 0.47.1
 *
 * @generated from message cosmos.group.v1.QueryGroupsResponse
 */
export type QueryGroupsResponse = Message<"cosmos.group.v1.QueryGroupsResponse"> & {
  /**
   * `groups` is all the groups present in state.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups: GroupInfo[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;
};

/**
 * QueryGroupsResponse is the Query/Groups response type.
 *
 * Since: cosmos-sdk 0.47.1
 *
 * @generated from message cosmos.group.v1.QueryGroupsResponse
 */
export type QueryGroupsResponseJson = {
  /**
   * `groups` is all the groups present in state.
   *
   * @generated from field: repeated cosmos.group.v1.GroupInfo groups = 1;
   */
  groups?: GroupInfoJson[];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponseJson;
};

/**
 * Describes the message cosmos.group.v1.QueryGroupsResponse.
 * Use `create(QueryGroupsResponseSchema)` to create a new message.
 */
export const QueryGroupsResponseSchema: GenMessage<QueryGroupsResponse, QueryGroupsResponseJson> = /*@__PURE__*/
  messageDesc(file_cosmos_group_v1_query, 27);

/**
 * Query is the cosmos.group.v1 Query service.
 *
 * @generated from service cosmos.group.v1.Query
 */
export const Query: GenService<{
  /**
   * GroupInfo queries group info based on group id.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupInfo
   */
  groupInfo: {
    methodKind: "unary";
    input: typeof QueryGroupInfoRequestSchema;
    output: typeof QueryGroupInfoResponseSchema;
  },
  /**
   * GroupPolicyInfo queries group policy info based on account address of group policy.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupPolicyInfo
   */
  groupPolicyInfo: {
    methodKind: "unary";
    input: typeof QueryGroupPolicyInfoRequestSchema;
    output: typeof QueryGroupPolicyInfoResponseSchema;
  },
  /**
   * GroupMembers queries members of a group by group id.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupMembers
   */
  groupMembers: {
    methodKind: "unary";
    input: typeof QueryGroupMembersRequestSchema;
    output: typeof QueryGroupMembersResponseSchema;
  },
  /**
   * GroupsByAdmin queries groups by admin address.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupsByAdmin
   */
  groupsByAdmin: {
    methodKind: "unary";
    input: typeof QueryGroupsByAdminRequestSchema;
    output: typeof QueryGroupsByAdminResponseSchema;
  },
  /**
   * GroupPoliciesByGroup queries group policies by group id.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByGroup
   */
  groupPoliciesByGroup: {
    methodKind: "unary";
    input: typeof QueryGroupPoliciesByGroupRequestSchema;
    output: typeof QueryGroupPoliciesByGroupResponseSchema;
  },
  /**
   * GroupPoliciesByAdmin queries group policies by admin address.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupPoliciesByAdmin
   */
  groupPoliciesByAdmin: {
    methodKind: "unary";
    input: typeof QueryGroupPoliciesByAdminRequestSchema;
    output: typeof QueryGroupPoliciesByAdminResponseSchema;
  },
  /**
   * Proposal queries a proposal based on proposal id.
   *
   * @generated from rpc cosmos.group.v1.Query.Proposal
   */
  proposal: {
    methodKind: "unary";
    input: typeof QueryProposalRequestSchema;
    output: typeof QueryProposalResponseSchema;
  },
  /**
   * ProposalsByGroupPolicy queries proposals based on account address of group policy.
   *
   * @generated from rpc cosmos.group.v1.Query.ProposalsByGroupPolicy
   */
  proposalsByGroupPolicy: {
    methodKind: "unary";
    input: typeof QueryProposalsByGroupPolicyRequestSchema;
    output: typeof QueryProposalsByGroupPolicyResponseSchema;
  },
  /**
   * VoteByProposalVoter queries a vote by proposal id and voter.
   *
   * @generated from rpc cosmos.group.v1.Query.VoteByProposalVoter
   */
  voteByProposalVoter: {
    methodKind: "unary";
    input: typeof QueryVoteByProposalVoterRequestSchema;
    output: typeof QueryVoteByProposalVoterResponseSchema;
  },
  /**
   * VotesByProposal queries a vote by proposal id.
   *
   * @generated from rpc cosmos.group.v1.Query.VotesByProposal
   */
  votesByProposal: {
    methodKind: "unary";
    input: typeof QueryVotesByProposalRequestSchema;
    output: typeof QueryVotesByProposalResponseSchema;
  },
  /**
   * VotesByVoter queries a vote by voter.
   *
   * @generated from rpc cosmos.group.v1.Query.VotesByVoter
   */
  votesByVoter: {
    methodKind: "unary";
    input: typeof QueryVotesByVoterRequestSchema;
    output: typeof QueryVotesByVoterResponseSchema;
  },
  /**
   * GroupsByMember queries groups by member address.
   *
   * @generated from rpc cosmos.group.v1.Query.GroupsByMember
   */
  groupsByMember: {
    methodKind: "unary";
    input: typeof QueryGroupsByMemberRequestSchema;
    output: typeof QueryGroupsByMemberResponseSchema;
  },
  /**
   * TallyResult returns the tally result of a proposal. If the proposal is
   * still in voting period, then this query computes the current tally state,
   * which might not be final. On the other hand, if the proposal is final,
   * then it simply returns the `final_tally_result` state stored in the
   * proposal itself.
   *
   * @generated from rpc cosmos.group.v1.Query.TallyResult
   */
  tallyResult: {
    methodKind: "unary";
    input: typeof QueryTallyResultRequestSchema;
    output: typeof QueryTallyResultResponseSchema;
  },
  /**
   * Groups queries all groups in state.
   *
   * Since: cosmos-sdk 0.47.1
   *
   * @generated from rpc cosmos.group.v1.Query.Groups
   */
  groups: {
    methodKind: "unary";
    input: typeof QueryGroupsRequestSchema;
    output: typeof QueryGroupsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_group_v1_query, 0);

