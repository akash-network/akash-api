// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true"
// @generated from file cosmos/staking/v1beta1/authz.proto (package cosmos.staking.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import type { Coin, CoinJson } from "../../base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb";
import { file_amino_amino } from "../../../amino/amino_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/staking/v1beta1/authz.proto.
 */
export const file_cosmos_staking_v1beta1_authz: GenFile = /*@__PURE__*/
  fileDesc("CiJjb3Ntb3Mvc3Rha2luZy92MWJldGExL2F1dGh6LnByb3RvEhZjb3Ntb3Muc3Rha2luZy52MWJldGExIuEDChJTdGFrZUF1dGhvcml6YXRpb24SWgoKbWF4X3Rva2VucxgBIAEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIrqt8fJ2dpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbhJLCgphbGxvd19saXN0GAIgASgLMjUuY29zbW9zLnN0YWtpbmcudjFiZXRhMS5TdGFrZUF1dGhvcml6YXRpb24uVmFsaWRhdG9yc0gAEkoKCWRlbnlfbGlzdBgDIAEoCzI1LmNvc21vcy5zdGFraW5nLnYxYmV0YTEuU3Rha2VBdXRob3JpemF0aW9uLlZhbGlkYXRvcnNIABJFChJhdXRob3JpemF0aW9uX3R5cGUYBCABKA4yKS5jb3Ntb3Muc3Rha2luZy52MWJldGExLkF1dGhvcml6YXRpb25UeXBlGjcKClZhbGlkYXRvcnMSKQoHYWRkcmVzcxgBIAMoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nOkjKtC0iY29zbW9zLmF1dGh6LnYxYmV0YTEuQXV0aG9yaXphdGlvbornsCodY29zbW9zLXNkay9TdGFrZUF1dGhvcml6YXRpb25CDAoKdmFsaWRhdG9ycyqeAQoRQXV0aG9yaXphdGlvblR5cGUSIgoeQVVUSE9SSVpBVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASHwobQVVUSE9SSVpBVElPTl9UWVBFX0RFTEVHQVRFEAESIQodQVVUSE9SSVpBVElPTl9UWVBFX1VOREVMRUdBVEUQAhIhCh1BVVRIT1JJWkFUSU9OX1RZUEVfUkVERUxFR0FURRADQi5aLGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsveC9zdGFraW5nL3R5cGVzYgZwcm90bzM", [file_gogoproto_gogo, file_cosmos_proto_cosmos, file_cosmos_base_v1beta1_coin, file_amino_amino]);

/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization
 */
export type StakeAuthorization = Message<"cosmos.staking.v1beta1.StakeAuthorization"> & {
  /**
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   *
   * @generated from field: cosmos.base.v1beta1.Coin max_tokens = 1;
   */
  maxTokens?: Coin;

  /**
   * validators is the oneof that represents either allow_list or deny_list
   *
   * @generated from oneof cosmos.staking.v1beta1.StakeAuthorization.validators
   */
  validators: {
    /**
     * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
     * account.
     *
     * @generated from field: cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;
     */
    value: StakeAuthorization_Validators;
    case: "allowList";
  } | {
    /**
     * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
     *
     * @generated from field: cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;
     */
    value: StakeAuthorization_Validators;
    case: "denyList";
  } | { case: undefined; value?: undefined };

  /**
   * authorization_type defines one of AuthorizationType.
   *
   * @generated from field: cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;
   */
  authorizationType: AuthorizationType;
};

/**
 * StakeAuthorization defines authorization for delegate/undelegate/redelegate.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization
 */
export type StakeAuthorizationJson = {
  /**
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   *
   * @generated from field: cosmos.base.v1beta1.Coin max_tokens = 1;
   */
  maxTokens?: CoinJson;

  /**
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   *
   * @generated from field: cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2;
   */
  allowList?: StakeAuthorization_ValidatorsJson;

  /**
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   *
   * @generated from field: cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3;
   */
  denyList?: StakeAuthorization_ValidatorsJson;

  /**
   * authorization_type defines one of AuthorizationType.
   *
   * @generated from field: cosmos.staking.v1beta1.AuthorizationType authorization_type = 4;
   */
  authorizationType?: AuthorizationTypeJson;
};

/**
 * Describes the message cosmos.staking.v1beta1.StakeAuthorization.
 * Use `create(StakeAuthorizationSchema)` to create a new message.
 */
export const StakeAuthorizationSchema: GenMessage<StakeAuthorization, StakeAuthorizationJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_authz, 0);

/**
 * Validators defines list of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export type StakeAuthorization_Validators = Message<"cosmos.staking.v1beta1.StakeAuthorization.Validators"> & {
  /**
   * @generated from field: repeated string address = 1;
   */
  address: string[];
};

/**
 * Validators defines list of validator addresses.
 *
 * @generated from message cosmos.staking.v1beta1.StakeAuthorization.Validators
 */
export type StakeAuthorization_ValidatorsJson = {
  /**
   * @generated from field: repeated string address = 1;
   */
  address?: string[];
};

/**
 * Describes the message cosmos.staking.v1beta1.StakeAuthorization.Validators.
 * Use `create(StakeAuthorization_ValidatorsSchema)` to create a new message.
 */
export const StakeAuthorization_ValidatorsSchema: GenMessage<StakeAuthorization_Validators, StakeAuthorization_ValidatorsJson> = /*@__PURE__*/
  messageDesc(file_cosmos_staking_v1beta1_authz, 0, 0);

/**
 * AuthorizationType defines the type of staking module authorization type
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from enum cosmos.staking.v1beta1.AuthorizationType
 */
export enum AuthorizationType {
  /**
   * AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
   *
   * @generated from enum value: AUTHORIZATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
   *
   * @generated from enum value: AUTHORIZATION_TYPE_DELEGATE = 1;
   */
  DELEGATE = 1,

  /**
   * AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
   *
   * @generated from enum value: AUTHORIZATION_TYPE_UNDELEGATE = 2;
   */
  UNDELEGATE = 2,

  /**
   * AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
   *
   * @generated from enum value: AUTHORIZATION_TYPE_REDELEGATE = 3;
   */
  REDELEGATE = 3,
}

/**
 * AuthorizationType defines the type of staking module authorization type
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from enum cosmos.staking.v1beta1.AuthorizationType
 */
export type AuthorizationTypeJson = "AUTHORIZATION_TYPE_UNSPECIFIED" | "AUTHORIZATION_TYPE_DELEGATE" | "AUTHORIZATION_TYPE_UNDELEGATE" | "AUTHORIZATION_TYPE_REDELEGATE";

/**
 * Describes the enum cosmos.staking.v1beta1.AuthorizationType.
 */
export const AuthorizationTypeSchema: GenEnum<AuthorizationType, AuthorizationTypeJson> = /*@__PURE__*/
  enumDesc(file_cosmos_staking_v1beta1_authz, 0);

