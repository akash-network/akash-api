// @generated by protoc-gen-es v2.2.3 with parameter "target=ts,json_types=true,import_extension=ts"
// @generated from file cosmos/nft/v1beta1/event.proto (package cosmos.nft.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/nft/v1beta1/event.proto.
 */
export const file_cosmos_nft_v1beta1_event: GenFile = /*@__PURE__*/
  fileDesc("Ch5jb3Ntb3MvbmZ0L3YxYmV0YTEvZXZlbnQucHJvdG8SEmNvc21vcy5uZnQudjFiZXRhMSJLCglFdmVudFNlbmQSEAoIY2xhc3NfaWQYASABKAkSCgoCaWQYAiABKAkSDgoGc2VuZGVyGAMgASgJEhAKCHJlY2VpdmVyGAQgASgJIjgKCUV2ZW50TWludBIQCghjbGFzc19pZBgBIAEoCRIKCgJpZBgCIAEoCRINCgVvd25lchgDIAEoCSI4CglFdmVudEJ1cm4SEAoIY2xhc3NfaWQYASABKAkSCgoCaWQYAiABKAkSDQoFb3duZXIYAyABKAlCJFoiZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay94L25mdGIGcHJvdG8z");

/**
 * EventSend is emitted on Msg/Send
 *
 * @generated from message cosmos.nft.v1beta1.EventSend
 */
export type EventSend = Message<"cosmos.nft.v1beta1.EventSend"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * sender is the address of the owner of nft
   *
   * @generated from field: string sender = 3;
   */
  sender: string;

  /**
   * receiver is the receiver address of nft
   *
   * @generated from field: string receiver = 4;
   */
  receiver: string;
};

/**
 * EventSend is emitted on Msg/Send
 *
 * @generated from message cosmos.nft.v1beta1.EventSend
 */
export type EventSendJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * sender is the address of the owner of nft
   *
   * @generated from field: string sender = 3;
   */
  sender?: string;

  /**
   * receiver is the receiver address of nft
   *
   * @generated from field: string receiver = 4;
   */
  receiver?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.EventSend.
 * Use `create(EventSendSchema)` to create a new message.
 */
export const EventSendSchema: GenMessage<EventSend, EventSendJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_event, 0);

/**
 * EventMint is emitted on Mint
 *
 * @generated from message cosmos.nft.v1beta1.EventMint
 */
export type EventMint = Message<"cosmos.nft.v1beta1.EventMint"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 3;
   */
  owner: string;
};

/**
 * EventMint is emitted on Mint
 *
 * @generated from message cosmos.nft.v1beta1.EventMint
 */
export type EventMintJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 3;
   */
  owner?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.EventMint.
 * Use `create(EventMintSchema)` to create a new message.
 */
export const EventMintSchema: GenMessage<EventMint, EventMintJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_event, 1);

/**
 * EventBurn is emitted on Burn
 *
 * @generated from message cosmos.nft.v1beta1.EventBurn
 */
export type EventBurn = Message<"cosmos.nft.v1beta1.EventBurn"> & {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 3;
   */
  owner: string;
};

/**
 * EventBurn is emitted on Burn
 *
 * @generated from message cosmos.nft.v1beta1.EventBurn
 */
export type EventBurnJson = {
  /**
   * class_id associated with the nft
   *
   * @generated from field: string class_id = 1;
   */
  classId?: string;

  /**
   * id is a unique identifier of the nft
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * owner is the owner address of the nft
   *
   * @generated from field: string owner = 3;
   */
  owner?: string;
};

/**
 * Describes the message cosmos.nft.v1beta1.EventBurn.
 * Use `create(EventBurnSchema)` to create a new message.
 */
export const EventBurnSchema: GenMessage<EventBurn, EventBurnJson> = /*@__PURE__*/
  messageDesc(file_cosmos_nft_v1beta1_event, 2);

