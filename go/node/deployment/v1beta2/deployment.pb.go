// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/deployment/v1beta2/deployment.proto

package v1beta2

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is an enum which refers to state of deployment
type Deployment_State int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state
	DeploymentStateInvalid Deployment_State = 0
	// DeploymentActive denotes state for deployment active
	DeploymentActive Deployment_State = 1
	// DeploymentClosed denotes state for deployment closed
	DeploymentClosed Deployment_State = 2
)

var Deployment_State_name = map[int32]string{
	0: "invalid",
	1: "active",
	2: "closed",
}

var Deployment_State_value = map[string]int32{
	"invalid": 0,
	"active":  1,
	"closed":  2,
}

func (x Deployment_State) String() string {
	return proto.EnumName(Deployment_State_name, int32(x))
}

func (Deployment_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_897ec42830b2cbac, []int{1, 0}
}

// DeploymentID stores owner and sequence number
type DeploymentID struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	DSeq  uint64 `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
}

func (m *DeploymentID) Reset()      { *m = DeploymentID{} }
func (*DeploymentID) ProtoMessage() {}
func (*DeploymentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_897ec42830b2cbac, []int{0}
}
func (m *DeploymentID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentID.Merge(m, src)
}
func (m *DeploymentID) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentID) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentID.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentID proto.InternalMessageInfo

func (m *DeploymentID) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DeploymentID) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

// Deployment stores deploymentID, state and version details
type Deployment struct {
	DeploymentID DeploymentID     `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"id" yaml:"id"`
	State        Deployment_State `protobuf:"varint,2,opt,name=state,proto3,enum=akash.deployment.v1beta2.Deployment_State" json:"state" yaml:"state"`
	Version      []byte           `protobuf:"bytes,3,opt,name=version,proto3" json:"version" yaml:"version"`
	CreatedAt    int64            `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Deployment) Reset()         { *m = Deployment{} }
func (m *Deployment) String() string { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()    {}
func (*Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_897ec42830b2cbac, []int{1}
}
func (m *Deployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deployment.Merge(m, src)
}
func (m *Deployment) XXX_Size() int {
	return m.Size()
}
func (m *Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_Deployment proto.InternalMessageInfo

func (m *Deployment) GetDeploymentID() DeploymentID {
	if m != nil {
		return m.DeploymentID
	}
	return DeploymentID{}
}

func (m *Deployment) GetState() Deployment_State {
	if m != nil {
		return m.State
	}
	return DeploymentStateInvalid
}

func (m *Deployment) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Deployment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

// DeploymentFilters defines filters used to filter deployments
type DeploymentFilters struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	DSeq  uint64 `protobuf:"varint,2,opt,name=dseq,proto3" json:"dseq" yaml:"dseq"`
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state" yaml:"state"`
}

func (m *DeploymentFilters) Reset()         { *m = DeploymentFilters{} }
func (m *DeploymentFilters) String() string { return proto.CompactTextString(m) }
func (*DeploymentFilters) ProtoMessage()    {}
func (*DeploymentFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_897ec42830b2cbac, []int{2}
}
func (m *DeploymentFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeploymentFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeploymentFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeploymentFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeploymentFilters.Merge(m, src)
}
func (m *DeploymentFilters) XXX_Size() int {
	return m.Size()
}
func (m *DeploymentFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_DeploymentFilters.DiscardUnknown(m)
}

var xxx_messageInfo_DeploymentFilters proto.InternalMessageInfo

func (m *DeploymentFilters) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DeploymentFilters) GetDSeq() uint64 {
	if m != nil {
		return m.DSeq
	}
	return 0
}

func (m *DeploymentFilters) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterEnum("akash.deployment.v1beta2.Deployment_State", Deployment_State_name, Deployment_State_value)
	proto.RegisterType((*DeploymentID)(nil), "akash.deployment.v1beta2.DeploymentID")
	proto.RegisterType((*Deployment)(nil), "akash.deployment.v1beta2.Deployment")
	proto.RegisterType((*DeploymentFilters)(nil), "akash.deployment.v1beta2.DeploymentFilters")
}

func init() {
	proto.RegisterFile("akash/deployment/v1beta2/deployment.proto", fileDescriptor_897ec42830b2cbac)
}

var fileDescriptor_897ec42830b2cbac = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x8d, 0xd3, 0x92, 0x6b, 0xa8, 0x82, 0x55, 0x21, 0x63, 0xa9, 0x3e, 0xcb, 0x03,
	0x0d, 0x48, 0xd8, 0x22, 0x1d, 0x90, 0x22, 0x31, 0xd4, 0x44, 0x48, 0x59, 0xdd, 0x01, 0x09, 0x86,
	0xea, 0x92, 0x3b, 0xa5, 0xa7, 0x3a, 0xbe, 0xd4, 0x3e, 0x52, 0x95, 0x81, 0x19, 0x75, 0x62, 0x64,
	0xa9, 0x54, 0x89, 0x2f, 0xc0, 0xca, 0x37, 0xe8, 0xd8, 0x91, 0xe9, 0x84, 0x9c, 0x05, 0x65, 0xcc,
	0x27, 0x40, 0xbe, 0x4b, 0x71, 0x40, 0x80, 0x98, 0xd8, 0xfc, 0x7e, 0xf7, 0x7f, 0x7e, 0xff, 0x77,
	0xef, 0x1e, 0x7c, 0x80, 0x8f, 0x71, 0x7e, 0x14, 0x12, 0x3a, 0x49, 0xf8, 0xd9, 0x98, 0xa6, 0x22,
	0x9c, 0x3e, 0x1e, 0x50, 0x81, 0x3b, 0x2b, 0x28, 0x98, 0x64, 0x5c, 0x70, 0xcb, 0x56, 0xd2, 0x60,
	0x85, 0x2f, 0xa5, 0xce, 0xf6, 0x88, 0x8f, 0xb8, 0x12, 0x85, 0xe5, 0x97, 0xd6, 0xfb, 0x6f, 0x61,
	0xb3, 0xf7, 0x43, 0xdb, 0xef, 0x59, 0x21, 0xac, 0xf3, 0xd3, 0x94, 0x66, 0x36, 0xf0, 0x40, 0xbb,
	0x11, 0xdd, 0x9b, 0x4b, 0xa4, 0xc1, 0x42, 0xa2, 0xe6, 0x19, 0x1e, 0x27, 0x5d, 0x5f, 0x85, 0x7e,
	0xac, 0xb1, 0xb5, 0x07, 0x4d, 0x92, 0xd3, 0x13, 0x7b, 0xcd, 0x03, 0x6d, 0x33, 0x42, 0x85, 0x44,
	0x66, 0xef, 0x80, 0x9e, 0xcc, 0x25, 0x52, 0x7c, 0x21, 0xd1, 0xa6, 0x4e, 0x2b, 0x23, 0x3f, 0x56,
	0xb0, 0x7b, 0xeb, 0xc3, 0x25, 0x32, 0xbe, 0x5d, 0x22, 0xc3, 0xff, 0x5c, 0x83, 0xb0, 0x32, 0x60,
	0x09, 0x78, 0xbb, 0xb2, 0x7e, 0xc8, 0x88, 0xb2, 0xb1, 0xd9, 0xb9, 0x1f, 0xfc, 0xa9, 0xad, 0x60,
	0xd5, 0x7d, 0xb4, 0x7b, 0x25, 0x91, 0x51, 0x48, 0xf4, 0x53, 0x4f, 0x73, 0x89, 0xd6, 0x18, 0x59,
	0x48, 0xd4, 0xd0, 0x46, 0x18, 0xf1, 0xe3, 0x66, 0xf5, 0xa7, 0x3e, 0xb1, 0x5e, 0xc1, 0x7a, 0x2e,
	0xb0, 0xa0, 0xaa, 0x89, 0xad, 0xce, 0xc3, 0x7f, 0xa9, 0x16, 0x1c, 0x94, 0x19, 0xfa, 0x82, 0x54,
	0x72, 0x75, 0x41, 0x2a, 0xf4, 0x63, 0x8d, 0xad, 0x27, 0x70, 0x63, 0x4a, 0xb3, 0x9c, 0xf1, 0xd4,
	0xae, 0x79, 0xa0, 0xdd, 0x8c, 0x76, 0xe6, 0x12, 0xdd, 0xa0, 0x85, 0x44, 0x5b, 0x3a, 0x69, 0x09,
	0xfc, 0xf8, 0xe6, 0xc8, 0xda, 0x81, 0x70, 0x98, 0x51, 0x2c, 0x28, 0x39, 0xc4, 0xc2, 0x36, 0x3d,
	0xd0, 0xae, 0xc5, 0x8d, 0x25, 0xd9, 0x17, 0xfe, 0x1b, 0x58, 0x57, 0x16, 0xac, 0x5d, 0xb8, 0xc1,
	0xd2, 0x29, 0x4e, 0x18, 0x69, 0x19, 0x8e, 0x73, 0x7e, 0xe1, 0xdd, 0xad, 0x5c, 0x2a, 0x45, 0x5f,
	0x9f, 0x5a, 0x1e, 0x5c, 0xc7, 0x43, 0xc1, 0xa6, 0xb4, 0x05, 0x9c, 0xed, 0xf3, 0x0b, 0xaf, 0x55,
	0xe9, 0xf6, 0x15, 0x2f, 0x15, 0xc3, 0x84, 0xe7, 0x94, 0xb4, 0xd6, 0x7e, 0x55, 0x3c, 0x53, 0xdc,
	0x31, 0xdf, 0x7d, 0x74, 0x8d, 0xae, 0xa9, 0x66, 0xf7, 0x09, 0xc0, 0x3b, 0x95, 0xe0, 0x39, 0x4b,
	0x04, 0xcd, 0xf2, 0xff, 0xf3, 0x82, 0xca, 0x2a, 0x7a, 0x64, 0xb5, 0xaa, 0xca, 0xdf, 0xc6, 0xa0,
	0x2d, 0x47, 0x2f, 0xae, 0x0a, 0x17, 0x5c, 0x17, 0x2e, 0xf8, 0x5a, 0xb8, 0xe0, 0xfd, 0xcc, 0x35,
	0xae, 0x67, 0xae, 0xf1, 0x65, 0xe6, 0x1a, 0x2f, 0x9f, 0x8e, 0x98, 0x38, 0x7a, 0x3d, 0x08, 0x86,
	0x7c, 0x1c, 0xaa, 0xf1, 0x3f, 0x4a, 0xa9, 0x38, 0xe5, 0xd9, 0xf1, 0x32, 0xc2, 0x13, 0x16, 0x8e,
	0x78, 0x98, 0x72, 0x42, 0x7f, 0xb3, 0x88, 0x83, 0x75, 0xb5, 0x4e, 0x7b, 0xdf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x82, 0x2a, 0xa8, 0xab, 0x03, 0x00, 0x00,
}

func (m *DeploymentID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DSeq != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDeployment(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintDeployment(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.DeploymentID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeployment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DeploymentFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeploymentFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeploymentFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintDeployment(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DSeq != 0 {
		i = encodeVarintDeployment(dAtA, i, uint64(m.DSeq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDeployment(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeployment(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeployment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeploymentID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovDeployment(uint64(m.DSeq))
	}
	return n
}

func (m *Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DeploymentID.Size()
	n += 1 + l + sovDeployment(uint64(l))
	if m.State != 0 {
		n += 1 + sovDeployment(uint64(m.State))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovDeployment(uint64(m.CreatedAt))
	}
	return n
}

func (m *DeploymentFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	if m.DSeq != 0 {
		n += 1 + sovDeployment(uint64(m.DSeq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovDeployment(uint64(l))
	}
	return n
}

func sovDeployment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeployment(x uint64) (n int) {
	return sovDeployment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeploymentID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeploymentID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Deployment_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeploymentFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeploymentFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeploymentFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSeq", wireType)
			}
			m.DSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeployment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeployment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeployment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeployment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeployment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeployment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeployment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeployment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeployment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeployment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeployment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeployment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeployment = fmt.Errorf("proto: unexpected end of group")
)
