syntax = "proto3";

package akash.inventory.v1;

import "gogoproto/gogo.proto";
import "akash/base/attributes/v1/attribute.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";

option go_package = "pkg.akt.dev/go/inventory/v1";

// ResourcePair to extents resource.Quantity to provide total and available units of the resource
message ResourcePair {
  option (gogoproto.equal) = false;

  k8s.io.apimachinery.pkg.api.resource.Quantity allocatable = 1 [
    (gogoproto.nullable)   = true,
    (gogoproto.customname) = "Allocatable",
    (gogoproto.jsontag)    = "allocatable",
    (gogoproto.moretags)   = "yaml:\"allocatable\""
  ];
  k8s.io.apimachinery.pkg.api.resource.Quantity allocated = 2 [
    (gogoproto.nullable)   = true,
    (gogoproto.customname) = "Allocated",
    (gogoproto.jsontag)    = "allocated",
    (gogoproto.moretags)   = "yaml:\"allocated\""
  ];
  repeated akash.base.attributes.v1.Attribute attributes = 3 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "pkg.akt.dev/go/node/types/attributes/v1.Attributes",
    (gogoproto.jsontag)      = "attributes,omitempty",
    (gogoproto.moretags)     = "yaml:\"attributes,omitempty\""
  ];
  k8s.io.apimachinery.pkg.api.resource.Quantity capacity = 4 [
    (gogoproto.nullable)   = true,
    (gogoproto.customname) = "Capacity",
    (gogoproto.jsontag)    = "capacity",
    (gogoproto.moretags)   = "yaml:\"capacity\""
  ];
}
